G3ActionsDefault extends G3ActionsContainer
{
	//  MoralAlignment are the values of the family
	//	MoralAlignmentShift = 1.0; // A multiplier that affects how much the moral alignment of a family shifts when it executes the action.
	// 	MoralAlignment = MoralAlignment
	// 	{
	// 		Values = array{0.5, 0.5, 0.5}; honest/shady, philanthropic/egoistic, diplomatic/aggressive
	// 	};

	// Reactions: array as defined in SoundsDefault.oc voices
	//	indicating: source, target, male, female, when, success, success, failure
	// 		MessageSourceMBefore
	// 		MessageSourceFBefore
	// 		MessageTargetMBefore
	// 		MessageTargetFBefore
	// 		MessageSourceMDuringSuccess
	// 		MessageSourceFDuringSuccess
	// 		MessageTargetMDuringSuccess
	// 		MessageTargetFDuringSuccess
	// 		MessageSourceMDuringFailure
	// 		MessageSourceFDuringFailure
	// 		MessageTargetMDuringFailure
	// 		MessageTargetFDuringFailure
	// 		MessageSourceMAfterSuccess
	// 		MessageSourceFAfterSuccess
	// 		MessageTargetMAfterSuccess
	// 		MessageTargetFAfterSuccess
	// 		MessageSourceMAfterFailure
	// 		MessageSourceFAfterFailure
	// 		MessageTargetMAfterFailure
	// 		MessageTargetFAfterFailure

	// Abilities
	//		Charisma, Dexterity, Intelligence, Perception, Strength

	// ActionGUIData, int == -1 (don't care, default), 0 (no) or 1 (yes)
	//	AnythingSelected, int
	//	IsCharacter, int
	//	SelectionPlayer, int
	//	SelectionOtherFamily, int
	//	SelectionProducer, int
	//	SelectionSecretSociety, int
	//	CharacterNearSeller, int
	//	CharacterMemberSociety, int
	//	CharacterLeaderSociety, int
	//	IsSecretSocietyLeader, int
	//	ContainHostage, int
	//	FamilyMemberOfOwnSociety, int
	//	FamilyMemberSociety, int
	//	CharacterInBuilding, int
	//	CharacterInOwnBuilding, int
	//	CharacterSleeping, int
	//	CharacterUnconscious, int
	//	CharacterNearControlledBuilding, int
	//	CharacterNearChurch, int
	//	CharacterNearGrove, int
	//	CharacterNearMedicus, int
	//	CharacterNearBuildingType, int
	//	CharacterIsHome, int
	//	CharacterHasHome, int
	//	CharacterIsInOneOfHisHouse, int
	//	CharacterIsInRomance, int
	//	CharacterIsInLiaison, int
	//	CharacterIsInLove, int
	//	CharacterHasWeddableConcubine, int
	//	CharacterHasASpouse, int
	//	CharacterIsHenchmen, int
	//	CharacterHasItemsInInventory, int
	//	PoliticMenuOpen, int
	//	SecretSocietyMenuOpen, int
	//	CharacterIsNotInsideBuildingType, HString
	//	IsInScene, int
	//	IsInIndoorScene, int
	//	IsBuilding, int
	//	IsBusiness, int
	//	IsDecoration, int
	//	CanBeUpgraded, int
	//	IsBuildingOrInsideBuilding, int
	//	SelectionHouse, int
	//	SelectionBusiness, int
	//	SelectionWarehouse, int
	//	CanOwnFamilySeeInsideBuilding, int
	//	InsideBuildingWithInteriorScene, int
	//	IsOnBuildingInside, int
	//	IsOnBuildingExterior, int
	//	HasInterior, int
	//	IsActiveInterior, int
	//	IsInActiveInterior, int
	//	IsInteriorActive, int
	//	IsInInterior, int
	//	CanPlayerLookInside, int
	//	CurrentBuildingHiring, int
	//	HasOwnedBuildingOnFire, int
	//	SelectionCourier, int
	//	IsHome, int
	//	SelectionForSale, int
	//	CharacterHasPoliticalOffice, int
	//	CharacterHasAppliedForPoliticalOffice, int
	//	DisposableChildrenOfLeader, int
	//	TargetAllied, int
	//	TargetWar, int
	//	CharacterPossessFood, int
	//	CharacterPossessGift, int
	//	DisabledDuringAction, int
	//	BuildingIsDamaged, int
	//	BuildingIsOnFire, int
	//	CanOwnFamilyBuildBusiness, int
	//	PlayerHasConcubine, int
	//	FeudWithFamily, int
	//	AllianceWithFamily, int
	//	NeutralWithFamily, int
	//	AllianceMinimumDurationDone, int
	//	FeudWithSecretSociety, int
	//	AllianceWithSecretSociety, int
	//	NeutralWithSecretSociety, int
	//	SecretSocietyAllianceMinimumDurationDone, int
	//	FamilyCanHireHenchmen, int
	//	FamilyHasASecretSociety, int
	//	IsResourceProducer, int
	//	IsLeasingManaged, int
	//	CityBuilding, int
	//	RessourceProducerOrCityBuilding, int
	//	FamilyMainHouse, int
	//	CharacterPrisoner, int
	//	HasProfession, HString
	//	DoesNotHaveProfession, HString
	//	HasFamily, int
	//	MinLevel, int
	//	BelongsToOwnFamily, int
	//	CanHaveTransporters, int
	//	IsAtEmployer, int
	//	IsControlledByHuman, int
	//	DoesNotHaveTag, HString
	//	DoesHaveTag, HString
	//	IsUnlockedAction, int
	//	IsIncapacitated, int
	//	IsCharacterOutsideMap, int
	//	IsLeader, int
	//	IsHeir, int
	//	IsSpouseOfLeader, int
	//	IsFamilyMember, int
	//	IsWorking, int
	//	IsEmployee, int
	//	IsTransporter, int
	//	IsProducer, int
	//	IsTrueBloodline, int
	//	IsHand, int
	//	IsPartyMember, int
	//	IsRightHand, int
	//	IsLeftHand, int
	//	MinAge, int
	//	IsToddler, int
	//	IsChild, int
	//	IsAdult, int
	
	//RelationshipValues = ActionRelationshipValues
	//{
	//	AffectTarget = "0"; // dynasty of the target
	//	AffectTargetAllies = "0"; // all dynasties with relationship score >= 50 towards the target
	//	AffectTargetEnemies = "0"; // all dynasties with relationship score <= -50 towards the target
	//	AffectTargetSocietyMembers = "0"; // all dynasties in the same secret society as the target
	//	AffectTargetAlliedSocietyMembers = "0"; // all dynasties that are members of allied secret society
	//	AffectTargetEnemySocietyMembers = "0"; // all dynasties that are members of allied enemy society
	//	AffectCurrentNeighborhoodToSource = "0"; // the neighborhood where the action take place
	//	AffectLiaison = "0"; // how much the liaison relationship with the target changes
	//};
	
	//GuardingDetectionRules = DetectionRules
	//{
	//	React = ReactByRules
	//	{
	//		ActionsSource = array{"AnyValue"};
	//		ActionsTarget = array{"SameDynasty", "AlliedDynasty"};
	//	};
	//	Ignore = IgnoreByRules
	//	{
	//		ActionsSource = array{"SameDynasty"};
	//		ActionsTarget = array{"AnyValue"};
	//	};
	//};
	

	//    TARGET FILTERS:
	//	DesiredProfiles = array
	//	{
	//    TargetProfileBuilding
	//    {
	//      ActiveResidence = 3;
	//      Burning = 2;
	//      Business = 1;
	//      Buyable = 0;
	//      CloseToActor = -1;
	//      Guarded = -1;
	//      Open = -3;
	//      ResourceProducer = 0;
	//		IncludedTypes = array { "Well" };
	//		ExludedTypes = array { "Church", "Market" };
	//
	//      FamilyProfile = TargetProfileFamily
	//      {
	//			MyFamily = -3;
	//			Alliance = 0;
	//			Feud = 0;
	//          GoodRelationWithMe = 3;
	//			OtherCity = 2;
	//			MemberOfSecretSociety = 1;
	//			SocialHigher = 0;
	//			PoliticalImportance = -1;
	//			Rich = -2;
	//			Heretic = -3;
	//      };
	//    }
	//	}
	//	
	//	DesiredProfiles = array
	//	{
	//		TargetProfileCharacter
	//		{
	//			Adult = 3;
	//			CloseToActor = 2;
	//			Healthy = 1;
	//			Infected = 0;
	//			OfficeHolder = -1;
	//			HigherOfficeLevel = -1;
	//			DirectUpperOffice = -2;
	//			OppositeGender = -3;
	//			Poisoned = 3;
	//			FightingProwess = 2;
	//
	//          FamilyProfile = TargetProfileFamily
	//          {
	//				MyFamily = -3;		
	//				Alliance = 0;
	//				Feud = 0;
	//              GoodRelationWithMe = 3;
	//			    OtherCity = 2;
	//			    MemberOfSecretSociety = 1;
	//			    SocialHigher = 0;
	//			    PoliticalImportance = -1;
	//			    Rich = -2;
	//			    Heretic = -3;
	//          };
	//		}
	//	}
	//
	//	DesiredProfiles = array
	//	{
	//    TargetProfileFamily
	//    {
	//			MyFamily = -3;		
	//			Alliance = 0;
	//			Feud = 0;
	//			GoodRelationWithMe = 3;
	//			OtherCity = 2;
	//			MemberOfSecretSociety = 1;
	//			SocialHigher = 0;
	//			PoliticalImportance = -1;
	//			Rich = -2;
	//			Heretic = -3;
	//    }
	//	}
	//
	//	DesiredProfiles = array
	//	{
	//    TargetProfileNeighborhood
	//    {
	//			WellGuarded = -3;
	//			CrimeAware = -2;
	//			GoodRelationWithMe = -1;
	//			Infected = 0;
	//			Inhabitated = 1;
	//			OtherCity = 2;
	//			OutideCityWall = 3;
	//			Poisoned = 2;
	//			PoliticalImportance = 1;
	//			Rich = 0;
	//    }
	//	}
		
	//FunctionPickRandom
	//{
	//	ResultObjectIds = array{ "ResultObject1", "ResultObject2" };
	//};

	//EProductsType
	//RawMaterial = 1,
	//Food = 2,
	//WeaponArmor = 3,
	//Clothing = 4,
	//Trinkets = 5,
	//Luxury = 6,
	//Tinctures = 7,
	//Components = 8,
	//Transportation = 9,
	//Livestock = 10,

	//FunctionAffectNeeds
	//{
	//	ApplyTo = Target;
	//	ProductType = 8; // EProductsType
	//	Amount = 10.0f; 
	//},
	
	//"TakeBath" = G3ActionTemplate
	//{
	//	ServiceNeeds = map
	//	{
	//		"Hygiene" = 2;
	//		"Entertainment" = 1;
	//	};
	//};

	// *********************************************************************

	CategoryOrder = array 
	{
		"Urgent",    //Urgent & Needs
		"Fighting",  //Aggression & Protection
		"Rogue",     //Dubious & Covert
		"Romance",   //Romances & Liaisons
		"Family",    //Dynasty & Businesses
		"Diplomacy", //Diplomacy & Politics
		"Religion",  //Religion
		"Artifact",  //Consumables
	};
	
	Actions = map
	{
		"PutOutFire" = G3ActionTemplate //Extinguish fire
		{
			ActionClassName =  "PutOutFire";
			GUIPresent = true;
			UICategory = "Urgent";
			OrderIndex = 5;
			
			GUIData = array
			{
				@base/AnyAdultBelongingToOwnFamily,
				@base/AllNeutralNPCs
			};
			UsableBy = array{ "$characters.Age.Adult" };
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"PutOutFire", 0, -1, -1},
			};
			
			AnimationProps = array
			{
				PropSpawnDesc { PropNames = array { "bucket2/bucket2" }; };
			};

			ActionActor = "Character";
			TargetActor = "Building";
			DistanceFromTarget = 75;
			
			BaseRewardXP = 20;
			//BaseRewardPrestige = 25;
			
			ActionName = "PutOutFire";
			DisplayName = "$action.PutOutFire";
			Description = "$action.PutOutFireDesc";
			Instruction = "$callToAction.BuildingBurning";
			CriticalFactor = 1.0;
			CanFail = false;
			InterruptForSleep = false;
			
			DesiredProfiles = array
			{                
				TargetProfileBuilding
				{
					CityBuilding = -3;
					ResourceProducer = -3;
					CloseToActor = 2;
					Burning = 3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 2;
						Feud = -2;
						Alliance = 1;
					};
				}
			};
			
			MoralAlignmentShift = 0.3;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.2,0.9,0.2};
			};
			
			SuccessResult = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					MatchAny = true;
					Tags = array {"FireDamage", "FireSpread"};
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array {"FireProtection"};
					ActorValue = "FireProtection";
					Mod = 5.0;
					Duration = 360.0;
					Recover = true;
				},
				FunctionUpdateRelationship
				{
					//AffectCurrentNeighborhoodToSource = "6";
					//AffectTarget = "4";
					AffectCurrentNeighborhoodToSource = "3";
					AffectTarget = "4";
				},
				FunctionTrackObjectiveProgress
				{
					Amount = 20;
					ObjectiveTypename = "IncreaseSecurity";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 5;	//Armor
					Amount = -0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 6;	//Clothing
					Amount = -0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;	//Intermediate
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 4;	//Weapon
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 8;	//Essentials
					Amount = 0.05;
				},
			};
		};


//Guild actions
//----------------------------------------------------
		"SocietyInviteMember" = G3ActionTemplate //Invite new member (This is the action used to accept a guild invitation)
		{
			ActionClassName = "SocietyInviteMemberAction";
			GUIPresent = false;
			GUIData = array
			{
				ActionGUIData
				{
					IsUnlockedAction = 0;
					FamilyMemberSociety = 0;
				},
			};

			ShowCombatText = false;
			
			ActionActor = "Family";
			TargetActor = "Family";
			BaseRewardXP = 100;
			
			CanFail = false;
			ActionName = "SocietyInviteMember";
			DisplayName = "$SocietyInviteMember";
			Description = "$SocietyInviteMemberDesc";
			Instruction = "";
			
			EnterBuilding = "TryEnter";

			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 25;
					ObjectiveTypename = "IncreaseSecurity";
				}
			};
		};
		
		"LeaveSecretSociety" = G3ActionTemplate //Leave guild
		{
			GUIPresent = true;
			UICategory = "Diplomacy";
			OrderIndex = 50;

			ActionName = "LeaveSecretSociety";
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterMemberSociety = 1;
					IsLeader = 1;
				}
			};
			UsableBy = array{ "$guiLeader" };
			
			CurrencyType = "Prestige";
			PriceFormula = "15";
			BudgetPot = "Diplomacy";
			
			BaseRewardXP = 100;
			
			ShowCombatText = false;
			
			CanFail = false;
			EnterBuilding = "TryEnter";

			ActionName = "LeaveSecretSociety";
			DisplayName = "$action.LeaveSecretSociety";
			Description = "$action.LeaveSecretSocietyDesc";
			Instruction = "";

			SuccessResult = array
			{
//				FunctionSendMessage
//				{
//					ApplyTo = "Source";
//					Broadcast = true;
//					Description = "DynastyLeavesGuild";
//				},
			};
	   };
		
//Base actions
//----------------------------------------------------
		"GoHome" = G3ActionTemplate //Send home
		{
			GUIPresent = true;
			OrderIndex = 5;

			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterIsHome = 0;
					CharacterHasHome = 1;
				},
			};
			UsableBy = array{ "$loca.key.anyone" };

			ShowCombatText = false;

			ActionClassName = "GoHome";
			ActionActor = "Character";
			ActionName = "GoHome";
			DisplayName = "$GoHome";
			Description = "$GoHomeDesc";

			CanFail = false;
			
			EnterBuilding = "TryEnter";
			
			Cooldown = 0.001;
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 10;
					ObjectiveTypename = "IncreaseSecurity";
				}
			};
			OnEndResult = array
			{
				TagEffect
				{
					ApplyTo = "Self";
					Tags = array{"AtHome"};
					Duration = 300.0; //~4h
				},
			};
		};
		
		"GoToLocation" = G3ActionTemplate
		{
			GUIPresent = false;
			ActionClassName = "GoToLocation";
			ActionName = "GoToLocation";
			ActionActor = "Character";			
			TargetActor = "Coordinate";
			ShowCombatText = false;
			SourceRun = false;
			DisplayName = "$NPC.Stroll";
			Description = "$NPC.StrollDesc";
			EnterBuilding = "TryEnter";
			CanFail = false;
			AskConfirmationOnCancel = false;
			
			GUIData = array
			{
				@base/AllNeutralNPCs
			};
		};
		
		"GoToCharacter" = G3ActionTemplate
		{
			GUIPresent = false;
			ActionClassName = "GoToLocation";
			ActionName = "GoToCharacter";
			ActionActor = "Character";
			TargetActor = "Character";			
			ShowCombatText = false;
			SourceRun = true;
			DisplayName = "$NPC.Stroll";
			Description = "$NPC.StrollDesc";
			EnterBuilding = "TryEnter";
			CanFail = false;
			AskConfirmationOnCancel = false;

			GUIData = array
			{
				@base/AllNeutralNPCs
			};
		};

		"GoToBuilding" = G3ActionTemplate
		{
			ActionClassName = "GoToBuilding";
			GUIPresent = false;
			ShowCombatText = false;

			ActionActor = "Character";
			TargetActor = "Building";

			ActionName = "GoToBuilding";
			DisplayName = "$action.GoToBuilding";
			Description = "$action.GoToBuildingDesc";
			EnterBuilding = "TryEnter";

			CanFail = false;
			AskConfirmationOnCancel = false;
			
			EnterBuilding = "TryEnter";
		};

		"GoToBuildingAndDropAll" = G3ActionTemplate //Go to the building and drop all
		{
			ActionClassName = "GoToBuildingAndDropAll";
			GUIPresent = false;
			ShowCombatText = false;

			ActionActor = "Character";
			TargetActor = "Building";

			ActionName = "GoToBuildingAndDropAll";
			DisplayName = "$action.GoToBuildingAndDropAll";
			Description = "$action.GoToBuildingAndDropAllDesc";

			CanFail = false;
			AskConfirmationOnCancel = false;
			
			EnterBuilding = "TryEnter";
		};
		
		"WakeUpAction" = G3ActionTemplate //Wake up
		{
			ActionClassName = "SimpleExecutionAction";
			GUIPresent = true;
			UICategory = "Urgent";
			OrderIndex = 16;

			GUIData = array
			{
				ActionGUIData // family members
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterSleeping = 1;
					IsFamilyMember = 1;
				},
				ActionGUIData // Robbers, Thieves, Lansquenets (Mercenaries)
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterSleeping = 1;
					DoesHaveTag = "IgnoringWorktime";
				},
				ActionGUIData // employees without SleepAutomation
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterSleeping = 1;
					DoesHaveTag = "ManualSleep";
				},
			};
			UsableBy = array{ "$loca.key.anyone" };

			ShowCombatText = false;

			ActionActor = "Character";
			
			ActionName = "WakeUpAction";
			DisplayName = "$WakeUpAction";
			Description = "$WakeUpActionDesc";

			CanFail = false;
			EnterBuilding = "TryEnter";

			TargetSnapPoint = TargetSnapPoint
			{
				Required = false;
				ShouldReserve = false;
				ShouldOccupy = false;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "WakeUp"; },
				};
			};
		};

		"Sleep" = G3ActionTemplate //Go to sleep
		{
			ActionClassName = "SleepAction";
			GUIPresent = true;
			UICategory = "Urgent";
			OrderIndex = 15;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterSleeping = 0;
				},
			};
			UsableBy = array{ "$loca.key.anyone" };

			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$selectionPrompt.SelectResidence";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoResidence";
			
			DesiredProfiles = array
			{
				// Family members or employee
				TargetProfileBuilding
				{					
					ExcludedTypes = array{"Statue", "Stage"};
					CloseToActor = 2;
					Burning = -3;
					Business = -3;
					ResourceProducer = -3;
					CityBuilding = -3;
					AllowsSleeping = 3; // This is the only building profile here that demands the building allows sleeping.
					
					// Any residence building of my family.
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
					IsCurrentBuilding = 3;
					AutoSelect = true;
				};
				// Family members or employee
				TargetProfileBuilding
				{					
					ExcludedTypes = array{"Statue", "Stage"};
					CloseToActor = 2;
					Burning = -3;
					Business = -3;
					ResourceProducer = -3;
					CityBuilding = -3;
					AllowsSleeping = 3; // This is the only building profile here that demands the building allows sleeping.
					
					// Any residence building of my family.
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
				};
				// Employee
				TargetProfileBuilding 
				{					
					ExcludedTypes = array{"Statue", "Stage"};
					CloseToActor = 2;
					Burning = -3;
					Business = 3;
					Home = 3; // source's main building
					// No AllowsSleeping here, as an employee is ALWAYS allowed to sleep in his home building.
					
					// Any residence building of my family.
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
				};
				// Resource producer Employee
				TargetProfileBuilding 
				{					
					ExcludedTypes = array{"Statue", "Stage"};
					CloseToActor = 2;
					Burning = -3;
					ResourceProducer = 3;
					Home = 3; // source's main building
					// No AllowsSleeping here, as en employee is ALWAYS allowed to sleep in his home building.
					
					// Any residence building of my family.
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
				};
			};
			
			ShowCombatText = false;
			AskConfirmationOnCancel = false;
			InterruptForSleep = false; // We don't want the sleep automation to interrupt manual sleep.
			
			ActionActor = "Character";
			TargetActor = "Building";

			ActionName = "Sleep";
			DisplayName = "$action.Sleep";
			Description = "$action.SleepDesc";
			Instruction = "$selectionPrompt.SelectResidence";
			
			CanFail = false;
			
			Cooldown = 0.001; //~1sec
			
			Duration = 0.10; // 0.25
				
			EnterBuilding = "TryEnter";

			TargetSnapPoint = TargetSnapPoint
			{
				Required = false;
				ShouldReserve = false;
				ShouldOccupy = false;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "GoToBed"; },
				};
			};
			
			CriticalFactor = 1.0;

			OnStartResult = array
			{
				TagEffect
				{
					ApplyTo = "Self";
					Tags = array{"ManualSleep"};
				},
			};
			OnFinishResult = array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"WakeUpAction"};
					CheckSourceProfile = false; // The WakeUpAction checks if the target is asleep. This gets executed after the target has already awoken, so ignore that check here.
				},
			};			
			OnEndResult = array
			{
				TagEffect
				{
					ApplyTo = "Self";
					Tags = array{"Family-WellRested"};
					Duration = 1200.0; // 16 hours
				},
				FunctionRemoveEffect
				{
					ApplyTo = "Self";
					MatchAny = true;
					Tags = array {"ManualSleep"};
				},
			};
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 5;
					ObjectiveTypename = "IncreaseSecurity";
				}
			};
		};
		
		"GoHomeAndSleepUntilHealthy" = G3ActionTemplate //Go to sleep
		{
			ActionClassName = "SleepUntilHealthyAction";
			GUIPresent = false;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterSleeping = 0;
				},
			};

			ShowCombatText = false;
			AskConfirmationOnCancel = false;
			
			ActionActor = "Character";
			TargetActor = "Building";
			
			ActionName = "GoHomeAndSleepUntilHealthy";
			DisplayName = "$action.Sleep";
			Description = "$action.SleepDesc";
			Instruction = "$selectionPrompt.SelectResidence";
			
			CanFail = false;
			Cooldown = 0.001; //~1sec		
			EnterBuilding = "TryEnter";
			CriticalFactor = 1.0;
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$selectionPrompt.SelectResidence";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoResidence";
			
			DesiredProfiles = array
			{
				// Family members or employee
				TargetProfileBuilding
				{					
					CloseToActor = 2;
					Burning = -3;
					Business = -3;
					CityBuilding = -3;
					AllowsSleeping = 3;
					
					// Any residence building of my family.
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
				};
				// Employee
				TargetProfileBuilding 
				{					
					CloseToActor = 2;
					Burning = -3;
					Business = 3;
					Home = 3; // source's main building
					
					// Any residence building of my family.
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
				};					
			};
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 5;
					ObjectiveTypename = "IncreaseSecurity";
				}
			};
		};
		
		"SleepAutomation" = G3ActionTemplate//Go to sleep
		{
			ActionClassName = "SleepAction";

			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterSleeping = 0;
				},
			};

			ShowCombatText = false;
			
			ActionActor = "Character";
			TargetActor = "Building";
			
			ActionName = "SleepAutomation";
			DisplayName = "$action.Sleep";
			Description = "$action.SleepDesc";
			Instruction = "$selectionPrompt.SelectResidence";
			
			CanFail = false;
			CanBeCancelled = true;
			AskConfirmationOnCancel = true;
			InterruptForSleep = false; // This is important, so the sleep code doesn't repeatedly try to start this action.
			
			Cooldown = 0.001; //~1sec
			
			Duration = 0.25;
			
			EnterBuilding = "TryEnter";

			CriticalFactor = 1.0;
			
			DesiredProfiles = array
			{
				// Employee
				TargetProfileBuilding 
				{					
					Home = 3; // source's main building
				};					
			};
			
			TargetSnapPoint = TargetSnapPoint
			{
				Required = false;
				ShouldReserve = false;
				ShouldOccupy = false;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "GoToBed"; },
				};
			};
		};

		"AIBidAction" = G3ActionTemplate
		{
			GUIPresent = false;
			HideFromUnlocks = true;
			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsControlledByHuman = 0; //AI only (human players trigger it from a custom UI instead of from the ActionBar)
				},
			};
			
			ShowCombatText = false;

			ActionClassName = "AIBidAction";
			ActionName = "AIBidAction";

			ActionActor = "Family";
			
			CanFail = false;

		};
		
		"BuyBusiness" = G3ActionTemplate //Construct building
		{
			GUIPresent = true; 

			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsControlledByHuman = 0; //AI only (human players trigger it from a custom UI instead of from the ActionBar)
					CityBuilding  = 0;
				},
			};
			ShowCombatText = false;

            ActionClassName = "BuyBusinessAction";
            ActionName = "BuyBusiness";
			BudgetPost = "Buildings";

			DisplayName = "$action.BuyBusiness";
			Description = "$action.BuyBusinessDesc";
			Instruction = "";

			ActionActor = "Family";

			CanFail = false;
			
			BaseRewardPrestige = 25;
			
			BudgetPost = "Buildings";
			BudgetPot = "Expansion";

		};

		"GoMarket" = G3ActionTemplate //Send to the market
		{
			GUIPresent = true;
			OrderIndex = 6;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterIsNotInsideBuildingType = "Market";
				},
			};
			UsableBy = array{ "$loca.key.anyone" };
			
			ShowCombatText = false;

			ActionClassName = "GoMarket";
			ActionActor = "Character";
			
			ActionName = "GoMarket";
			DisplayName = "$GoMarket";
			Description = "$GoMarketDesc";
			
			CanFail = false;
			
			EnterBuilding = "TryEnter";
		};

		"GoToBusinessToBuyItems" = G3ActionTemplate //Shop at front store
		{
			ActionClassName = "GoToBusinessToBuyItems";
			GUIPresent = false;
			
			GUIData = array
			{
				@base/AllNeutralNPCs
			};
			
			ShowCombatText = false;
			
			ActionActor = "Character";

			ActionName = "GoToBusinessToBuyItems";
			DisplayName = "$action.GoToBusinessToBuyItems";
			Description = "$action.GoToBusinessToBuyItemsDesc";

			CanFail = false;
			CriticalFactor = 1.0f;
			
			SourceRun = false;
			EnterBuilding = "TryEnter";

			TargetSnapPoint = TargetSnapPoint
			{
				Required = false;
				ShouldReserve = false;
				ShouldOccupy = false;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "shopping"; Inside = -3; },
				};
			};
		};
		
		"GoGrove" = G3ActionTemplate //Send to the nearest grove
		{
			ActionClassName = "GoGrove";
			GUIPresent = false;
			ShowCombatText = false;
			
			ActionActor = "Character";

			ActionName = "GoGrove";
			DisplayName = "$action.GoGrove";
			Description = "$action.GoGroveDesc";

			CanFail = false;
			
			EnterBuilding = "TryEnter";
		};

		"StorageKeeper" = G3ActionTemplate //Trade route
		{
			ActionName = "StorageKeeper";
			
			ActionClassName = "NavigateRouteAction";
			GUIPresent = false;

			ActionActor = "Character";
			DisplayName = "$NavigateRoute";
			Description = "$NavigateRouteDesc";

			CanFail = false;
			AskConfirmationOnCancel = false;
			InterruptForSleep = false;
			
			ShowCombatText = false;
			
			BaseRewardXP = 25;
		};
		
		"NavigateRoute" = G3ActionTemplate //Trade route
		{
			ActionClassName = "NavigateRouteAction";
			GUIPresent = false;

			ActionActor = "Character";
			ActionName = "NavigateRoute";
			DisplayName = "$NavigateRoute";
			Description = "$NavigateRouteDesc";

			CanFail = false;
			AskConfirmationOnCancel = false;
			InterruptForSleep = false;
			
			BaseRewardXP = 25;
			
			ShowCombatText = false;
		};
			
		"BusinessAction" = G3ActionTemplate
		{
			GUIPresent = false;
			ActionClassName = "AutomatableAction";
			ActionName = "BusinessAction";
			ShowCombatText = false;
			EnterBuilding = "TryEnter";
		},
		
		"ProductionAnimationAction" = G3ActionTemplate
		{
			GUIPresent = false;
			ActionClassName = "ProductionAnimationAction";
			ActionName = "ProductionAnimationAction";
			InterruptForSleep = false;
			EnterBuilding = "TryEnter";
			IconName = "Unknown";
		},

		"ChangeMainBuilding" = G3ActionTemplate //Change place of residence
		{
			GUIPresent = true;
			OrderIndex = 45;
			
			GUIData = array
			{
				ActionGUIData
				{
					IsBuilding = 1;
					SelectionBusiness = 0;
					SelectionWarehouse = 0;
					SelectionForSale = 0;
					BelongsToOwnFamily = 1;
					IsHome = 0;
					RessourceProducerOrCityBuilding = 0;
					DoesNotHaveTag = "NoRealBuilding";
				},
			};            
			
			Cooldown = 0.05;
			
			ShowCombatText = false;

			PriceFormula = "SocialLevel * ((50 * hasTag.BuffEasy) + (100 * hasTag.BuffNormal) + (200 * hasTag.BuffHard) + (300 * hasTag.BuffImpossible))";
			BudgetPot = "Other";
			BudgetPost = "Buildings";
            
            ActionClassName = "ChangeMainBuildingAction";
            ActionName = "ChangeMainBuilding";
			ActionActor = "Family"; // in order not to cancel current leader action

			DisplayName = "$action.ChangeMainBuilding";
			Description = "$action.ChangeMainBuildingDesc";
			Instruction = "";

			CanFail = false;
			CanBeCancelled = false;
			EnterBuilding = "TryEnter";

		};
		
		"RepairBuilding" = G3ActionTemplate //RepairBuilding
		{
			GUIPresent = true;
			OrderIndex = 50;
			
			GUIData = array
			{
				ActionGUIData
				{
					IsBuilding = 1;
					BelongsToOwnFamily = 1;
					BuildingIsDamaged = 1;
					BuildingIsOnFire = 0;
					CityBuilding  = 0;
				}
			};
			
			ShowCombatText = false;
			
			ActionName = "RepairBuilding";
			ActionClassName = "RepairBuildingAction";

			Duration = 0.1; // Time to repair a building to full, in years.
			DurationSeconds = 2.5; // Tick frequency of the healing effect.
			
			DisplayName = "$action.RepairBuilding";
			Description = "$action.RepairBuildingDesc";
			Instruction = "";
			EnterBuilding = "TryEnter";

			CanFail = false;
			
			CriticalFactor = 1.0;
			
			BudgetPost = "Renovation";
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 10;
					ObjectiveTypename = "IncreaseSecurity";
				}
			};
		};
		
		"DecommissionBuilding" = G3ActionTemplate //Demolish building
		{
			GUIPresent = true;
			OrderIndex = 55;
			
			ActionName = "DecommissionBuilding";
			ActionClassName = "DecommissionBuildingAction";
			GUIData = array
			{
				ActionGUIData
				{
					IsBuilding = 1;
					BelongsToOwnFamily = 1;
					RessourceProducerOrCityBuilding = 0;
				},
				ActionGUIData
				{
					IsBuilding = 1;
					BelongsToOwnFamily = 1;
					DoesHaveTag = "IsStage";
					DoesNotHaveTag = "Occupied";
				},
			};            
						
			DisplayName = "$action.DecommissionBuilding";
			Description = "$action.DecommissionBuildingDesc";
			Instruction = "";
			EnterBuilding = "TryEnter";

			ConfirmExecution = true;
			CanFail = false;
			ShowCombatText = false;
			
			BudgetPost = "Buildings";
		};

		"ShowBuildingStatistics" = G3ActionTemplate //Statistics for this business
		{
			GUIPresent = true;
			OrderIndex = 40;

			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsBusiness = 1;
					DoesNotHaveTag = "NoRealBuilding";
				},
			};

			ActionName = "ShowBuildingStatistics";
			DisplayName = "$action.ShowBuildingStatistics";
			Description = "$action.ShowBuildingStatisticsDesc";
			Instruction = "";
			EnterBuilding = "TryEnter";
		};
	   
	   "FireEmployee" = G3ActionTemplate //Dismiss employee
		{
			ActionName = "FireEmployee";

			GUIPresent = true;
			OrderIndex = 20;
			
			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsEmployee = 1;
					IsCharacterOutsideMap = -1;
				},
			};

			ActionClassName = "FireEmployee";
			DisplayName = "$action.FireEmployee";
			Description = "$action.FireEmployeeDesc";
			Instruction = "$callToAction.PickEmployee";
			
			// Executing the action on the "Family" so that we can still
			// fire characters with uncancelable action e.g. long distance journy
			ActionActor = "Family";
			
			EnterBuilding = "TryEnter";
			CanFail = false;
			ShowCombatText = false;
			
			ConfirmSelection = true;
			ConfirmSelectionMessage = "FireEmployeeConfirmationMessage";
		};
		
		"FireEmployeeFromBuilding" = G3ActionTemplate //Dismiss employee
		{
			GUIPresent = true;
			OrderIndex = 30;

			ActionName = "FireEmployeeFromBuilding";
			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsBuilding = 1;
					CityBuilding = 0;
					DoesNotHaveTag = "NoRealBuilding";
				},
			};

			ActionClassName = "FireEmployee";
			DisplayName = "$action.FireEmployee";
			Description = "$action.FireEmployeeDesc";
			Instruction = "$callToAction.PickEmployee";
						
			SelectionPromptCallToAction = "$callToAction.PickEmployeeEmployedHere";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoAvailableEmployees";
			
			TargetActor = "Character";
			
			CanFail = false;
			ShowCombatText = false;
			EnterBuilding = "TryEnter";
			
			ConfirmExecution = true;
			ConfirmExecutionMessage = "FireEmployeeConfirmationMessage";

			ShowSelectionPrompt = "UseTargetProfile";

			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					Adult = 3;
					EmployedInSourceBuilding = 3;
					
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
				};
			};
		};

		"GoAndReapHerbs" = G3ActionTemplate //Collect ingredients
		{
			GUIPresent = false;
			ActionClassName = "GoAndReapHerbs";
			DisplayName = "$action.ReapHerbs";
			Description = "$action.ReapHerbsDesc";
			Instruction = "";
			ActionName = "GoAndReapHerbs";
			MainTemplateName = "GoAndReapHerbs";
			ActionActor = "Character";			
			CanFail = false;
			ShowCombatText = false;
			EnterBuilding = "TryEnter";
			
			InterruptForSleep = false;

		};
	
		"AISellItem" = G3ActionTemplate
		{
			ActionName = "AISellItem";
			ActionClassName = "AISellItemAction";
			DisplayName = "$action.AISellItemAction";
			Description = "$action.AISellItemActionDesc";
			Instruction = "";
			
			GUIPresent = false; //AI only
			HideFromUnlocks = true;

			ActionActor = "Character";
			TargetActor = "Building";
			CanFail = false;
			EnterBuilding = "TryEnter";
			
			DesiredProfiles = array
			{
			   TargetProfileBuilding
			   {
				 ActiveResidence = 2;
				 Burning = -3;
				 Business = 1;
				 CloseToActor = 1;
				 FamilyProfile = TargetProfileFamily
				 {
					MyFamily = 3;
				 };
			   };
			};
		};

		"MakeProduct" = G3ActionTemplate //Make product
		{
			ActionClassName = "MakeProductAction";
			ActionName = "MakeProduct";
			GUIPresent = false;
			ShowCombatText = false;
			DisplayName = "$action.MakeProduct";
			Description = "";
			Instruction = "";

			ActionActor = "Character";			
			CanFail = false;
			AskConfirmationOnCancel = false;
			EnterBuilding = "TryEnter";
			
			InterruptForSleep = false;

		};

		"LookInsideJail" = G3ActionTemplate //Look inside the jail
		{           
			GUIPresent = true;
			OrderIndex = 12;
			GUIData = array
			{
				ActionGUIData
				{             
					CharacterPrisoner = 1; // in jail
					BelongsToOwnFamily = 1;
					IsCharacter = 1;
					DoesHaveTag = "Jail"; // This condition prevents the LookInsideJail from showing up before the character actually is in jail. It gets assigned by the CharacterJailed result object.
				},
			};

			ShowCombatText = false;
			
			ActionName = "LookInsideJail";
			DisplayName = "$action.LookInsideJail";
			Description = "$action.LookInsideJailDesc";
			Instruction = "";
			
			ActionActor = "Building";
			
			CanFail = false;

			IsAIObjective = false;            
		};
		
		"LookAt" = G3ActionTemplate
		{
			GUIPresent = true;
			OrderIndex = 12;
			GUIData = array
			{
				// This is so we can look at someone in an interior scene.
				ActionGUIData
				{
					CanFocusActor = 1;
					BelongsToOwnFamily = 1;
					IsFamilyMember = 1;
					IsCharacter = 1;
					CharacterInBuilding = 1;
					IsInIndoorScene = 0;
					IsInInterior = 0;
					IsOnBuildingInside = 1;
				},
				ActionGUIData
				{
					CanFocusActor = 1;
					IsCharacter = 1;
				},
			};
			
			ShowCombatText = false;
			
			ActionName = "LookAt";
			DisplayName = "$action.LookAt";
			Description = "$action.LookAtDesc";
			
			CanFail = false;
					   
			IsAIObjective = false;			
		};
		
		"LookInsideBuilding" = G3ActionTemplate //Look inside
		{
			GUIPresent = true;
			OrderIndex = 12;
			GUIData = array
			{
				ActionGUIData
				{
					IsBuilding = 1;
					IsActiveInterior = 0;
					CanPlayerLookInside = 1;
				},
			};

			ShowCombatText = false;
			
			ActionName = "LookInsideBuilding";
			DisplayName = "$action.LookInside";
			Description = "$action.LookInsideDesc";
			
			CanFail = false;
					   
			IsAIObjective = false;            
		};
		
		"LookOutside" = G3ActionTemplate //Look outside
		{
			GUIPresent = true;
			OrderIndex = 12;
			GUIData = array
			{
				ActionGUIData
				{
					IsBuilding = 1;
					IsActiveInterior = 1;
				},
			};

			ShowCombatText = false;
			
			ActionName = "LookOutside";
			DisplayName = "$action.LookOutside";
			Description = "$action.LookOutsideDesc";
			
			CanFail = false;
					   
			IsAIObjective = false;            
		};
		
		"MakeOfferOnBuilding" = G3ActionTemplate //Buy building
		{
			GUIPresent = true;
			OrderIndex = 70;

			GUIData = array
			{
				ActionGUIData
				{
					IsBuilding = 1;
					BelongsToOwnFamily = 0;
					FamilyMainHouse = 0;
					RessourceProducerOrCityBuilding = 0;
					DoesNotHaveTag = "IsStatue";
				},
			};

			ShowCombatText = false;
			
			ActionName = "MakeOfferOnBuilding";
			DisplayName = "$action.MakeOfferOnBuilding";
			Description = "$action.MakeOfferOnBuildingDesc";
			ActionClassName = "MakeOfferOnBuildingAction";
			ActionActor = "Family";
			TargetActor = "Building";

			NeedSkillToPerform = true;
			
			BudgetPost = "Buildings";
			
			CanFail = false;
			EnterBuilding = "TryEnter";
			
			MoralAlignmentShift = 0.01;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.05, -0.05, 0.05};
			};

			CriticalFactor = 1.0;
			
			SuccessResult = array 
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 10;
					ObjectiveTypename = "IncreaseSecurity";
				}
			};
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{	
					ExcludedTypes = array{"Statue"};
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						IsDynasty = -3;
					};
					CityBuilding = -3;
					ResourceProducer = -3;
				}
			};
		};
					
		"Drunk" = G3ActionTemplate //Dead drunk
		{
			GUIPresent = false;
			CanFail = false;

			ActionName = "Drunk";
			ActionActor = "Character";
			ActionClassName = "SimpleExecutionAction";
			
			DisplayName = "$action.Drunk";
			Description = "$action.DrunkDesc";
			ShowCombatText = false;
			
			CanBeCancelled = false;
			CanFail = false;
			EnterBuilding = "TryEnter";
			
			Duration = 0.034; //~25 seconds
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"drunk1", 0, -1, -1};
			};
		};
		
		"Drinking" = G3ActionTemplate //Drinking
		{
			GUIPresent = false;
			CanFail = false;

			ActionName = "Drinking";
			ActionActor = "Character";
			ActionClassName = "SimpleExecutionAction";
			
			DisplayName = "$Drink";
			Description = "$DrinkDesc";
			ShowCombatText = false;
			
			CanBeCancelled = false;
			CanFail = false;
			EnterBuilding = "TryEnter";
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"drink_poison1", 0, -1, -1};
			};
			
			AnimationProps = array
			{
				PropSpawnDesc { PropNames = array { "vinecup/vinecup" }; };
			};
		};
		
		"DrinkingBeer" = G3ActionTemplate //Drinking
		{
			GUIPresent = false;
			CanFail = false;

			ActionName = "DrinkingBeer";
			ActionActor = "Character";
			ActionClassName = "SimpleExecutionAction";
			
			DisplayName = "$Drink";
			Description = "$DrinkDesc";
			ShowCombatText = false;
			
			CanBeCancelled = false;
			CanFail = false;
			EnterBuilding = "TryEnter";
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"drink_poison1", 0, -1, -1};
			};
			
			AnimationProps = array
			{
				PropSpawnDesc { PropNames = array { "beaker/beaker" }; };
			};
		};
		
		"Eat" = G3ActionTemplate //Eating
		{
			GUIPresent = false;
			CanFail = false;

			ActionName = "Eat";
			ActionActor = "Character";
			ActionClassName = "SimpleExecutionAction";
			
			DisplayName = "$Eat";
			Description = "$EatDesc";
			ShowCombatText = false;
			
			CanBeCancelled = false;
			CanFail = false;
			EnterBuilding = "TryEnter";
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"eat", 0, -1, -1};
			};
			
			AnimationProps = array
			{
				PropSpawnDesc { PropNames = array { "bread/bread" }; };
			};
		};
		
		"InfectWithRandomDisease" = G3ActionTemplate
		{
			ActionName = "InfectWithRandomDisease";
			ActionClassName = "SimpleExecutionAction";
			GUIPresent = false;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
				},
				@base/AllNeutralNPCs
			};
			
			CanFail = true;
			ShowCombatText = false;
			OnlyExecute = false;
			EnterBuilding = "TryEnter";
			
			Cooldown = 1.0;
			Duration = 0.0001;
			
			ActionActor = "Character";
			
			SourceScoreFormula = "1";
			TargetScoreFormula = "Source.Resistance * 0.8"; // 0.5
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionPickRandom
				{
					Filter = "PlayedYears > 0.25 && PlayedYears <= 2";
					ApplyTo = "Self";
					ResultObjectIds = array{"InfectionCold", "GetHurtInAccident"};
				},
				FunctionPickRandom
				{
					Filter = "PlayedYears > 2 && PlayedYears <= 6";
					ApplyTo = "Self";
					ResultObjectIds = array{"InfectionCold", "InfectionCold", "InfectionAnthonysFire", "GetHurtInAccident", "InfectionLeprosy"};
				},
				FunctionPickRandom
				{
					Filter = "PlayedYears > 6";
					ApplyTo = "Self";
					ResultObjectIds = array{"InfectionCold", "InfectionCold", "InfectionAnthonysFire", "GetHurtInAccident", "SpreadMeasles", "SpreadScarletFever", "InfectionLeprosy", "InfectionPlague"};//Measles and Scarlet Fever only get the spread effect. Grownups can spread, but only children will get infected
				}
			};
		};
		
		"MoreInfos" = G3ActionTemplate //Open building menu
		{
			OrderIndex = 2;
			GUIPresent = true;
			GUIData = array
			{
				ActionGUIData
				{
					IsBuildingOrInsideBuilding = 1;
					IsDecoration = 0;
				},
			};

			ActionName = "MoreInfos";
			DisplayName = "$action.MoreInfos";
			Description = "$action.MoreInfosDesc";

			ShowCombatText = false;
			
		};

		"MoreInfosInScene" = G3ActionTemplate //Open building menu
		{
			GUIPresent = true;
			OrderIndex = 5;
			
			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsInScene = -1; // We don't care about scenes in general
					IsInIndoorScene = 1; // But we require an indoor scene specifically
				},
			};

			ShowCombatText = false;
			
			ActionName = "MoreInfosInScene";
			DisplayName = "$action.MoreInfos";
			Description = "$action.MoreInfosDesc";

		};

		"OpenLeasingPanel" = G3ActionTemplate //Open leasing menu
		{
			OrderIndex = 2;
			GUIPresent = true;
			HideFromUnlocks = true;
			GUIData = array
			{
				ActionGUIData
				{
					IsBuildingOrInsideBuilding = 1;
					IsLeasingManaged = 1;
				},
			};

			ActionName = "OpenLeasingPanel";
			DisplayName = "$action.OpenLeasingPanel";
			Description = "$action.OpenLeasingPanelDesc";

			ShowCombatText = false;

			ActionActor = "Family";
		};
		
		"TradeUI" = G3ActionTemplate //Dynastic trade
		{
			GUIPresent = true;
			OrderIndex = 60;

			DisplayName = "$action.DynastiesTrade";
			Description = "$action.DynastiesTradeDesc";
			Instruction = "";
			ShowCombatText = false;

			ActionName = "TradeUI";

			ActionActor = "Family";
			TargetActor = "Family";

			GUIData = array
			{
				ActionGUIData
				{
					SelectionOtherFamily = 1;
					IsInScene = -1;
					IsInIndoorScene = -1;
				},
			};
		};
	
		"Commerce" = G3ActionTemplate //Open Building menu
		{
			GUIPresent = true;
			OrderIndex = 6;
			
			GUIData = array
			{
				ActionGUIData
				{
					CharacterNearSeller = 1;
				},
			};

			ShowCombatText = false;
			
			ActionName = "Commerce";
			DisplayName = "$action.Commerce";
			Description = "$action.CommerceDesc";

			ActionActor = "Character";
		};

		"Enter" = G3ActionTemplate //Enter building
		{
			OrderIndex = 2;
			GUIPresent = true;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterInBuilding = 0;
					CharacterNearControlledBuilding = 1;
				},
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterInBuilding = 1;
					IsOnBuildingExterior = 1;
					CharacterNearControlledBuilding = 1;
				},
			};

			ShowCombatText = false;
			
			ActionName = "Enter";
			DisplayName = "$action.Enter";
			Description = "$action.EnterDesc";
			CanFail = false;
			
			ActionActor = "Character";

		};

		"Exit" = G3ActionTemplate //Exit building
		{
			OrderIndex = 1;
			GUIPresent = true;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					CharacterInBuilding = 1;
					BelongsToOwnFamily = 1;
				},
			};
			
			ActionClassName = "ExitBuildingAction";

			ShowCombatText = false;
			
			CharacterState = array{"InDoor"};

			ActionName = "Exit";
			DisplayName = "$action.Exit";
			Description = "$action.ExitDesc";

			ActionActor = "Character";
			CanFail = false;
			
			EnterBuilding = "TryEnter";

			TargetSnapPoint = TargetSnapPoint
			{
				Required = false;
				ShouldReserve = false;
				ShouldOccupy = false;

				Animations = array
				{
					TargetSnapPointAnimation{ Animation = "opendoor"; },
				};				
				Profiles = array
				{
					TargetProfileSnapPoint{ Name = "exit"; Inside = 3; },
				};
			};
		};
		
		"BirthBastard" = G3ActionTemplate
		{
			ActionName = "BirthBastard";
			ActionClassName = "SimpleExecutionAction";
			DisplayName = "$action.BirthBastard";
			Description = "$action.BirthBastardDesc";

			GUIPresent = false;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					IsAdult = 1;
				},
			};
			
			CanFail = true;
			ShowCombatText = false;
			OnlyExecute = true;
			EnterBuilding = "TryEnter";
			
			Cooldown = 0.0;
			
			ActionActor = "Character";
			
			SourceScoreFormula = "Charisma";
			TargetScoreFormula = "Intelligence*3";
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionGiveBirth
				{
					ApplyTo = "Self";
					IsBastard = true;
				},
				FunctionTrackObjectiveProgress 
				{ 
					Amount = 1; 
					ObjectiveTypename = "GetChildOrPregnant"; 
				},
				FunctionSendMessage
				{
					ApplyTo = "Self";
					Description = "LongDistanceTravelBastard";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 4;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 2;
					Amount = 0.01;
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
			FailureResult = array
			{
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
		};

		"GoFishing" = G3ActionTemplate //Go fishing
		{
			GUIPresent = true;
			UICategory = "Family";
			OrderIndex = 25;

			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/OwnFamilyAdults
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };

			ActionActor = "Character";
			TargetActor = "Building";

			SourceScoreFormula = "1.5 + Source.Luck";
			TargetScoreFormula = "1.0 + (0.2 * Source.BadLuck)";

			ActionName = "GoFishing";
			DisplayName = "$GoFishing";
			Description = "$GoFishingDesc";
			Instruction = "$callToAction.PickAFishingSpot";

			Duration = 0.0083;
			BaseRewardXP = 25;
			CanFail = true;
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$callToAction.PickAFishingSpot";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoFishingSpot";
			HideSelectionPromptCancelButton = true;
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"FishingSpot"};
				}
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "GoFishing"; },
				};
			};
	
			EnterBuilding = "TryEnter";
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 1;
					SpecificItems = array{"Trout", "Perch", "Pike", "Purse", "OakwoodRing", "CopperBracelet", "Fittings"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
				FunctionTriggerAction
				{
					Filter = "IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"Exit"};
				},
			};
			FailureResult = array
			{
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 1;
					SpecificItems = array{"OldBoot", "OldBoot", "OldBoot", "OldBoot", "Bone", "BoneNeedle"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
				FunctionTriggerAction
				{
					Filter = "IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
		};

		"GoHunting" = G3ActionTemplate //Go hunting
		{
			GUIPresent = true;
			UICategory = "Family";
			OrderIndex = 30;

			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/OwnFamilyAdults
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };

			ActionActor = "Character";
			TargetActor = "Building";

			SourceScoreFormula = "1.5 + Source.Luck";
			TargetScoreFormula = "0.5 + (0.2 * Source.BadLuck)";

			ActionName = "GoHunting";
			DisplayName = "$GoHunting";
			Description = "$GoHuntingDesc";
			Instruction = "$callToAction.PickAGrove";

			Duration = 0.042;
			BaseRewardXP = 25;
			CanFail = true;

			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$callToAction.PickAGrove";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoGrove";
			HideSelectionPromptCancelButton = true;
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Grove"};
				}
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "GoHunting"; },
				};
			};
	
			EnterBuilding = "TryEnter";
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 2;
					MaxAmount = 4;
					SpecificItems = array{"GameMeat", "GameMeat", "Leather", "Leather", "Deer"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
				FunctionTriggerAction
				{
					Filter = "IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"Exit"};
				},
			};
			FailureResult = array
			{
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 1;
					SpecificItems = array{"HaresPaw"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCEquipHaresPaw"};
				},
				FunctionTriggerAction
				{
					Filter = "IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
		};

		// This action is for human players only, shows up in the action bar, and sends the character simply talking to a priest.
		"BuyOrphan" = G3ActionTemplate
		{
			ActionName = "BuyOrphan";
			ActionClassName = "SimpleExecutionAction";
			
			BudgetPost = "Religion";
			BudgetPot = "Expansion";
			
			GUIPresent = true;
			UICategory = "Religion";
			OrderIndex = 8;
			
			GUIData = array
			{
				ActionGUIData
				{
					IsAdult = 1;
					IsFamilyMember = 1;
					BelongsToOwnFamily = 1;
					IsTrueBloodline = 1;
					CanAdoptMoreChildren = 1;
					IsControlledByHuman = 1; // Only for humans. The AI starts DoBuyOrphan directly.
				},
			};
			UsableBy = array{ "$gui.item.AdultTrueBloodline" };
			
			DisplayName = "$action.BuyOrphan";
			Description = "$action.BuyOrphanDesc";
			Instruction = "$callToAction.BuildingChurch";

			ActionActor = "Character";
			TargetActor = "Building";
			EnterBuilding = "TryEnter";

			SourceScoreFormula = "1";
			TargetScoreFormula = "0";
			
			MoralAlignmentShift = 0.1;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.25,0.9,0};
			};

			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					IsCurrentBuilding = -3;
					
					CloseToActor = 2;
					CityBuilding = 3;
					IncludedTypes = array{"Church", "cathedrale"};
				},
				TargetProfileBuilding
				{
					AutoSelect = true;
					
					IsCurrentBuilding = 3;
					
					CloseToActor = 2;
					CityBuilding = 3;
					IncludedTypes = array{"Church", "cathedrale"};
				},
			};
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$callToAction.BuildingChurch";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoBuildingChurch";

			Duration = 0.0f;
			CanFail = false;

			CriticalFactor = 1.0;

			SuccessResult = array {
				FunctionTriggerAction
				{
					ApplyTo = "Self";
					ActionTarget = "FromTargetProfile";
					Actions = array{ "TalkToPriest" };
				},
			};
		},

		// This action is for human and AI players. Human players start it through the priest dialogue, AI players start it directly. It starts the AdoptionScene.
		"DoBuyOrphan" = G3ActionTemplate
		{			
			ActionName = "DoBuyOrphan";
			ActionClassName = "SimpleExecutionAction";
			BudgetPost = "Religion";
			BudgetPot = "Expansion";
			
			GUIPresent = false;
			IconName = "BuyOrphan";
			
			GUIData = array
			{
				ActionGUIData
				{
					IsAdult = 1;
					IsFamilyMember = 1;
					BelongsToOwnFamily = 1;
					IsTrueBloodline = 1;
					CanAdoptMoreChildren = 1;
				},
			};
			
			DisplayName = "$action.BuyOrphan";
			Description = "$action.BuyOrphanDesc";

			ActionActor = "Character";
			TargetActor = "Building";
			EnterBuilding = "TryEnter";

			PriceFormula = "SocialLevel * SocialLevel * ((50 * hasTag.BuffEasy) + (100 * hasTag.BuffNormal) + (150 * hasTag.BuffHard) + (200 * hasTag.BuffImpossible))";
			SourceScoreFormula = "1";

			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					IsCurrentBuilding = -3;
					
					CloseToActor = 2;
					CityBuilding = 3;
					IncludedTypes = array{"Church", "cathedrale"};
				},
				TargetProfileBuilding
				{
					AutoSelect = true;
					IsCurrentBuilding = 3;
					
					CloseToActor = 2;
					CityBuilding = 3;
					IncludedTypes = array{"Church", "cathedrale"};
				}
			};
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$callToAction.BuildingChurch";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoBuildingChurch";

			Duration = 0.0f;
			CanFail = false;
			Cooldown = 0.001;

			MoralAlignmentShift = 0.25;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.25,0.9,0};
			};

			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionStartScene
				{
					ApplyTo = "Source";
					Scene = "AdoptionScene";
					Participants = map {
						"Adopter" = ("Self", true);
					};
					StartFailureCombatText = "$feedback.TargetIsBusy";
				},
				FunctionTrackObjectiveProgress
				{
					Amount = 35;
					ObjectiveTypename = "IncreaseSecurity";
				},
				FunctionTrackObjectiveProgress 
				{ 
					Amount = 1; 
					ObjectiveTypename = "GetChildOrPregnant"; 
				},
			};
		},

		"AISelectNewHeir" = G3ActionTemplate
        {
            ActionName = "AISelectNewHeir";
            ActionClassName = "G3Action";
			
			GUIPresent = false;
			HideFromUnlocks = true;
			
			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsControlledByHuman = 0; //AI only (human players trigger it from a custom UI instead of from the ActionBar)
				},
			};
			
			DisplayName = "$action.SelectNewHeir";
			Description = "$action.SelectNewHeirDesc";

			ActionActor = "Family";
			TargetActor = "Character";

			CanFail = false;
			ShowCombatText = false;
			EnterBuilding = "TryEnter";
			
			SuccessResult = array
			{
				FunctionAssignHeir
				{
					ApplyTo = "Target";
				}
			};
		};	

		"PostCombatNoAction" = G3ActionTemplate
		{
			ActionClassName = "PostCombatAction";
			
			GUIPresent = false;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				}
			};
			ActionName = "PostCombatNoAction";
			ActionActor = "Character";
			TargetActor = "Character";

			ShowCombatText = false;
			
		};

		// Forceful version of Exit Building.
		// Not ordinarily available in game, useful for pressing characters out of building.
		"ForcedExit" = G3ActionTemplate
		{
			GUIPresent = false;
			GUIData = array
			{
				ActionGUIData
				{
					IsUnlockedAction = -1;
					IsCharacter = 1;
					CharacterInBuilding = 1;
				},
			};
			
			ActionClassName = "ExitBuildingAction";

			ShowCombatText = false;
			
			CharacterState = array{ "InDoor" };

			ActionName = "ForcedExit";
			DisplayName = "$action.Exit";
			Description = "$action.ExitDesc";
			IconName = "Exit";

			ActionActor = "Character";
			CanFail = false;
			CanBeCancelled = false;
			
			EnterBuilding = "ForceEnter";

			TargetSnapPoint = TargetSnapPoint
			{
				Required = false;
				ShouldReserve = false;
				ShouldOccupy = false;

				Animations = array
				{
					TargetSnapPointAnimation{ Animation = "opendoor"; },
				};				
				Profiles = array
				{
					TargetProfileSnapPoint{ Name = "exit"; Inside = 3; },
				};
			};
		};

		"ExitScene" = G3ActionTemplate //Leave scene
		{
			GUIPresent = true;
			OrderIndex = 3;
			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsInScene = -1; // We don't care about scenes in general
					IsInIndoorScene = 1; // But we require an indoor scene specifically
				},
			};

			ShowCombatText = false;
			
			ActionName = "ExitScene";
			DisplayName = "$action.ExitScene";
			Description = "$action.ExitSceneDesc";

			CanFail = false;
		};
		
		"EnterMedicus" = G3ActionTemplate //Seek the medicus
		{
			GUIPresent = true;
			OrderIndex = 1;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterInBuilding = 0;
					CharacterNearMedicus = 1;
				},
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					CharacterInBuilding = 1;
					IsOnBuildingExterior = 1;
					CharacterNearMedicus = 1;
				},
			};

			ShowCombatText = false;
			
			ActionName = "EnterMedicus";
			ActionActor = "Character";
			DisplayName = "$action.EnterMedicus";
			Description = "$action.EnterMedicusDesc";
			
			CanFail = false;
			EnterBuilding = "TryEnter";

		};

		"BuildAddOn" = G3ActionTemplate //Build extension
		{
			ActionClassName = "BuildAddOnAction";
			GUIPresent = true;
			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsControlledByHuman = 0; //AI only (human players trigger it from a custom UI instead of from the ActionBar)
				},
			};
			
			DesiredProfiles = array
			{
			   TargetProfileBuilding
			   {
				 Burning = -3;
				 Business = 3;
				 FamilyProfile = TargetProfileFamily
				 {
					MyFamily = 3;
				 };
			   };
			};

			ActionName = "BuildAddOn";
			DisplayName = "$action.BuildAddOn";
			Description = "$action.BuildAddOnDesc";
			Instruction = "";
			
			ShowCombatText = false;
			
			ActionActor = "Family";
			TargetActor = "Building";
			CanFail = false;
			EnterBuilding = "TryEnter";
			
			BudgetPost = "UpgradesAddons";
			BudgetPot = "Expansion";
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 30;
					ObjectiveTypename = "IncreaseSecurity";
				}
			};
		};

		"UpgradeBuilding" = G3ActionTemplate //Level up building
		{
			ActionName = "UpgradeBuilding";

			// this action is meant for the player to use from the building's action bar
			GUIPresent = true;
			OrderIndex = 52;
			
			ActionClassName = "BuildingLevelUpAction";
			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsBuilding = 1;
					CanBeUpgraded = 1;
				},
			};
			
			DisplayName = "$action.BuildingLevelUpAction";
			Description = "$action.BuildingLevelUpActionDesc";
			Instruction = "";
			
			ShowCombatText = false;
			BaseRewardPrestige = 50;
			
			BudgetPost = "UpgradesAddons";
			BudgetPot = "Expansion";
			
			CanFail = false;
			EnterBuilding = "TryEnter";
		};

		"BuildingLevelUp" = G3ActionTemplate //Level up building
		{
			ActionName = "BuildingLevelUp";

			ActionClassName = "BuildingLevelUpAction";
			GUIPresent = false; 
			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsControlledByHuman = 0; //AI only (human players trigger it from a custom UI instead of from the ActionBar)
				},
			};
			
			DesiredProfiles = array
			{
			   TargetProfileBuilding
			   {
				 Burning = -3;
				 Business = 3;
				 FamilyProfile = TargetProfileFamily
				 {
					MyFamily = 3;
				 };
			   };
			};

			DisplayName = "$action.BuildingLevelUpAction";
			Description = "$action.BuildingLevelUpActionDesc";
			Instruction = "";
			
			BudgetPost = "UpgradesAddons";
			BudgetPot = "Expansion";
			
			ShowCombatText = false;
			
			BaseRewardPrestige = 50;
			
			ActionActor = "Family";
			TargetActor = "Building";
			
			BudgetPost = "UpgradesAddons";
			BudgetPot = "Expansion";
			
			CanFail = false;
			EnterBuilding = "TryEnter";
			
		};
		

		// Idle is not meant to be used to create an action instance. We only need to have an actionTemplate
		// that we can hand around in the code in order to indicate that our character is idle.
		"Idle" = G3ActionTemplate
		{
			GUIPresent = false;
			ActionName = "Idle";
			IconName = "Idle";
			DisplayName = "$action.Idle";
			EnterBuilding = "TryEnter";
		},
		
	
//Office Actions
//----------------------------------------------------
		"RunForOffice" = G3ActionTemplate //Run for office
		{
			GUIPresent = true; 
			BudgetPost = "Offices";

			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsLeader = 1; // "RunForOffice" is only for the leader
					IsControlledByHuman = 0; //AI only (human players trigger it from a custom UI instead of from the ActionBar)
					CharacterHasAppliedForPoliticalOffice = 0; // Prevent AI from applying for offices if the character already has applied somewhere
				},
			};

			ShowCombatText = false;
			
			ActionName = "RunForOffice";
			ActionClassName = "RunForOffice";
			DisplayName = "$RunForOffice";
			Description = "$RunForOfficeDesc";

			CanPerformShackled = true;
			EnterBuilding = "TryEnter";
			
			ActionActor = "Character";
			
			CanFail = false; //no dice roll, dependant of relation between candidate and voter

			MoralAlignmentShift = 0.2;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.5,0.5,0.7};
			};
		};
		
		"PlantSibling" = G3ActionTemplate //Run for office
		{
			GUIPresent = true; 
			BudgetPost = "Offices";

			GUIData = array
			{
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsLeader = 0; // "PlantSibling" is only for the non-leader family members. This action gets unlocked later, so AI families can initially apply only with their leader and later also apply with other family members
					IsFamilyMember = 1;
					IsControlledByHuman = 0; //AI only (human players trigger it from a custom UI instead of from the ActionBar)
					CharacterHasAppliedForPoliticalOffice = 0; // Prevent AI from applying for offices if the character already has applied somewhere
				},
			};
			ShowCombatText = false;
			
			ActionName = "PlantSibling";
			ActionClassName = "RunForOffice";
			DisplayName = "$PlantSibling";
			Description = "$PlantSiblingDesc";
			ActionActor = "Character";

			CanPerformShackled = true;
			EnterBuilding = "TryEnter";
			
			CanFail = false;

			MoralAlignmentShift = 0.03;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.5,-0.5,0.5};
			};
		};
		
		// This is a fake action, used for showing an icon and tooltip in the receptionist dialogue.
		"ApplyForOffice" = G3ActionTemplate
		{
			GUIPresent = false;
			GUIData = array {
				ActionGUIData {
					IsCharacter = 1;
					IsAdult = 1; // Show that only adults can do this in the tooltip.
				},
			};

			ActionName = "ApplyForOffice";
			ActionClassName = "RunForOffice";
			
			DisplayName = "$action.ApplyForOffice";
			Description = "$action.ApplyForOfficeDesc";

			ActionActor = "Character";
		};
		
		"LeaveOffice" = G3ActionTemplate //Leave office
		{
			GUIPresent = true;
			UICategory = "Diplomacy";
			OrderIndex = 155;
			
			GUIData = array
			{
				@base/OfficeHolder
			};
			UsableBy = array{ "$ui.GameplayConceptTutorial.Reputation11" };

			ShowCombatText = false;
			ConfirmExecution = true;
			
			ActionName = "LeaveOffice";
			DisplayName = "$LeaveOffice";
			Description = "$LeaveOfficeDesc";

			ActionActor = "Character";

			SourceScoreFormula = "Charisma";
			
			CanFail = false;
			EnterBuilding = "TryEnter";

			MoralAlignmentShift = 0;
			MoralAlignment = MoralAlignment
			{
				Values = array{0, 0, 0};
			};
		};

//Diplomatic actions
//----------------------------------------------------
	
		"WriteTrashLetter" = G3ActionTemplate //Write a pamphlet
		{
			GUIPresent = true;
			UICategory = "Diplomacy";
			OrderIndex = 60;

			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					IsAdult = 1;
					BelongsToOwnFamily = 1;
					IsPartyMember = 1;
				}
			};
			UsableBy = array{ "$gui.item.UsableByAdultPartyMembers" };
		
			ActionName = "WriteTrashLetter";
			ActionClassName = "SimpleExecutionAction";
			ActionActor = "Character";
			TargetActor = "Building";
		
			DisplayName = "$action.WriteTrashLetter";
			Description = "$action.WriteTrashLetterDesc";
			Instruction = "$callToAction.ResidenceBusinessNotPlayersAllies";
		
			BaseRewardXP = 85;
			Cooldown = 0.2;
			
			SourceScoreFormula = "Intelligence*2";
			IsImmediatelyKnownByTarget = false;
			
			CanFail = false;
			
			DesiredProfiles = array
			{                
				TargetProfileBuilding
				{
					CityBuilding = -3;
					ResourceProducer = -3;
					
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						IsDynasty = 2;
						GoodRelationWithMe = -2;
						Feud = 2;
						Alliance = -3;
						PoliticalImportance = -1;
						Rich = 1;
					};	
				};				
			};
		
			MoralAlignmentShift = 0.06;
			MoralAlignment = MoralAlignment
			{
				Values = array{0,-0.6,-0.3};
			};
		
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"giving_money1", 0, -1, -1}; //try to find a nicer animation for that
			};
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{"TrashLetter"};
					Duration = 360;
					DisplayGroup = "alarm";
					DisplayName = "$effect.TrashLetter";
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-10";
					AffectTargetAllies = "-4";
					AffectTargetEnemies = "4";
				},
				FunctionSendMessage
				{
					ApplyTo = "Target";
					Description = "TrashLetter";
				},
				SpreadEffect
				{
					ApplyTo = "Target";
					UniqueTag = "TrashLetter";
					Tags = array{"TrashLetter"};
					SpreadResult = "TrashLetterResult";
					Radius = 300.0;
					Duration = 360;
					SpreadChance = 1;
					SpreadFrequency = 5;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.Astonished"};
							TargetScoreFormula = "Intelligence*0.35";
						}
					};
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					Amount = -0.01;
				},
			};
		};
		
		"TearOffTrashLetter" = G3ActionTemplate //Tear down a pamphlet against you
		{
			UICategory = "Diplomacy";
			GUIPresent = true;
			OrderIndex = 61;
			GUIData = array
			{
				@base/OwnFamilyAdults,
				@base/Henchmen
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$gui.item.UsableByHenchmen" };
			
			ActionName = "TearOffTrashLetter";
			DisplayName = "$TearOffTrashLetter";
			Description = "$TearOffTrashLetterDesc";
			Instruction = "$callToAction.TearOffTrashLetter";

			ActionClassName = "SimpleExecutionAction";

			ActionActor = "Character";
			TargetActor = "Building";

			TargetTags = array{"TrashLetter"};
			DesiredProfiles = array
			{                
				TargetProfileBuilding
				{
					MatchTargetTags = 3;
					CloseToActor = 2;
					CityBuilding = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
				}
			};

			Cooldown = 0.0;

			CanFail = false;
			CriticalFactor = 1.0;
			
			BaseRewardXP = 5;

			Duration = 0.00416664; // 0.000011574 = 1 ingame sec | 0.00069444 = 1 ingame min | 0,0416664 = 1 ingame hour !(1 real sec = 0.016666667 ticks)!

			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"giving_money1", 0, -1, -1}; //try to find a nicer animation for that
			};

			SuccessResult = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					MatchAny = true;
					Tags = array {"TrashLetter"};
				};
			};
		};
		
		"WriteRecommandationLetter" = G3ActionTemplate //Write a letter of recommendation
		{
			GUIPresent = true;
			UICategory = "Diplomacy";
			OrderIndex = 55;

			GUIData = array
			{
				@base/OwnFamilyAdults
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };
		
			ActionName = "WriteRecommandationLetter";
			ActionClassName = "SimpleExecutionAction";
			ActionActor = "Character";
			TargetActor = "Building";
		
			DisplayName = "$action.WriteRecommandationLetter";
			Description = "$action.WriteRecommandationLetterDesc";
			Instruction = "$callToAction.ResidenceBusinessNotPlayersFeud";
		
			BaseRewardXP = 85;
			Cooldown = 0.2;
			
			SourceScoreFormula = "Intelligence*2";
			IsImmediatelyKnownByTarget = false;
			
			CanFail = false;
			
			DesiredProfiles = array
			{                
				TargetProfileBuilding
				{
					CityBuilding = -3;
					ResourceProducer = -3;
					
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						IsDynasty = 2;
						GoodRelationWithMe = 2;
						Feud = -3;
						Alliance = 2;
						PoliticalImportance = 1;
						Rich = -1;
					};	
				};				
			};
		
			MoralAlignmentShift = 0.1;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.3,0.4,0.5};
			};
		
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"giving_money1", 0, -1, -1}; //try to find a nicer animation for that
			};
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{"RecommandationLetter"};
					Duration = 360;
					DisplayGroup = "buffed";
					DisplayName = "$effect.RecommandationLetter";
				},
				
				FunctionUpdateRelationship
				{
					AffectTarget = "10";
					AffectTargetAllies = "4";
					AffectTargetEnemies = "-4";
				},
				SpreadEffect
				{
					ApplyTo = "Target";
					UniqueTag = "RecommandationLetter";
					Tags = array{"RecommandationLetter"};
					SpreadResult = "RecommandationLetter";
					Radius = 300.0;
					Duration = 360;
					SpreadChance = 1;
					SpreadFrequency = 5;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.Astonished"};
							TargetScoreFormula = "Intelligence*0.35";
						}
					}; 
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					Amount = 0.01;
				},
			};
		};


		// BEWARE: this action no longer ASKs for an alliance. It directly establishes it without asking!
		// (This action could be replaced with a 'FunctionCreateAlliance')
		"AskAlliance" = G3ActionTemplate //Establish an alliance
		{
			ActionClassName = "AskAllianceAction";
			GUIPresent = false;
			GUIData = array
			{
				ActionGUIData
				{
					SelectionOtherFamily = 1;
				},
			};

			ShowCombatText = false;
			
			ActionActor = "Family";
			TargetActor = "Family";
			
			CanFail = false; //Not dice roll dependant
			ActionName = "AskAlliance";
			DisplayName = "$AskAlliance";
			Description = "$AskAllianceDesc";
			Instruction = "";
			
			EnterBuilding = "TryEnter";

			MoralAlignmentShift = 0.08;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.3,0,0.8};
			};

			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 25;
					ObjectiveTypename = "IncreaseSecurity";
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "15";
					AffectTargetAllies = "12";
					AffectTargetEnemies = "-10";
					AffectSource = "15";
					AffectSourceAllies = "12";
					AffectSourceEnemies = "-10";					
				}
			};
		};
		
		"BreakAlliance" = G3ActionTemplate //Break an alliance
		{
			GUIPresent = true;
			OrderIndex = 62;

			ActionClassName = "BreakAllianceAction";
			GUIData = array
			{
				ActionGUIData
				{
					SelectionOtherFamily = 1;
					AllianceWithFamily = 1;
					IsInScene = -1;
					IsInIndoorScene = -1;
				},
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsControlledByHuman = 0;
				},
			};

			ShowCombatText = false;
			
			ActionActor = "Family";
			TargetActor = "Family";

			ActionName = "BreakAlliance";
			DisplayName = "$BreakAlliance";
			Description = "$BreakAllianceDesc";
			Instruction = "";
			
			EnterBuilding = "TryEnter";
			
			OnlyExecute = true;
			CanFail = false; 
			
			MoralAlignmentShift = 0.08;
			MoralAlignment = MoralAlignment
			{
				Values = array{0,-0.6,0.8};
			};
			
			DesiredProfiles = array
			{
				TargetProfileFamily
				{
					MyFamily = -3;
					Alliance = 3;
					GoodRelationWithMe = -2;
					MemberOfSecretSociety = -2;
					SocialHigher = -1;
					PoliticalImportance = -1;
					HigherRank = -1;
				}
			};

			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-50";
					AffectTargetAllies = "-12";
					AffectTargetEnemies = "6";
					AffectSource = "-25";
				}
			};
		};
		
		"AskFeud" = G3ActionTemplate //Declare a feud with someone
		{
			GUIPresent = true;
			OrderIndex = 65;
			
			ActionClassName = "AskFeudAction";
			
			ActionActor = "Family";
			TargetActor = "Family";

			ShowCombatText = false;
			
			GUIData = array
			{
				ActionGUIData
				{
					IsFamilyMember = 1;
					IsAdult = 1;
					SelectionOtherFamily = 1;
					FeudWithFamily = 0;
					AllianceWithFamily = 0;
					IsInScene = -1;
					IsInIndoorScene = -1;
				},
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					IsAdult = 1;
					IsControlledByHuman = 0;
				},
			};

			ActionName = "AskFeud";
			DisplayName = "$AskFeud";
			Description = "$AskFeudDesc";
			Instruction = "";
			IsAggression = false;

			CanFail = false;
			EnterBuilding = "TryEnter";
			
			DesiredProfiles = array
			{
				TargetProfileFamily
				{
					MyFamily = -3;
					GoodRelationWithMe = -2;
					Feud = -3;
					Alliance = -3;
					MemberOfSecretSociety = -3;
					SocialHigher = -1;
					PoliticalImportance = -1;
					HigherRank = -1;
				}
			};
			
			MoralAlignmentShift = 0.1;
			MoralAlignment = MoralAlignment
			{
				Values = array{0,0,0.2};
			};

			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-30";
					AffectTargetAllies = "-10";
					AffectTargetEnemies = "10";
					AffectSource = "-30";
				}
			};
		};
		
		// BEWARE: this action no longer asks the target if it wants to end the feud. It directly ends it!
		// (This action could be replaced with a 'FunctionEndFeud')
		"BreakFeud" = G3ActionTemplate //End a feud
		{
			GUIPresent = false;

			ActionClassName = "BreakFeudAction";
			GUIData = array
			{
				ActionGUIData
				{
					SelectionOtherFamily = 1;
					FeudWithFamily = 1;
				},
			};

			ShowCombatText = false;
			
			ActionActor = "Family";
			TargetActor = "Family";

			CanFail = false;
			ActionName = "BreakFeud";
			DisplayName = "$BreakFeud";
			Description = "$BreakFeudDesc";
			Instruction = "";
			EnterBuilding = "TryEnter";
			
			MoralAlignmentShift = 0.4;
			MoralAlignment = MoralAlignment
			{
				Values = array{0,0,0.8};
			};

			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 35;
					ObjectiveTypename = "IncreaseSecurity";
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "15";
					AffectTargetAllies = "12";
					AffectTargetEnemies = "-10";
					AffectSource = "15";
					AffectSourceAllies = "12";
					AffectSourceEnemies = "-10";					
				}
			};
		};		
		
		"Denounce" = G3ActionTemplate //Denounce someone in public
		{
			GUIPresent = true;
			UICategory = "Diplomacy";
			OrderIndex = 16;

			ActionName = "Denounce";
			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsAdult = 1;
					IsLeader = 1;
				},
			};
			UsableBy = array{ "$guiLeader" };
		
			DisplayName = "$action.Denounce";
			Description = "$action.DenounceDesc";
			Instruction = "$callToAction.OtherDynastyAdultMember4";
			
			ActionActor = "Character";
			TargetActor = "Character";
			
			SourceScoreFormula = "Charisma + Intelligence * 0.5";
			TargetScoreFormula = "Intimidation - Charisma * 0.5";
			
			PriceFormula = "8";
			BudgetPot = "Diplomacy";
			CurrencyType = "Prestige";
			
			Cooldown = 0.2; // 0.042
			CooldownFamilyWide = true;
			
			BaseRewardXP = 30;
			
			CanFail = true;
			EnterBuilding = "TryEnter";
			
			InteractionPriority = 0;
			
			MoralAlignmentShift = 0.04;
			MoralAlignment = MoralAlignment
			{
				Values = array{0,-0.25,-0.5};
			};
			
			OnlyExecute = true;
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$selectionPrompt.SelectCharacter";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoAdultCharacterOtherDynasty";
			
			TargetTags = array{"RumorSpread"};
			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					NPC = -3;
					NPCGuard = -3;
					Employee = -3;
					Leader = 2;
					Adult = 3;
					MatchTargetTags = -2;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -1;
						Alliance = -3;
						Feud = 2;
						SocialHigher = -1;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};
			
			Dialogue = array{ "ACTION_MONOLOGUE", "d.act.Denounce"};
		
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				DisplayEffect
				{
					Tags = array{"Rumor"};
					ApplyTo = "Target";
					Duration = 70;
					DisplayGroup = "alarm";
					DisplayName = "$effect.rumorNegative";
				},
				SpreadEffect
				{
					ApplyTo = "Target";
					UniqueTag = "RumorSpreadEffect";
					Tags = array{"RumorSpread"};
					SpreadResult = "DenounceSpread";
					Radius = 200.0;
					Duration = 70;
					SpreadChance = 0.5;
					SpreadFrequency = 3;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "NotInCombat", "IsConscious", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.DenounceSpread"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-10";
					AffectTargetAllies = "-3";
					AffectTargetEnemies = "3";
				},
				FunctionSendMessage
				{
					ApplyTo = "Target";
					Description = "PlayerDenouncedSuccess";
				}
			};
			
			FailureResult = array
			{ 
				DisplayEffect
				{
					Tags = array{"Rumor"};
					ApplyTo = "Source";
					Duration = 40;
					DisplayGroup = "alarm";
					DisplayName = "$effect.rumorNegative";
				},
				SpreadEffect
				{
					ApplyTo = "Source";
					UniqueTag = "RumorSpreadEffect";
					Tags = array{"RumorSpread"};
					SpreadResult = "DenounceSpread";
					Radius = 100.0;
					Duration = 40;
					SpreadChance = 0.5;
					SpreadFrequency = 3;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "NotInCombat", "IsConscious", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.DenounceSpread"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-5";
				}
			};
		};
		
		"Praise" = G3ActionTemplate //Praise someone in public
		{
			GUIPresent = true;
			UICategory = "Diplomacy";
			OrderIndex = 15;
			
			ActionClassName = "SimpleExecutionAction";
			ActionName = "Praise";

			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsAdult = 1;
					IsLeader = 1;
				},
			};
			UsableBy = array{ "$guiLeader" };
		
			PriceFormula = "8";
			BudgetPot = "Diplomacy";
			CurrencyType = "Prestige";
			Cooldown = 0.2; // 0.042
			CooldownFamilyWide = true;
			
			DisplayName = "$action.Praise";
			Description = "$action.PraiseDesc";
			Instruction = "$callToAction.OtherDynastyAdultMember2";
			
			SourceScoreFormula = "Charisma + Intelligence * 0.5";
			TargetScoreFormula = "Intimidation - Charisma * 0.5";
			
			ActionActor = "Character";
			TargetActor = "Character";
			
			CanFail = true;
			EnterBuilding = "TryEnter";
			
			InteractionPriority = 0;
			
			BaseRewardXP = 30;
			
			MoralAlignmentShift = 0.04;
			MoralAlignment = MoralAlignment
			{
				Values = array{0,0.25,0.5};
			};
			
			OnlyExecute = true;
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$selectionPrompt.SelectCharacter";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoAdultCharacterOtherDynasty";
			
			TargetTags = array{"RumorSpread"};
			
			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					NPC = -3;
					NPCGuard = -3;
					Employee = -3;
					Leader = 2;
					Adult = 3;
					MatchTargetTags = -2;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -1;
						Alliance = 1;
						Feud = -2;
						SocialHigher = 1;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};
					
			Dialogue = array{ "ACTION_MONOLOGUE", "d.act.Praise"};
		
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				DisplayEffect
				{
					Tags = array{"Rumor"};
					ApplyTo = "Target";
					Duration = 200;
					DisplayGroup = "buffed";
					DisplayName = "$effect.rumorPositive";
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "10";
					AffectTargetAllies = "3";
					AffectTargetEnemies = "-3";
				},
				FunctionSendMessage
				{
					ApplyTo = "Target";
					Description = "PlayerPraiseSuccess";
				},
				SpreadEffect
				{
					ApplyTo = "Target";
					UniqueTag = "RumorSpreadEffect";
					Tags = array{"RumorSpread"};
					SpreadResult = "PraiseSpread";
					Radius = 300.0;
					Duration = 200;
					SpreadChance = 0.5;
					SpreadFrequency = 3;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "NotInCombat", "IsConscious", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.PraiseSpread"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				}
			};
			
			FailureResult = array
			{ 
				DisplayEffect
				{
					Tags = array{"Rumor"};
					ApplyTo = "Source";
					Duration = 100;
					DisplayGroup = "alarm";
					DisplayName = "$effect.rumorNegative";
				},
				SpreadEffect
				{
					ApplyTo = "Source";
					UniqueTag = "RumorSpreadEffect";
					Tags = array{"RumorSpread"};
					SpreadResult = "DenounceSpread";
					Radius = 300.0;
					Duration = 100;
					SpreadChance = 0.5;
					SpreadFrequency = 3;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "NotInCombat", "IsConscious", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.DenounceSpread"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-5";
				}
			};
		};
		
		"Smear" = G3ActionTemplate //Agitate the revellers
		{
			GUIPresent = true;
			UICategory = "Diplomacy";
			OrderIndex = 66;

			ActionName = "Smear";
			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsAdult = 1;
					IsFamilyMember = 1;
				},
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };

			DisplayName = "$action.Smear";
			Description = "$action.SmearDesc";
			Instruction = "$callToAction.BuildingPublicHouse";
			
			CanFail = false;
			ShowCombatText = true;
			
			PriceFormula = "15";
			BudgetPot = "Diplomacy";
			CurrencyType = "Prestige";
			Cooldown = 0.08;
			
			BaseRewardXP = 165;
			
			ActionActor = "Character";
			TargetActor = "Building";
			ShowSelectionPrompt = "FamilySelectionNoTargetNoSource";
			SelectionPromptCallToAction = "$selectionPrompt.SelectFamily";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoFamilies";
			
			IsImmediatelyKnownByTarget = false;
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Inn"};
				}
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;
				
				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "Master"; Inside = -3; IsFree = 3; },
				};
				Animations = array
				{
					TargetSnapPointAnimation{ Animation = "smear"; },
				};
			};

			EnterBuilding = "TryEnter";
			SuppressBuildingEnterBehavior = true;

			ThirdPartyActor = "Family";
			ThirdPartyProfiles = array
			{
				TargetProfileFamily
				{
					MyFamily = -3;
					PoliticalImportance = 2;
					HigherRank = 1;
					Rich = 1;
					Feud = 2;
					Alliance = -2;
				};
			};
			
			MoralAlignmentShift = 0.08;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.25,0,-0.3};
			};
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-10";
					AffectSourceAllies = "-5";
					AffectSourceEnemies = "3";
					AffectCurrentNeighborhoodToSource = "-10";
					UseContextAs = "Source";
				},
				FunctionSendMessage
				{
					ApplyTo = "Context";
					Description = "PlayerSmeared";
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
		};

		"Commend" = G3ActionTemplate //Praise someone in front of the revellers
		{
			GUIPresent = true;
			UICategory = "Diplomacy";
			OrderIndex = 65;
			
			ActionName = "Commend";
			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsAdult = 1;
					IsFamilyMember = 1;
				},
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };

			DisplayName = "$action.Commend";
			Description = "$action.CommendDesc";
			Instruction = "$callToAction.BuildingPublicHouse";
			
			PriceFormula = "15";
			BudgetPot = "Diplomacy";
			CurrencyType = "Prestige";
			Cooldown = 0.08;
			
			BaseRewardXP = 165;
			
			CanFail = false;
			ShowCombatText = true;
			
			ActionActor = "Character";
			TargetActor = "Building";
			ShowSelectionPrompt = "FamilySelectionNoTargetNoSource";
			SelectionPromptCallToAction = "$selectionPrompt.SelectFamily";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoFamilies";
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Inn"};
				}
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;
				
				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "Master"; Inside = -3; IsFree = 3; },
				};
				Animations = array
				{
					TargetSnapPointAnimation{ Animation = "town_crier1"; },
				};
			};

			EnterBuilding = "TryEnter";
			SuppressBuildingEnterBehavior = true;

			ThirdPartyActor = "Family";
			ThirdPartyProfiles = array
			{
				TargetProfileFamily
				{
					MyFamily = -3;
					PoliticalImportance = 2;
					HigherRank = 1;
					Rich = 1;
					Feud = -2;
					Alliance = 1;
				};
			};
			
			MoralAlignmentShift = 0.06;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.4,0.3,0.2};
			};
			CriticalFactor = 1.0;
			
			SuccessResult = array 
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "10";
					AffectSourceAllies = "5";
					AffectSourceEnemies = "-3";
					AffectCurrentNeighborhoodToSource = "10";
					UseContextAs = "Source";
				},
				FunctionSendMessage
				{
					ApplyTo = "Context";
					Description = "PlayerCommended";
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
		};

//Aggressive Actions
//----------------------------------------------------

        "Begging" = G3ActionTemplate //Begging
        {
            GUIPresent = true;
            UICategory = "Rogue";
			BudgetPost = "Rogue";
			OrderIndex = 5;

			GUIData = array
			{
				@base/AnyMemberOfOwnFamily
			};
			UsableBy = array{ "$qs.charactertype.0" };
		
			RequiredBuildings = array
			{
				RequiredBuilding = array { "CountryHouse", 1 },
				RequiredBuilding = array { "PoorHouse", 1 },
				RequiredBuilding = array { "CityHouse", 1 },
				RequiredBuilding = array { "Mansion", 1 }
			};
			
			ActionName = "Begging";
			DisplayName = "$Begging";
			Description = "$BeggingDesc";
			Instruction = "$callToAction.Neighborhood";
		
			ActionActor = "Character";
			TargetActor = "Coordinate";
		
			ActionClassName = "SimpleExecutionAction";
			
			SourceRun = true;
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"mendiant1", 0, -1, -1};
			};           

			DestinationsPointOfInterestType = "Begging";
			
			SourceScoreFormula = "Intelligence+2*Charisma";
			Duration = 0.0125;
			Cooldown = 0.001;
			BaseRewardXP = 10;
			CanFail = false;
		
			DesiredProfiles = array
			{
				TargetProfileNeighborhood
				{
					Rich = 1;
					GoodRelationWithMe = 2;
					QuarterCity = 1;
					Inhabitated = 3;
					OnStreet = 3;
					OnMainStreet = 2;
					QuarterSurrounding = -3;
				}
			};
			
			MoralAlignmentShift = 0.02;
			MoralAlignment = MoralAlignment
			{
				Values = array{0,-0.25,0.1};
			};
		
			CriticalFactor = 1.0f;
			
			SuccessResult =  array
			{
				FunctionGiveMoney
				{
					ApplyTo = "Source";
					Amount = 15;
				},
				SpreadEffect
				{
					ApplyTo = "Self";
					UniqueTag = "Begging";
					Tags = array{"Begging"};
					SpreadResult = "BeggingResult";
					Radius = 300.0;
					Duration = 1;
					SpreadChance = 1;
					SpreadToEveryone = true;
					TickOnce = true;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 3;
					Amount = 0.01;
				},
			};
		};
		
		"AmbushAndAttack" = G3ActionTemplate
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 25;

			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee
				{
					IsCharacter = 1;
					HasProfession = "Robber";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$Robber" };
			
			RequiredBuildings = array
			{
				RequiredBuilding = array { "RobberCamp", 1 }
			};

			ActionName = "AmbushAndAttack";
			ActionClassName = "AmbushAction";
			
			DisplayName = "$action.Ambush";
			Description = "$action.AmbushDesc";
			Instruction = "$callToAction.StreetAreaRural";

			ActionActor = "Character";
			TargetActor = "Coordinate";

			AskConfirmationOnCancel = false;
			
			Duration = 0.12;
			ShowCombatText = false;
			CanFail = false;
			
			DesiredProfiles = array
			{
				TargetProfileNeighborhood
				{
					QuarterCity = -3;
					WellGuarded = -2;
					Inhabitated = 2;
					Rich = 2;
					CloseToActor = 2;
					OnMainStreet = 2;
					OnStreet = 3;
				}
			};
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"Ambush_idle", -1, -1, -1};
			}; 

			AnimationProps = array
			{
				PropSpawnDesc { PropNames = array { "ambush/ambush" }; };
			};
			
			// Let the action know that the 'payload' action of the ambush is "AttackAmbushedCharacter". 
			// It will then make sure to find a victim that matches the target profiles of "AttackAmbushedCharacter"
			MainTemplateName = "AttackAmbushedCharacter";
			
			// In the third party profiles, we define ADDITIONAL requirements for valid victims.
			// The victims must fulfill the requirements of "AttackAmbushedCharacter" AND (one of) these third party profiles.
			ThirdPartyProfiles = array
			{				
				TargetProfileCharacter
				{
					Adult = 3;
					NPCGuard = -3;
					CloseToActor = 3;
					DoesNotHaveAnyTags = array{ "InAmbushAction", "eventbuffSenseForDanger" };
					FamilyProfile = TargetProfileFamily 
					{
						Rich = 3;
						MyFamily = -3;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				};
				
				TargetProfileCharacter
				{
					Adult = 3;
					NPCGuard = -3;
					CloseToActor = 3;
					Transporter = 3;
					DoesNotHaveAnyTags = array{ "InAmbushAction" };
					FamilyProfile = TargetProfileFamily 
					{
						MyFamily = -3;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};
			
			SuccessResult = array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"AttackAmbushedCharacter"};
				}
			};
			
			OnStartResult = array
			{
				TagEffect
				{
					ApplyTo = "Source";
					Tags = array{"InAmbushAction"};
				},
			};
			
			OnEndResult = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Source";
					Tags = array {"InAmbushAction"};
				},
			};
		};

		"AttackAmbushedCharacter" = G3ActionTemplate // Ambush  (technically this is only part of the ambush action chain, but it has the same name, so the illegal part of the action has a matching name in the city laws... to make the player understands the connection to the ambush action chain)
		{
			GUIPresent = false;
			DisplayName = "$action.AttackAmbushedCharacter";
			Description = "$action.AttackAmbushedCharacterDesc";
			Instruction = "$callToAction.CharacterAdultNotPlayersNotAllies";
			ActionClassName = "SimpleExecutionAction";
			
			ActionName = "AttackAmbushedCharacter";
			TargetActor = "Character";
			ActionActor = "Character";
			
			SourceScoreFormula = "Intimidation + Dexterity * 0.5 + Strength * 0.75 + Stealth * 0.5 + (Source.hasTag.eventbuffQuickChangeArtist) * 2";
			TargetScoreFormula = "Strength + Perception";
			
			IsAggression = false; //Needs to be false, otherwise characters who gave up immediately might attack afterwards
			CanFail = true; 
			BaseRewardXP = 15;
			UICategory = "Rogue";
			
			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					Adult = 3;
					CloseToActor = 1;
					Healthy = -2;
					FightingProwess = -1;
					Boat = -3;
					NPC = -2;
					Leader = -1;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -2;
						Alliance = -3;
						OtherCity = -1;
						MemberOfSecretSociety = -1;
						SocialHigher = -1;
						PoliticalImportance = -1;
						Heretic = 1;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"challenge_for_duel", 0, -1, -1};
			};
			
			CustomReceiverAnimationPool = array
			{
				CustomAnimationInfo = array {"surrender1", 0, -1, -1};
			};
			
			CriticalFactor = 1.0;
			
			OnStartResult = array
			{
				TagEffect
				{
					ApplyTo = "Source";
					Tags = array{"InAmbushAction"};
				},
				TagEffect
				{
					ApplyTo = "Target";
					Tags = array{"InAmbushAction"};
				},
			};
			
			OnEndResult = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Source";
					Tags = array {"InAmbushAction"};
				},
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					Tags = array {"InAmbushAction"};
				},
			};
			
			SuccessResult = array
			{
				FunctionTransferMoney
				{
					Amount = "50 + ((Target.SocialCaste + 1) * 2) + (Source.Intimidation * 1.5) + (Source.Stealth * 2)";
					MaxTransferred = 100;
					IsDiceDependent = true;
					Receiver = "Source";
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					Giver = "Target";
					MinAmount = 0;
					MaxAmount = 1;	
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.01;
				},
				FunctionTriggerAction
				{
					ApplyTo = "Target";
					Actions = array{"AmbushLooseMoney"};
				}
			};
			
			FailureResult = array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"AttackAmbushedCharacterAction"};
				}
			};
		};

		"AttackAmbushedCharacterAction" = G3ActionTemplate //Attack someone after ambush
		{
			GUIPresent = false;

			ActionClassName = "AttackCharacterAction";

			DisplayName = "$action.AttackCharacter";
			Description = "$action.AttackCharacterDesc";

			IconName = "AttackCharacter";
			ActionName = "AttackAmbushedCharacterAction";
			ActionActor = "Character";
			TargetActor = "Character";
			
			SourceScoreFormula = "Strength * 2 + Combat";
			
			IsAggression = true;
			IsImmediatelyKnownByTarget = false;
			CanFail = false;
			CriticalFactor = 1;
			ShowCombatText = false;
			
			ConfirmationSoundId = 47;

			BaseRewardXP = 5;
		   
			CanFail = false;

			MoralAlignmentShift = 0.04;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.01, -0.01, -0.1};
			};
			
			OnStartResult = array
			{
				// This decision handler makes our character execute "StealFromCharacter" if the character wins the fight
				FunctionInstallAmbushDecisionHandler{}
			};
		};

		"AmbushLooseMoney" = G3ActionTemplate //Target of robbery
		{
			GUIPresent = false;
			CanFail = false;
			
			ActionName = "AmbushLooseMoney";
			DisplayName = "$AmbushLooseMoney";
			Description = "$AmbushLooseMoneyDesc";
			
			ActionActor = "Character";
			TargetActor = "Character";
			ActionClassName = "SimpleExecutionAction";
			
			ShowCombatText = false;

			SourceScoreFormula = "0";
			TargetScoreFormula = "100";

			CanFail = true;
			CriticalFactor = 0.66;
			UICategory = "Rogue";
			
			FailureResult =  array
			{
				FunctionTransferMoney
				{
					Amount = 25;
					PercentageOfWealthTaken = 0.01;
					MaxTransferred = 65;
					IsDiceDependent = true;
					Giver = "Source";
				},
			};
			CriticalFailureResult =  array
			{
				FunctionUpdateRelationship
				{
					AffectSource = "-1";
				},
				FunctionTransferMoney
				{
					Amount = 25;
					PercentageOfWealthTaken = 0.01;
					MaxTransferred = 65;
					IsDiceDependent = true;
					Giver = "Source";
				},
			};
		};
		
		"AttackCharacter" = G3ActionTemplate //Attack someone
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 10;

			ActionClassName = "AttackCharacterAction";
			GUIData = array
			{
				@base/AnyAdultBelongingToOwnFamily
			};
			UsableBy = array{ "$characters.Age.Adult" };

			DisplayName = "$action.AttackCharacter";
			Description = "$action.AttackCharacterDesc";
			Instruction = "$callToAction.CharacterAdultNotPlayersNotAllies";
			
			ActionName = "AttackCharacter";
			ActionActor = "Character";
			TargetActor = "Character";
			
			SourceScoreFormula = "Strength * 2 + Combat";
			
			IsAggression = true;
			IsImmediatelyKnownByTarget = false;
			CanFail = false;
			CriticalFactor = 1;
			ShowCombatText = false;
			
			ConfirmationSoundId = 47;
			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					Adult = 3;
					CloseToActor = 1;
					Healthy = -2;
					FightingProwess = -1;
					Boat = -3;
					NPC = -2;
					NPCGuard = -2;
					Leader = -1;
					IsMyVIPGuard = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -2;
						Alliance = -3;
						Feud = 1;
						OtherCity = -1;
						MemberOfSecretSociety = -1;
						SocialHigher = -1;
						PoliticalImportance = -1;
						Heretic = 1;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};

			BaseRewardXP = 10;
		   
			CanFail = false;

			MoralAlignmentShift = 0.08;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.5,-0.5,-0.9};
			};

			SuccessResult = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-10";
					AffectLiaison = "-30";
				},
				
				FunctionTrackObjectiveProgress
				{
					Amount = 3;
					ObjectiveTypename = "IncreaseSecurity";
				},
				
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.02;
				},
			};
		};

		// Defender: AttackCharacter answer
		"CombatFight" = G3ActionTemplate //Fight
		{
			GUIPresent = false;
			ActionClassName = "AttackCharacterAction";
			ActionName = "CombatFight";
			DisplayName = "$action.CombatFight";
			Description = "$action.CombatFightDesc";
			Instruction = "$callToAction.CharacterAdultNotPlayers";
			
			ActionActor = "Character";
			TargetActor = "Character";
			CharacterState = array{"PreCombatDefender", "PreCrimePerpetrator"};

			SourceScoreFormula = "Strength + Combat";
			TargetScoreFormula = "Strength + Combat";

			BaseRewardXP = 25;
			
			CanFail = false;
			ShowCombatText = false;

			MoralAlignmentShift = 0.05;
			MoralAlignment = MoralAlignment
			{
				Values = array{0,-0.5,-0.6};
			};
			IsAIObjective = false;
			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					Adult = 3;
					DynastyMember = -3;
				}
			};
		};

		// you can wait for the attacker to get you -- only with guard
		"WaitForCombat" = G3ActionTemplate
		{
			ActionClassName = "G3Action";
			GUIPresent = false;

			ActionName = "WaitForCombat";
			DisplayName = "$action.WaitForCombat";
			Description = "$action.WaitForCombatDesc";
			Instruction = "";
			
			ActionActor = "Character";

			BaseRewardXP = 5;
			Duration = 1.0;

			CanFail = false;
			
			SourceScoreFormula = "Strength + Combat";
			TargetScoreFormula = "Strength + Combat";

			IsAIObjective = false;
		};

		// Defender: AttackCharacter answer
		"CombatFlee" = G3ActionTemplate //Flee
		{
			GUIPresent = false;
			ActionClassName = "CombatFleeAction";
			ActionName = "CombatFlee";
			DisplayName = "$action.CombatFlee";
			Description = "$action.CombatFleeDesc";
			Instruction = "";
			
			ActionActor = "Character";
			TargetActor = "Character";
			CharacterState = array{"PreCombatDefender", "PreCrimePerpetrator"};


			BaseRewardXP = 10;
			
			CanFail = false;
			CanBeCancelled = false;
			
			// it will run away until it reaches the main building or half a year has passed
			Duration = 0.5;
			
			MoralAlignmentShift = 0;
			MoralAlignment = MoralAlignment
			{
				Values = array{0,0,0};
			};
			IsAIObjective = false;
		};

		"StealFromCharacter" = G3ActionTemplate //Steal from a character
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 20;

			ActionClassName = "PostCombatAction";
			ActionName = "StealFromCharacter";
			DisplayName = "$action.StealFromCharacter";
			Description = "$action.StealFromCharacterDesc";
			Instruction = "$callToAction.Character.Adult.Unconscious";
			
			ActionActor = "Character";
			TargetActor = "Character";

			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				}
			};
			UsableBy = array{ "$characters.Age.Adult" };
			
			EnterBuilding = "TryEnter";
			
			SourceScoreFormula = "1"; //To roll for the critical success
			
			BaseRewardXP = 15;
		   
			Duration = 0.001;
			
			Cooldown = 0.04;

			IsImmediatelyKnownByTarget = false;
			IsAggression = true;
			CanFail = false; 
			
			CriticalFactor = 1;
			
			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					Unconscious = 3;
					CloseToActor = 3;
					Boat = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
						TargetProfileBuilding // inside my residence
						{
							Residence = 3;
							Burning = -3;
							FamilyProfile = TargetProfileFamily
							{
								MyFamily = 3;
							};
						},
						TargetProfileBuilding // inside the residence of an ally
						{
							Residence = 3;
							Burning = -3;
							FamilyProfile = TargetProfileFamily
							{
								Alliance = 3;
							};
						},
						TargetProfileBuilding // inside a city building
						{
							IncludedTypes = array{"Cityhall", "Church", "cathedrale", "Arsenal"};
						},
					};
				}
			};
			
			MoralAlignmentShift = 0.06;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.75,-0.75,-0.75};
			};
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"reap_herbs1", 0, -1, -1};
			};
			
			CriticalFactor = 0.75;
			
			CriticalSuccessResult = array
			{
				FunctionTransferMoney
				{
					Amount = 60;
					PercentageOfWealthTaken = 0.04;
					MaxTransferred = 120;
					IsDiceDependent = true;
					Giver = "Target";
					Receiver = "Source";
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					Giver = "Target";
					MinAmount = 0;
					MaxAmount = 2;	
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.01;
				},
				
			};
			
			SuccessResult = array
			{
				FunctionTransferMoney
				{
					Amount = 45;
					PercentageOfWealthTaken = 0.04;
					MaxTransferred = 100;
					IsDiceDependent = true;
					Giver = "Target";
					Receiver = "Source";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.01;
				},
			};
			
		};

		"BreakBone" = G3ActionTemplate //Break bones
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 11;

			ActionClassName = "PostCombatAction";
			DisplayName = "$action.BreakBoneAction";
			Description = "$action.BreakBoneActionDesc";
			Instruction = "$callToAction.Character.Adult.Unconscious";
			
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				}
			};
			UsableBy = array{ "$characters.Age.Adult" };
			
			ActionName = "BreakBone";
			ActionActor = "Character";
			
			SourceScoreFormula = "Strength * 1.15";
			TargetScoreFormula = "Dexterity";
			
			IsAggression = true;
			CanFail = true;			
			
			TargetActor = "Character";

			BaseRewardXP = 23;
			//BaseRewardPrestige = 5;

			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					IsSourceHuman = 3;

					Unconscious = 3;
					CloseToActor = 2;
					Boat = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						Alliance = -2;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				},
				TargetProfileCharacter
				{
					IsSourceHuman = -3;

					Unconscious = 3;
					CloseToActor = 2;
					Boat = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						Alliance = -3;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};
			
			Duration = 0.004;
			Cooldown = 0.1;
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"break_bone", 0, -1, -1};
			};

			CustomReceiverAnimationPool = array
			{
				CustomAnimationInfo = array {"break_bone_victim", 0, -1, -1};
			};

			MoralAlignmentShift = 0.08;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.5,-0.3,-0.9};
			};
			
			CriticalFactor = 0.85;
			
			CriticalSuccessResult = array
			{
				DisplayEffect
				{
					Tags = array{"BrokenBone"};
					ApplyTo = "Target";
					Duration = 25;
					DisplayGroup = "wound";
					DisplayName = "$effect.brokenBone";
				},
				ModifierEffect
				{
					ActorValue = "MovementSpeedMult";
					ApplyTo = "Target";
					Tags = array{"BrokenBone"};
					Mod = -0.5;
					Duration = 30;
					Recover = true;
				},
				FunctionTransferPrestige
				{
					Giver = "Target";
					Amount = 2;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.05;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 7;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 4;
					Amount = 0.01;
				},
			};
			
			SuccessResult = array
			{
				DisplayEffect
				{
					Tags = array{"BrokenBone"};
					ApplyTo = "Target";
					Duration = 25;
					DisplayGroup = "wound";
					DisplayName = "$effect.brokenBone";
				},
				ModifierEffect
				{
					ActorValue = "MovementSpeedMult";
					ApplyTo = "Target";
					Tags = array{"BrokenBone"};
					Mod = -0.5;
					Duration = 25;
					Recover = true;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.02;
				},
			};
			
			FailureResult = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-10";
					AffectTargetAllies = "-5";
					AffectTargetEnemies = "5";
				}
			};
			
			CriticalFailureResult = array
			{
				FunctionTransferEvidence
				{
					Receiver = "Target";
					Giver = "Source";
					CreateEvidenceOfCurrentAction = true;
				},
				
				FunctionUpdateRelationship
				{
					AffectTarget = "-12";
					AffectTargetAllies = "-6";
					AffectTargetEnemies = "6";
					AffectTargetSocietyMembers = "-3";
					AffectTargetAlliedSocietyMembers = "-2";
					AffectTargetEnemySocietyMembers = "2";
					AffectLiaison = "-50";
				}
			};
		};

		"KillCharacter" = G3ActionTemplate //Kill
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 12;

			ActionClassName = "PostCombatAction";
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				}
			};
			UsableBy = array{ "$characters.Age.Adult" };

			ActionName = "KillCharacter";
			DisplayName = "$action.KillCharacter";
			Description = "$action.KillCharacterDesc";
			Instruction = "$callToAction.Character.Adult.Unconscious.NotAllied.NotPlayers";
			
			ActionActor = "Character";
			SourceScoreFormula = "Dexterity + Stealth * 2 + AttackPower";
			
			BaseRewardXP = 45;
			Duration = 0.004;
			Cooldown = 0.25;
			ShowCombatText = false;
			
			TargetActor = "Character";
			TargetScoreFormula = "Level + Strength * 2 + DefensePower";
			
			IsAggression = true;
			IsImmediatelyKnownByTarget = false;
			
			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					Unconscious = 3;
					CloseToActor = 2;
					Boat = -3;
					OfficeHolder = 1;
					Leader = 1;
					NPC = -2;
					InLoveWithMe = -2;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						Alliance = -3;
						Feud = 2;
						GoodRelationWithMe = -2;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"kill_unconscious_character", 0, -1, -1};
			};

			CustomReceiverAnimationPool = array
			{
				CustomAnimationInfo = array {"break_bone_victim", 0, -1, -1};
			};
			
			MoralAlignmentShift = 0.5;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.8,0,-1};
			};
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				SpreadEffect // victim is NPC, employee or dynasty character: look for one NPC witness
				{
					ApplyTo = "Source";
					UniqueTag = "KillCharacterRepLossNPC";
					Tags = array{"KillCharacterRepLossNPC"};
					SpreadResult = "MediumRepLossNPCResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "IsConscious", "NotInCombat", "NotFleeing", "hasTag.NPC"};
							TargetScoreFormula = "0";
						}
					}; 
				},
				SpreadEffect // victim is dynasty character: look for a family member of the murdered character
				{
					ApplyTo = "Target";
					UniqueTag = "KillCharacterRepLossDynasty";
					Tags = array{"KillCharacterRepLossDynasty"};
					SpreadResult = "SevereRepLossDynastyResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					UseOwnSourceForAppliedEffects = true; // Effects that are applied to the witness shall be applied directly from the killer (instead of from the victim)
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "MyFamily", "IsConscious", "NotInCombat", "NotFleeing"};
							TargetScoreFormula = "0";
							SourceScoreFormula = "HasFamily && !IsEmployee"; // 0 success chance in case the victim is an NPC or an employee
						}
					}; 
				},
				SpreadEffect // victim is employee: look for a family member of the murdered character
				{
					ApplyTo = "Target";
					UniqueTag = "KillCharacterRepLossEmployee";
					Tags = array{"KillCharacterRepLossEmployee"};
					SpreadResult = "SmallRepLossDynastyResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					UseOwnSourceForAppliedEffects = true; // Effects that are applied to the witness shall be applied directly from the killer (instead of from the victim)
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "MyFamily", "IsConscious", "NotInCombat", "NotFleeing"};
							TargetScoreFormula = "0";
							SourceScoreFormula = "HasFamily && IsEmployee"; // 0 success chance in case the victim is NOT an employee and/or NOT part of a dynasty
						}
					};
				},
				FunctionKill
				{
					ApplyTo = "Target";
					Killer = "Source";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.1;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 4;
					Amount = 0.02;
				},
			};
			
			FailureResult = array
			{
				FunctionApplyResults
				{
					ApplyTo = "Target";
					ResultObjectIds = array{"MediumRepLossDynastyResult"};
				};
				SpreadEffect // look for one NPC witness
				{
					ApplyTo = "Target";
					UniqueTag = "KillCharacterRepLossNPC";
					Tags = array{"KillCharacterRepLossNPC"};
					SpreadResult = "SmallRepLossNPCResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					UseOwnSourceForAppliedEffects = true; // Effects that are applied to the witness shall be applied directly from the killer (instead of from the victim)
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasTag.NPC"};
							TargetScoreFormula = "0";
							SourceScoreFormula = "HasFamily"; // 0 success chance in case the victim is an NPC, because reputation has been already updated
						}
					};
				},
			};
		};

		// Variant of 'AttackCharacterAction', that is used by guards to 
		// initiate a fight on caught criminals. This action is not illegal/an 
		// aggression so it will not trigger other guards. 
		"NPCGuardCombatStart" = G3ActionTemplate //In combat
		{
			GUIPresent = false;
			ActionClassName = "AttackCharacterAction";
			ActionName = "NPCGuardCombatStart";
			DisplayName = "$action.NPCGuardCombatStart";
			Description = "$action.NPCGuardCombatStartDesc";
			
			ActionActor = "Character";
			TargetActor = "Character";
			CanFail = false;
			
			GUIData = array
			{
				@base/AllNeutralNPCs
			};
	   };

		"PursuitAggressorAction" = G3ActionTemplate //Pursuing aggressor
		{
			GUIPresent = false;
			ActionClassName = "PursuitAggressorAction";
			ActionName = "PursuitAggressorAction";
			ActionActor = "Character";
			CanFail = false;
			DisplayName = "$action.PursuitAggressor";
			Description = "$action.PursuitAggressorDesc";
			
			GUIData = array
			{
				@base/AllNeutralNPCs
			};
		};
		
		"SpotTarget" = G3ActionTemplate //Spot someone
		{
			ActionClassName = "SpotTargetAction";
			ActionName = "SpotTarget";
			DisplayName = "$action.SpotTarget";
			Description = "$action.SpotTargetDesc";
			
			ActionActor = "Character";
			TargetActor = "Character";

			GUIPresent = false;
			CanFail = false;

			Duration = 0.002f;
			
			GUIData = array
			{
				@base/AllNeutralNPCs
			};
		};

		"InterceptTarget" = G3ActionTemplate
		{
			ActionClassName = "InterceptTargetAction";
			ActionName = "InterceptTarget";
			DisplayName = "$action.InterceptTarget";
			Description = "$action.InterceptTargetDesc";
			Instruction = "";
			
			ActionActor = "Character";
			CanFail = false;
			GUIPresent = false;
			
			GUIData = array
			{
				@base/AllNeutralNPCs
			};
		};
		"GuardPatrol" = G3ActionTemplate //On patrol
		{
			GUIPresent = false;

			ShowCombatText = false;
			
			ActionName = "GuardPatrol";
			ActionClassName = "GuardPatrol";
			DisplayName = "$GuardPatrol";
			Description = "$GuardPatrolDesc";

			ActionActor = "Character";		

			CanFail = false;

			Roaming = true;		

			SourceRun = false;

			DetectionRadius = 500.0;
			
			Duration = -1.0;
		}; 

//Henchmen Actions
//----------------------------------------------------
		"KidnapCharacter" = G3ActionTemplate //Kidnap character
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 60;

			ActionClassName = "PostCombatAction";
			DisplayName = "$action.KidnapCharacterAction";
			Description = "$action.KidnapCharacterActionDesc";
			Instruction = "$callToAction.Character.Adult.Unconscious.NotAllied.NotPlayers";
			
			GUIData = array
			{
				@base/Henchmen
			};
			UsableBy = array{ "$gui.item.UsableByHenchmen" };
			
			ActionName = "KidnapCharacter";
			ActionActor = "Character";
			TargetActor = "Character";
			
			SourceScoreFormula = "Strength";
			TargetScoreFormula = "Dexterity*0.5";
		
			PriceFormula = "10000";
			BudgetPot = "Business";
			BaseRewardXP = 490;
			BaseRewardPrestige = 300;
			
			Duration = 0.005;
			Cooldown = 1;
			CooldownFamilyWide = true;
			IsAggression = true;
			IsImmediatelyKnownByTarget = false;
			CanFail = true; 
			
			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					Unconscious = 3;
					CloseToActor = 2;
					Boat = -3;
					NPCGuard = -3;  
					DoesNotHaveAnyTags = array{ "NoKidnap" };
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						Alliance = -3;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};
			
			MoralAlignmentShift = 0.3;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.9,-0.6,-0.9};
			};
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"reap_herbs1", 0, -1, -1};
			};
			
			CriticalFactor = 0.80;
			
			CriticalSuccessResult = array
			{
				FunctionTransferPrestige
				{
					Receiver = "Source";
					Giver = "Target";
					Amount = 100;
				},
				FunctionKidnapTarget
				{
					//Nothing needed
				},
				FunctionTrackObjectiveProgress
				{
					Amount = 20;
					ObjectiveTypename = "IncreaseSecurity";
				},
				FunctionApplyResults
				{
					ResultObjectIds = array{"CharacterKidnapped"};
				}
			};
			
			SuccessResult = array
			{
				SpreadEffect // victim is NPC, employee or dynasty character: look for one NPC witness
				{
					ApplyTo = "Source";
					UniqueTag = "KidnapCharacterRepLossNPC";
					Tags = array{"KidnapCharacterRepLossNPC"};
					SpreadResult = "MediumRepLossNPCResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "IsConscious", "NotInCombat", "NotFleeing", "hasTag.NPC"};
							TargetScoreFormula = "0";
						}
					}; 
				},
				SpreadEffect // victim is dynasty character: look for a family member of the murdered character
				{
					ApplyTo = "Target";
					UniqueTag = "KidnapCharacterRepLossDynasty";
					Tags = array{"KidnapCharacterRepLossDynasty"};
					SpreadResult = "SevereRepLossDynastyResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					UseOwnSourceForAppliedEffects = true; // Effects that are applied to the witness shall be applied directly from the killer (instead of from the victim)
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "MyFamily", "IsConscious", "NotInCombat", "NotFleeing"};
							TargetScoreFormula = "0";
							SourceScoreFormula = "HasFamily && !IsEmployee"; // 0 success chance in case the victim is an NPC or an employee
						}
					}; 
				},
				SpreadEffect // victim is employee: look for a family member of the murdered character
				{
					ApplyTo = "Target";
					UniqueTag = "KidnapCharacterRepLossEmployee";
					Tags = array{"KidnapCharacterRepLossEmployee"};
					SpreadResult = "SmallRepLossDynastyResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					UseOwnSourceForAppliedEffects = true; // Effects that are applied to the witness shall be applied directly from the killer (instead of from the victim)
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "MyFamily", "IsConscious", "NotInCombat", "NotFleeing"};
							TargetScoreFormula = "0";
							SourceScoreFormula = "HasFamily && IsEmployee"; // 0 success chance in case the victim is NOT an employee and/or NOT part of a dynasty
						}
					};
				},
				FunctionTransferEvidence
				{
					Receiver = "Target";
					Giver = "Target";
					IsDiceDependent = false;
					CreateEvidenceOfCurrentAction = true;
				},
				FunctionKidnapTarget
				{
					//Nothing needed
				},
				FunctionTrackObjectiveProgress
				{
					Amount = 20;
					ObjectiveTypename = "IncreaseSecurity";
				},
				FunctionApplyResults
				{
					ResultObjectIds = array{"CharacterKidnapped"};
				}				
			};
			
			FailureResult = array
			{
				FunctionTransferEvidence
				{
					Receiver = "Target";
					Giver = "Target";
					IsDiceDependent = false;
					CreateEvidenceOfCurrentAction = true;
				},
				FunctionApplyResults
				{
					ApplyTo = "Target";
					ResultObjectIds = array{"MediumRepLossDynastyResult"};
				};
				SpreadEffect // look for one NPC witness
				{
					ApplyTo = "Target";
					UniqueTag = "KidnapCharacterRepLossNPC";
					Tags = array{"KidnapCharacterRepLossNPC"};
					SpreadResult = "SmallRepLossNPCResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					UseOwnSourceForAppliedEffects = true; // Effects that are applied to the witness shall be applied directly from the killer (instead of from the victim)
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasTag.NPC"};
							TargetScoreFormula = "0";
							SourceScoreFormula = "HasFamily"; // 0 success chance in case the victim is an NPC, because reputation has been already updated
						}
					};
				},
				FunctionRemoveUnconsciousness
				{
					ApplyTo = "Target";
				},
				FunctionTriggerAction
				{
					ApplyTo = "Target";
					Actions = array{"CombatFlee"};
				}
			};
			
			CriticalFailureResult = array
			{
				FunctionTransferEvidence
				{
					Receiver = "Target";
					Giver = "Target";
					IsDiceDependent = false;
					CreateEvidenceOfCurrentAction = true;
				},
				FunctionApplyResults
				{
					ApplyTo = "Target";
					ResultObjectIds = array{"SevereRepLossDynastyResult"};
				};
				SpreadEffect // look for one NPC witness
				{
					ApplyTo = "Target";
					UniqueTag = "KidnapCharacterRepLossNPC";
					Tags = array{"KidnapCharacterRepLossNPC"};
					SpreadResult = "MediumRepLossNPCResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					UseOwnSourceForAppliedEffects = true; // Effects that are applied to the witness shall be applied directly from the killer (instead of from the victim)
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasTag.NPC"};
							TargetScoreFormula = "0";
							SourceScoreFormula = "HasFamily"; // 0 success chance in case the victim is an NPC, because reputation has been already updated
						}
					};
				},
				FunctionTransferPrestige
				{
					Receiver = "Target";
					Giver = "Source";
					Amount = 100;
				},
				FunctionRemoveUnconsciousness
				{
					ApplyTo = "Target";
				},
				FunctionTriggerAction
				{
					ApplyTo = "Target";
					Actions = array{"CombatFlee"};
				}
			};
		};

		"ChainHostage" = G3ActionTemplate //Chain the hostage up in your back room
		{
			OrderIndex = 3;
			ActionClassName = "SimpleExecutionAction";
			GUIPresent = true;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					IsAdult = 1;
					BelongsToOwnFamily = 1;
					ContainHostage = 1;
				}
			};
			UsableBy = array{ "$gui.item.UsableByHenchmen" };

			ActionName = "ChainHostage";
			DisplayName = "$action.ChainHostage";
			Description = "$action.ChainHostageDesc";
			Instruction = "$selectionPrompt.SelectResidence";
			ActionActor = "Character";
			TargetActor = "Building";
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$selectionPrompt.SelectResidence";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoResidence";

			//PriceFormula = "100";
			Duration = 0.04;
			BaseRewardXP = 14;

			IsImmediatelyKnownByTarget = false;
			IsAggression = true;
			EnterBuilding = "TryEnter";

			CanFail = false;
			
			MoralAlignmentShift = 0.2;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.4,0,0.1};
			};

			DesiredProfiles = array
			{                
				TargetProfileBuilding
				{
					Residence = 3;
					Burning = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
				};				
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "ChainHostage"; },
				};
			};
			
			SuccessResult = array
			{
				FunctionChainHostage{}
			};
		};		
		
		"Sabotage" = G3ActionTemplate //Sabotage building
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 75;

			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/Henchmen
			};
			UsableBy = array{ "$gui.item.UsableByHenchmen" };

			ActionName = "Sabotage";
			DisplayName = "$Sabotage";
			Description = "$SabotageDesc";
			Instruction = "$callToAction.ResidenceBusinessNotPlayersAllies";

			ActionActor = "Character";
			TargetActor = "Building";

			EnterBuilding = "ForceEnter";
			SuppressBuildingEnterBehavior = true;

			TargetTags = array{"FreemasonsGift"};
			DesiredProfiles = array
			{                
				TargetProfileBuilding
				{
					ExcludedTypes = array{"Statue", "Stage"};
					CityBuilding = -3;
					ResourceProducer = -3;
					Business = 2;
					CityBuilding = -3;
					MatchTargetTags = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -2;
						Feud = 2;
						Alliance = -3;
						PoliticalImportance = 1;
						Rich = 1;
					};
				}
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;
				
				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "Intruder"; Inside = -3; IsFree = 3; },
				};
				Animations = array
				{
					TargetSnapPointAnimation{ Animation = "destroy1"; },
				};
			};
			
			SourceScoreFormula = "Dexterity";
			TargetScoreFormula = "Level + BuildingSecurity";

			CanFail = true;

			PriceFormula = "1000";
			BudgetPot = "Other";
			Duration = 0.01; //  0.5 week
			BaseRewardXP = 175;
			Cooldown = 0.2;
			IsImmediatelyKnownByTarget = false;
			IsAggression = true;

			MoralAlignmentShift = 0.09;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.6,-0.8,-1};
			};

			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				ModifierEffect
				{
					Tags = array{"Sabotage"};
					ApplyTo = "Target";
					ActorValue = "Productivity";
					Mod = -0.5;
					Duration = 360;
					Recover = true;
				},
				DisplayEffect
				{
					Tags = array{"Sabotage"};
					ApplyTo = "Target";
					DisplayGroup = "debuffed";
					DisplayName = "$effect.sabotaged";
					Duration = 360;
				},
				ModifierEffect
				{
					Tags = array{"Sabotage"};
					ApplyTo = "Target";
					ActorValue = "Attractiveness";
					Mod = -5;
					Duration = 360;
					Recover = true;
				},
				ModifierEffect
				{
					Filter = "Target.hasTag.PoisonTrap";
					ApplyTo = "Source";
					ActorValue = "Health";
					Mod = -75;
					Duration = 0;
					Recover = false;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-10";
					AffectTargetAllies = "-5";
					AffectTargetEnemies = "5";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 8;
					Amount = 0.01;
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"ForcedExit"};
				}
			};
			
			FailureResult = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-10 + min(Source.Stealth / 2, 5)";
					AffectTargetAllies = "-5 + min(Source.Stealth / 4, 3)";
					AffectTargetEnemies = "5 - min(Source.Stealth / 4, 3)";
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"ForcedExit"};
				}
			};
		};
		
		"Vandalize" = G3ActionTemplate //Vandalism
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 70;

			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/Henchmen
			};
			UsableBy = array{ "$gui.item.UsableByHenchmen" };
			
			ActionName = "Vandalize";

			DisplayName = "$action.Vandalize";
			Description = "$action.VandalizeDesc";
			Instruction = "$callToAction.ResidenceBusinessNotPlayersAllies";
			
			ActionActor = "Character";
			TargetActor = "Building";

			EnterBuilding = "ForceEnter";
			SuppressBuildingEnterBehavior = true;

			SourceScoreFormula = "Dexterity";
			TargetScoreFormula = "Level + BuildingSecurity";

			CanFail = true;
			
			PriceFormula = "500";
			BudgetPot = "Other";
			UICategory = "Fighting";
            Duration = 0.006; //  1 month
			Cooldown = 0.15;
			BaseRewardXP = 152;
			IsImmediatelyKnownByTarget = false;
			IsAggression = true;
			
			TargetTags = array{"FreemasonsGift"};
			DesiredProfiles = array
			{                
				TargetProfileBuilding
				{
					ExcludedTypes = array{"Statue", "Stage"};
					CityBuilding = -3;
					ResourceProducer = -3;
					MatchTargetTags = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -2;
						Feud = 2;
						Alliance = -3;
						PoliticalImportance = -1;
						Rich = 1;
					};
				}
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;
				
				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "Intruder"; Inside = -3; IsFree = 3; },
				};
				Animations = array
				{
					TargetSnapPointAnimation{ Animation = "destroy1"; },
				};
			};

			MoralAlignmentShift = 0.1;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.1,-0.6,-0.5};
			};

			CriticalFactor = 1.0;
			
			SuccessResult = array
			{			
				DisplayEffect
				{
					Tags = array{"Vandalize"};
					ApplyTo = "Target";
					DisplayGroup = "debuffed";
					DisplayName = "$effect.Vandalized";
					Duration = 180;
				},
				ModifierEffect
				{
					Tags = array{"Vandalize"};
					ApplyTo = "Target";
					ActorValue = "Attractiveness";
					Duration = 180;
					Mod = -15;
					Recover = true;
				},
				ModifierEffect
				{
					Filter = "Target.hasTag.PoisonTrap";
					ApplyTo = "Source";
					ActorValue = "Health";
					Mod = -75;
					Duration = 0;
					Recover = false;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-10 + min(Source.Stealth / 2, 5)";
					AffectTargetAllies = "-5 + min(Source.Stealth / 4, 3)";
					AffectTargetEnemies = "5 - min(Source.Stealth / 4, 3)";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.05;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 8;
					Amount = 0.01;
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"ForcedExit"};
				}
			};
			
			FailureResult = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-8";
					AffectTargetAllies = "-4";
					AffectTargetEnemies = "4";
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"ForcedExit"};
				}
			};
		};
		
		"GoSpyBuilding" = G3ActionTemplate //Spy on a building
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 50;

			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/Henchmen
			};
			UsableBy = array{ "$gui.item.UsableByHenchmen" };

			ActionName = "GoSpyBuilding";
			DisplayName = "$action.SpyBuilding";
			Description = "$action.SpyBuildingDesc";
			Instruction = "$callToAction.ResidenceBusinessNotPlayers";
			
			ActionActor = "Character";
			TargetActor = "Building";

			SourceScoreFormula = "Dexterity + Perception + (Source.hasTag.LockPicking*5)";
			
			TargetScoreFormula = "Level + BuildingSecurity";

			PriceFormula = "350";
			BudgetPot = "Diplomacy";
			BaseRewardXP = 150;
			DistanceFromTarget = 300;

			IsImmediatelyKnownByTarget = false;

			CanFail = true;
			
			TargetTags = array{"FreemasonsGift"};
			DesiredProfiles = array
			{
				// for neighborhood
				TargetProfileBuilding
				{
					ExcludedTypes = array{"Statue", "Stage"};
					ActiveResidence = 1;
					Burning = -3;
					Business = 1;
					Buyable = 1;
					CloseToActor = 1;
					Guarded = 1;
					Open = 1;
					ResourceProducer = 1;
					CityBuilding = -3;
					ResourceProducer = -3;
					MatchTargetTags = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -2;
						Feud = 2;
						Alliance = -2;
						PoliticalImportance = 1;
						Rich = 1;
					};
				},
			};
			
			MoralAlignmentShift = 0.08;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.4,0,-0.3};
			};
			
			CriticalFactor = 1.0f;
			
			SuccessResult = array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"SpyBuilding"};
				}
			};
			
			//On Failure do nothing
		};
		
		"SpyBuilding" = G3ActionTemplate //Spy on a building
		{
			GUIPresent = false;

			ActionClassName = "SpyAction";
			
			ActionName = "SpyBuilding";
			DisplayName = "$action.SpyBuilding";
			Description = "$action.SpyBuildingDesc";
			Instruction = "$callToAction.ResidenceBusinessNotPlayers";
			
			ActionActor = "Character";
			TargetActor = "Building";

			Duration = 1; // year
			BaseRewardXP = 145;

			IsImmediatelyKnownByTarget = false;
			DistanceFromTarget = 400.0;

			CanFail = false;
			
			ShowCombatText = false;			
			
			MoralAlignmentShift = 0;
			MoralAlignment = MoralAlignment
			{
				Values = array{0, 0, 0};
			};
		};
		
		"GuardBuildingHenchmen" = G3ActionTemplate //Guard building
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 46;

			ActionClassName = "GuardBuildingAction";
			GUIData = array
			{
				@base/Henchmen
			};
			UsableBy = array{ "$gui.item.UsableByHenchmen" };

			ShowCombatText = false;
			
			ActionName = "GuardBuildingHenchmen";
			DisplayName = "$action.GuardBuilding";
			Description = "$action.GuardBuildingDesc";
			Instruction = "$callToAction.ResidenceBusiness";
			
			ActionActor = "Character";
			TargetActor = "Building";
			
			CanFail = true;
			
			RestartAfterUnconsciousness = true;
			ResumeProgress = true;

			SourceScoreFormula = "Perception";

			Duration = -1;
			BaseRewardXP = 0;

			TargetTags = array{"IsHighTier"};
			DesiredProfiles = array
			{                
				TargetProfileBuilding
				{
					ExcludedTypes = array{"Statue", "Stage"};
					ActiveResidence = 2;
					Guarded = -2;
					CityBuilding = -3;
					ResourceProducer = -3;
					MatchTargetTags = 1;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
				}			
			};

			MoralAlignmentShift = 0.05;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.25,0.25,-0.1};
			};
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 12;
					ObjectiveTypename = "IncreaseSecurity";
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "5";
				}
			};
		};
		
		"EscortCharacter" = G3ActionTemplate //Escort someone
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 60;

			ActionClassName = "EscortCharacterAction";

			GUIData = array
			{
				@base/Henchmen
			};
			UsableBy = array{ "$gui.item.UsableByHenchmen" };
			
			ShowCombatText = false;

			ActionName = "EscortCharacter";
			DisplayName = "$action.EscortCharacter";
			Description = "$action.EscortCharacterDesc";
			Instruction = "$callToAction.CharacterAdult";
			
			ActionActor = "Character";
			TargetActor = "Character";

			EnterBuilding = "TryEnter";
			
			SourceScoreFormula = "Perception";

			Duration = -1;	// no time limit
			BaseRewardXP = 0;
			
			DistanceFromTarget = 150;

			CanFail = false;
			
			RestartAfterUnconsciousness = true;
			ResumeProgress = true;
			
			MoralAlignmentShift = 0;
			MoralAlignment = MoralAlignment
			{
				Values = array{0,0,0};
			};
			
			TargetTags = array{"Hand"};
			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					Adult = 3;
					Leader = 2;
					MatchTargetTags = 1;
					Guarded = -1;
					Employee = -3;
					Transporter = -3;
					Boat = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
				}
			};
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 10;
					ObjectiveTypename = "IncreaseSecurity";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = -0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 4;
					Amount = -0.01;
				},
			};
		};
		
		"EscortVIP" = G3ActionTemplate //Escort someone
		{
			GUIPresent = false;
			UICategory = "Fighting";
			OrderIndex = 60;

			ActionClassName = "EscortCharacterAction";

			GUIData = array
			{
				@base/Henchmen
			};
			ShowCombatText = false;
			
			ActionName = "EscortVIP";
			DisplayName = "$action.EscortCharacter";
			Description = "$action.EscortCharacterDesc";
			Instruction = "$callToAction.CharacterAdult";
			IconName = "EscortCharacter";
			
			ActionActor = "Character";
			TargetActor = "Character";

			EnterBuilding = "TryEnter";

			Duration = -1;	// no time limit
			BaseRewardXP = 0;
			
			DistanceFromTarget = 150;

			CanFail = false;
			
			RestartAfterUnconsciousness = true;
			ResumeProgress = true;
		};
		
		"EscortCaravan" = G3ActionTemplate //Escort someone
		{
			// This action is exclusively for supply guards to escort their supply transporter.
			ActionName = "EscortCaravan";
			ActionClassName = "EscortCharacterAction";

			ShowCombatText = false;

			DisplayName = "$action.EscortCharacter";
			Description = "$action.EscortCharacterDesc";
			
			ActionActor = "Character";
			TargetActor = "Character";

			EnterBuilding = "TryEnter";

			Duration = -1;	// no time limit
			
			DistanceFromTarget = 150;

			CanFail = false;
			
			RestartAfterUnconsciousness = true;
			ResumeProgress = true;
		};
		
		"ResignGuardingVIP" = G3ActionTemplate //Send to building
		{
			ActionClassName = "GoToBuilding";
			GUIPresent = false;
			ShowCombatText = false;

			ActionActor = "Character";
			TargetActor = "Building";

			ActionName = "ResignGuardingVIP";
			DisplayName = "$action.GoToBuilding";
			Description = "$action.GoToBuildingDesc";
			IconName = "GoHome";

			CanFail = false;
			CanBeCancelled = false;
			AskConfirmationOnCancel = false;
			
			EnterBuilding = "ForceEnterStealthy";
			
			SuccessResult = array
			{
				FunctionKill 
				{
					ApplyTo = "Source";
				};
			};
	   };
		
		"StealthKillCharacter" = G3ActionTemplate //Eliminate someone
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 65;

			ActionClassName = "StealthAction";
			GUIData = array
			{
				@base/Henchmen
			};
			UsableBy = array{ "$gui.item.UsableByHenchmen" };

			ActionName = "StealthKillCharacter";
			DisplayName = "$action.StealthKillCharacter";
			Description = "$action.StealthKillCharacterDesc";
			Instruction = "$callToAction.CharacterAdultNotPlayersNotAllies";
			ActionActor = "Character";
			TargetActor = "Character";

			Duration = 0.003;
			Cooldown = 0.75;
			CooldownFamilyWide = true;
			BaseRewardXP = 450;
			PriceFormula = "10000";
			BudgetPot = "Diplomacy";
			BudgetPost = "Fighting";

			DistanceFromTarget = 35;
			DistanceFromTargetMin = 35;
			
			SourceScoreFormula = "Dexterity * 0.25 + Stealth * 0.5";

			TargetScoreFormula = "Perception";

			IsImmediatelyKnownByTarget = false;
			IsAggression = true;
			CanFail = true;
			
			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					Adult = 3;
					Boat = -3;
					OfficeHolder = 1;
					Leader = 1;
					NPC = -2;
					InLoveWithMe = -2;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						Alliance = -3;
						Feud = 2;
						GoodRelationWithMe = -2;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};

			MoralAlignmentShift = 0.5;
			MoralAlignment = MoralAlignment
			{
				Values = array{-1,0,-0.5};
			};
			
			CriticalFactor = 1.0;

			SuccessResult = array
			{
				SpreadEffect // victim is NPC, employee or dynasty character: look for one NPC witness
				{
					ApplyTo = "Source";
					UniqueTag = "KillCharacterRepLossNPC";
					Tags = array{"KillCharacterRepLossNPC"};
					SpreadResult = "MediumRepLossNPCResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "IsConscious", "NotInCombat", "NotFleeing", "hasTag.NPC"};
							TargetScoreFormula = "0";
						}
					}; 
				},
				SpreadEffect // victim is dynasty character: look for a family member of the murdered character
				{
					ApplyTo = "Target";
					UniqueTag = "KillCharacterRepLossDynasty";
					Tags = array{"KillCharacterRepLossDynasty"};
					SpreadResult = "SevereRepLossDynastyResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					UseOwnSourceForAppliedEffects = true; // Effects that are applied to the witness shall be applied directly from the killer (instead of from the victim)
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "MyFamily", "IsConscious", "NotInCombat", "NotFleeing"};
							TargetScoreFormula = "0";
							SourceScoreFormula = "HasFamily && !IsEmployee"; // 0 success chance in case the victim is an NPC or an employee
						}
					}; 
				},
				SpreadEffect // victim is employee: look for a family member of the murdered character
				{
					ApplyTo = "Target";
					UniqueTag = "KillCharacterRepLossEmployee";
					Tags = array{"KillCharacterRepLossEmployee"};
					SpreadResult = "SmallRepLossDynastyResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					UseOwnSourceForAppliedEffects = true; // Effects that are applied to the witness shall be applied directly from the killer (instead of from the victim)
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "MyFamily", "IsConscious", "NotInCombat", "NotFleeing"};
							TargetScoreFormula = "0";
							SourceScoreFormula = "HasFamily && IsEmployee"; // 0 success chance in case the victim is NOT an employee and/or NOT part of a dynasty
						}
					};
				},
				FunctionKill
				{
					ApplyTo = "Target";
					Killer = "Source";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.05;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 4;
					Amount = 0.01;
				},
			};			
			FailureResult = array
			{
				FunctionApplyResults
				{
					ApplyTo = "Target";
					ResultObjectIds = array{"MediumRepLossDynastyResult"};
				};
				SpreadEffect // look for one NPC witness
				{
					ApplyTo = "Target";
					UniqueTag = "KillCharacterRepLossNPC";
					Tags = array{"KillCharacterRepLossNPC"};
					SpreadResult = "SmallRepLossNPCResult";
					Radius = 750.0;
					Duration = 1;
					SpreadChance = 1.0;
					SpreadFrequency = 1;
					SpreadToEveryone = false;
					TickOnce = true;
					UseOwnSourceForAppliedEffects = true; // Effects that are applied to the witness shall be applied directly from the killer (instead of from the victim)
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasTag.NPC"};
							TargetScoreFormula = "0";
							SourceScoreFormula = "HasFamily"; // 0 success chance in case the victim is an NPC, because reputation has been already updated
						}
					};
				},
			};
		};
				
		"HireHenchmen" = G3ActionTemplate //Hire a henchman
		{
			GUIPresent = true;
			OrderIndex = 35;

			ActionClassName = "HireHenchmenAction";
			GUIData = array
			{
				ActionGUIData
				{
					IsBuilding = 1;
					IsCharacter = 0;
					BelongsToOwnFamily = 1;
					FamilyCanHireHenchmen = 1;
					IsControlledByHuman = 1;
					DoesNotHaveTag = "NoRealBuilding";
				},
				ActionGUIData
				{
					BelongsToOwnFamily = 1;
					FamilyCanHireHenchmen = 1;
					IsControlledByHuman = 0;
					DoesNotHaveTag = "NoRealBuilding";
				},
			};

			ShowCombatText = false;
			
			ActionActor = "Family";            

			PriceFormula = "(700 * hasTag.BuffEasy) + (1000 * hasTag.BuffNormal) + (1200 * hasTag.BuffHard) + (1500 * hasTag.BuffImpossible)";

			BudgetPost = "Employees";
			BudgetPot = "Other";
			
			CanFail = false;
			ActionName = "HireHenchmen";
			DisplayName = "$action.HireHenchmenAction";
			Description = "$action.HireHenchmenActionDesc";
			Instruction = "";
			
			MoralAlignmentShift = 0;
			MoralAlignment = MoralAlignment
			{
				Values = array{0, 0, 0};
			};

			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 100;
					ObjectiveTypename = "IncreaseSecurity";
				}
			};
		};		
		
		"FindEvidence" = G3ActionTemplate //Find evidence
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 45;

			ActionClassName = "TalkToNeighborhoodAction";

			GUIData = array
			{
				@base/Henchmen
			};
			UsableBy = array{ "$gui.item.UsableByHenchmen" };

			ActionName = "FindEvidence";
			ActionActor = "Character";
			TargetActor = "Coordinate";
			DisplayName = "$action.FindEvidence";
			Description = "$action.FindEvidenceDesc";
			
			SourceScoreFormula = "Charisma";
			
			Duration = 0.1667; // 2 months
			BaseRewardXP = 80;
			PriceFormula = "200";
			BudgetPot = "Diplomacy";
			CanFail = true;

			MoralAlignmentShift = 0.2;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.3,-0.25,0};
			};
			
			CriticalFactor = 1.0; //no critical
			
			Instruction = "$callToAction.Neighborhood";
			
			DesiredProfiles = array
			{
				TargetProfileNeighborhood
				{
					CloseToActor = 2;
					OnStreet = 3;
					QuarterSurrounding = -3;
					Inhabitated = 3;
				}
			};
			
			SuccessResult = array
			{
				FunctionTransferEvidence
				{
					Giver = "Target";
					Receiver = "Source";
				},
				FunctionTrackObjectiveProgress
				{
					Amount = 20;
					ObjectiveTypename = "IncreaseSecurity";
				}
			};
			
			FailureResult = array
			{
				FunctionUpdateRelationship
				{
					AffectCurrentNeighborhoodToSource = "-10";
				}
			};
		};
		
		"StartHenchmenConquerBuilding" = G3ActionTemplate //Conquer building
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 80;

			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/Henchmen
			};
			UsableBy = array{ "$gui.item.UsableByHenchmen" };

			DisplayName = "$action.ConquerBuilding";
			Description = "$action.ConquerBuildingDesc";
			Instruction = "$callToAction.ResidenceBusinessNotPlayersAllies";
			
			ActionName = "StartHenchmenConquerBuilding";
			ActionActor = "Character";
			TargetActor = "Building";
			
			ShowCombatText = false;
			
			Cooldown = 1;
			PriceFormula = "3000";
			BudgetPot = "Diplomacy";
			
			NeedSkillToPerform = true;

			CanFail = false;
			
			TargetTags = array{"FreemasonsGift", "NoConquer"};
			DesiredProfiles = array
			{
				// for neighborhood
				TargetProfileBuilding
				{
					CityBuilding = -3;
					ResourceProducer = -3;
					ActiveResidence = 1;
					Burning = -3;
					Guarded = -1;
					DynastyMember = -3;
					MatchTargetTags = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -2;
						Feud = 2;
						Alliance = -3;
					};
				},			
			};
	
			MoralAlignmentShift = 0.08;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.4,0,-0.6};
			};

			SuccessResult = array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"HenchmenConquerBuilding"};
				}
			};
		};
		
		"HenchmenConquerBuilding" = G3ActionTemplate //Conquer building
		{
			UICategory = "Fighting";
			ActionClassName = "ConquerBuildingAction";
			ActionName = "HenchmenConquerBuilding";
			DisplayName = "$action.ConquerBuilding";
			Description = "$action.ConquerBuildingDesc";
			ActionActor = "Character";
			TargetActor = "Building";
			
			BaseRewardXP = 276;
			BaseRewardPrestige = 750;
			
			IsAggression = true;
			IsImmediatelyKnownByTarget = true;

			CanFail = false;
			
			// Results are applied from code for 2 reasons:
			// - Some messages and relationship changes need to be applied when the old owner
			//   of the building loses ownership. This is only half-way in the conquering process.
			//   (the second half is the new owner acquiring ownership of the now neutral building)
			// - The results should be applied only once, even if multiple henchmen are executing
			//   the conquer building action at the same time (on the same building).
		};
		
		"PoisonNeighborhood" = G3ActionTemplate //Poison well
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 55;

			ActionClassName = "SimpleExecutionAction";

			GUIData = array
			{
				@base/MainThreeCharacters,
				@base/Henchmen
			};
			UsableBy = array{ "$gui.item.UsableByAdultPartyMembers", "$gui.item.UsableByHenchmen" };

			ActionActor = "Character";
			TargetActor = "Building";
			SourceRun = true;
			PriceFormula = "2500";
			BudgetPot = "Diplomacy";
			Duration = 0.0012;
			Cooldown = 1.0;
			CooldownFamilyWide = true;

			ActionName = "PoisonNeighborhood";
			DisplayName = "$action.PoisonNeighborhood";
			Description = "$action.PoisonNeighborhoodDesc";
			Instruction = "$callToAction.Well";
			
			EnterBuilding = "TryEnter";
			
			SourceScoreFormula = "Intelligence";
			TargetScoreFormula = "1";

			BaseRewardXP = 340;
			
			CanFail = true;
			IsAggression = true;
			IsImmediatelyKnownByTarget = false;
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"dumpdown_liquid", 0, -1, -1};
			};
			
			AnimationProps = array
			{
				PropSpawnDesc { PropNames = array { "antidote/antidote" }; };
			};
		   
			DistanceFromTarget = 55;
		   
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 1;
					IncludedTypes = array{"Well"};
				}
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "PoisonNeighborhood"; },
				};
			};
		
			CriticalFactor = 1.0;
			
			MoralAlignmentShift = 0.7;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.9,-0.9,-0.9};
			};
			
			SuccessResult = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{"SpreadingDisease", "Poison"};
					Duration = 540;
					DisplayGroup = "poison";
					DisplayName = "$action.PoisonNeighborhood";
				},
				FunctionPickRandom
				{
					ResultObjectIds =  array{"PoisonWellSpreadCold", "PoisonWellSpreadCold", "PoisonWellSpreadCold", "PoisonWellSpreadLeprosy", "PoisonWellSpreadLeprosy", "PoisonWellSpreadPlague"};
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
		   
		};
		
//Thief Actions
//----------------------------------------------------
		"PickPocketCoordinate" = G3ActionTemplate //Pickpocketing (with location)
		{
			GUIPresent = false;
			GUIData = array
			{
				@base/OwnFamilyAdults,
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$profession.Thief" };
			
			RequiredBuildings = array
			{
				RequiredBuilding = array { "ThiefHideout", 1 }
			};

			ActionName = "PickPocketCoordinate";
			ActionClassName = "AmbushAction";
			DisplayName = "$PickPocketCoordinate";
			Description = "$PickPocketDesc";
			Instruction = "$callToAction.StreetArea";
			
			ActionActor = "Character";
			TargetActor = "Coordinate";

			AskConfirmationOnCancel = false;
			ReturnAndDropAllOnAutomation = true;
			
			Duration = 0.12;
			ShowCombatText = false;
			CanFail = false;
			
			DesiredProfiles = array
			{
				TargetProfileNeighborhood
				{
					GoodRelationWithMe = -2;
					CloseToActor = 2;
					OnStreet = 3;
					QuarterCity = 3;
				}
			};
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"Survey", -1, -1, -1};
			}; 
			
			// Let the action know that the 'payload' action of the ambush is "PickPocket". 
			// It will then make sure to find a victim that matches the target profiles of "PickPocket"
			MainTemplateName = "PickPocket";
			
			// In the third party profiles, we define ADDITIONAL requirements for valid victims.
			// The victims must fulfill the requirements of "PickPocket" AND (one of) these third party profiles.
			ThirdPartyProfiles = array
			{				
				TargetProfileCharacter
				{
					MaxDistance = 1200;
				};
			};
			
			SuccessResult = array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"PickPocket"};
				}
			};
		};

		"PickPocket" = G3ActionTemplate //Pickpocketing
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 30;
			
			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee in the action bar
				{
					IsCharacter = 1;
					HasProfession = "Thief";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$profession.Thief" };
			
			ActionActor = "Character";
			TargetActor = "Character";

			ActionName = "PickPocket";
			DisplayName = "$PickPocket";
			Description = "$PickPocketDesc";
			Instruction = "$callToAction.CharacterConsciousAndAdult";

			SourceScoreFormula = "4 + Stealth + Dexterity * 1 + Motivation + Source.hasTag.eventbuffQuickChangeArtist * 3";
			TargetScoreFormula = "Perception + Intimidation * 0.5 + Target.hasTag.eventbuffSenseForDanger * 10";

			IsImmediatelyKnownByTarget = false;
			IsAggression = true;
			ReturnAndDropAllOnAutomation = true;
			
			CanFail = true;	
			BaseRewardXP = 56;

			BudgetPot = "Business";
			BudgetPost = "Family";
			
			TargetTags = array{"Alerted"};
			DesiredProfiles = array
			{
				TargetProfileCharacter // human player
				{
					IsSourceHuman = 3;
					Adult = 3;
					Boat = -3;
					CloseToActor = 2;
					MatchTargetTags = -2;
					Employee = 2;
					NPC = 1;
					IsMyVIPGuard = -3;
					FamilyProfile = TargetProfileFamily
					{
						GoodRelationWithMe = -2;
						Feud = 2;
						Alliance = -2;
						Rich = 2;
						MyFamily = -3;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				},
				TargetProfileCharacter // non-human player
				{
					IsSourceHuman = -3;
					Adult = 3;
					Boat = -3;
					MaxDistance = 1500;
					CloseToActor = 2;
					MatchTargetTags = -2;
					Employee = 2;
					NPC = 1;
					IsMyVIPGuard = -3;
					FamilyProfile = TargetProfileFamily
					{
						GoodRelationWithMe = -2;
						Feud = 2;
						Alliance = -3;
						Rich = 2;
						MyFamily = -3;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};

			MoralAlignmentShift = 0.02;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.5,-0.6,-0.2};
			};
			
			CriticalFactor = 0.85;
			
			CriticalSuccessResult = array
			{
				FunctionTransferMoney
				{
					Amount = 170;
					PercentageOfWealthTaken = 0.08;
					MaxTransferred = 350;
					IsDiceDependent = true;
					Giver = "Target";
					Receiver = "Source";
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					Giver = "Target";
					MinAmount = 1;
					MaxAmount = 4;
				},
			};
			
			SuccessResult = array
			{				
				FunctionTransferMoney
				{
					Amount = 100;
					PercentageOfWealthTaken = 0.07;
					MaxTransferred = 200;
					IsDiceDependent = true;
					Giver = "Target";
					Receiver = "Source";
				},
				DisplayEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayGroup = "alarm";
					DisplayName = "$effect.CrimeVictim";
					Duration = 270.0;
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					Giver = "Target";
					MinAmount = 0;
					MaxAmount = 2;
				},
				ModifierEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayName = "$effect.CrimeVictim";
					ActorValue = "Perception";
					Mod = 1.0;
					Duration = 270.0;
					Recover = true;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 8;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 1;
					Amount = 0.01;
				},
			};
			
			FailureResult = array
			{
				DisplayEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayGroup = "alarm";
					DisplayName = "$effect.CrimeVictim";
					Duration = 540.0;
				},
				
				ModifierEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayName = "$effect.CrimeVictim";
					ActorValue = "Perception";
					Mod = 2.0;
					Duration = 540.0;
					Recover = true;
				}
			};
			
			CriticalFailureResult = array
			{
				DisplayEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayGroup = "alarm";
					DisplayName = "$effect.CrimeVictim";
					Duration = 1080.0;
				},
				
				ModifierEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayName = "$effect.CrimeVictim";
					ActorValue = "Perception";
					Mod = 2.0;
					Duration = 1080.0;
					Recover = true;
				},
				
				FunctionUpdateRelationship
				{
					AffectTarget = "-1";
				}
			};
		};
		
		"StealHouse" = G3ActionTemplate //"Break into Building"
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 35;

			ActionClassName = "SimpleExecutionAction";
			
			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee in the action bar
				{
					IsCharacter = 1;
					HasProfession = "Thief";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$profession.Thief" };

			RequiredBuildings = array
			{
				RequiredBuilding = array { "ThiefHideout", 2 }
			};
			
			ActionName = "StealHouse";
			DisplayName = "$action.StealHouse";
			Description = "$action.StealHouseDesc";
			Instruction = "$callToAction.ResidenceBusinessNotPlayersAllies";
			ActionActor = "Character";
			TargetActor = "Building";

			Duration = 0.08; //year
			BaseRewardXP = 100;

			SourceScoreFormula = "2 + Stealth * 0.75 + Dexterity * 0.5 + Motivation + (Source.hasTag.LockPicking*5) + (Source.hasTag.eventbuffQuickChangeArtist) * 3";
			
			TargetScoreFormula = "Level + BuildingSecurity";

			IsImmediatelyKnownByTarget = false;
			IsAggression = true;
			ReturnAndDropAllOnAutomation = true;
			
			CanFail = true;
			
			EnterBuilding = "ForceEnterStealthy";

			TargetTags = array{"Alerted", "FreemasonsGift"};			
			DesiredProfiles = array
			{
			   TargetProfileBuilding
			   {
					ExcludedTypes = array{"Statue", "Stage"};
					ActiveResidence = 2;
					Burning = -3;
					Business = 1;				 
					CloseToActor = 2;
					Guarded = -2;
					CityBuilding = -3;
					ResourceProducer = -3;  
					MatchTargetTags = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -2;
						SocialHigher = 1;
						Alliance = -3;
						Feud = 1;
						Rich = 2;	
					};
			   };
			};
			
			MoralAlignmentShift = 0.08;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.3,-0.6,-0.5};
			};

			CriticalFactor = 0.85;
			
			CriticalSuccessResult = array
			{
				FunctionTransferMoney
				{
					Amount = 250;
					PercentageOfWealthTaken = 0.075;
					MaxTransferred = 400;
					IsDiceDependent = true;
					Giver = "Target";
					Receiver = "Source";
				},
				FunctionTransferEvidence
				{
					Receiver = "Source";
					Giver = "Target";
					IsDiceDependent = false;
					CreateEvidenceOfCurrentAction = false;
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					Giver = "Target";
					MinAmount = 2;
					MaxAmount = 5;
				},
				FunctionSendMessage
				{
					ApplyTo = "Target";
					Description = "PlayerBuildingRobbed";
				},

				DisplayEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayGroup = "alarm";
					DisplayName = "$effect.CrimeVictimBuilding";
					Duration = 30.0;
				},
				ModifierEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayName = "$effect.CrimeVictimBuilding";
					ActorValue = "BuildingSecurity";
					Mod = 1.0;
					Duration = 30.0;
					Recover = true;
				},
				
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 8;
					Amount = 0.01;
				},
			};
			
			SuccessResult = array
			{
				FunctionTransferMoney
				{
					Amount = 120;
					PercentageOfWealthTaken = 0.05;
					MaxTransferred = 250;
					IsDiceDependent = true;
					Giver = "Target";
					Receiver = "Source";
				},
				FunctionTransferEvidence
				{
					Receiver = "Source";
					Giver = "Target";
					IsDiceDependent = true;
					CreateEvidenceOfCurrentAction = false;
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					Giver = "Target";
					MinAmount = 1;
					MaxAmount = 3;
				},

				DisplayEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayGroup = "alarm";
					DisplayName = "$effect.CrimeVictimBuilding";
					Duration = 120.0;
				},
				ModifierEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayName = "$effect.CrimeVictimBuilding";
					ActorValue = "BuildingSecurity";
					Mod = 2.0;
					Duration = 120.0;
					Recover = true;
				},
				FunctionSendMessage
				{
					ApplyTo = "Target";
					Description = "PlayerBuildingRobbed";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 8;
					Amount = 0.01;
				},
			};
			
			FailureResult = array
			{
				DisplayEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayGroup = "alarm";
					DisplayName = "$effect.CrimeVictimBuilding";
					Duration = 270.0;
				},
				ModifierEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayName = "$effect.CrimeVictimBuilding";
					ActorValue = "BuildingSecurity";
					Mod = 2.0;
					Duration = 270.0;
					Recover = true;
				},
				FunctionTransferEvidence
				{
					Receiver = "Source";
					Giver = "Target";
					IsDiceDependent = true;
					CreateEvidenceOfCurrentAction = true;
				},
				FunctionSendMessage
				{
					ApplyTo = "Target";
					Description = "StealHouseFailure";
				}
			};
			
			CriticalFailureResult = array
			{
				DisplayEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayGroup = "alarm";
					DisplayName = "$effect.CrimeVictimBuilding";
					Duration = 540.0;
				},
				ModifierEffect
				{
					Tags = array{"Alerted"};
					ApplyTo = "Target";
					DisplayName = "$effect.CrimeVictimBuilding";
					ActorValue = "BuildingSecurity";
					Mod = 2.0;
					Duration = 540.0;
					Recover = true;
				},
				FunctionTransferEvidence
				{
					Receiver = "Source";
					Giver = "Target";
					IsDiceDependent = false;
					CreateEvidenceOfCurrentAction = true;
				},
				FunctionSendMessage
				{
					ApplyTo = "Target";
					Description = "StealHouseFailure";
				}
			};
			
			OnEndResult = array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{ "ForcedExit" };
				}
			};
		};
		
//Mercenary Actions
//----------------------------------------------------
		"SurveyCrimes" = G3ActionTemplate //Patrol
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 55;

			ActionClassName = "GuardPatrol";
			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee in the action bar
				{
					IsCharacter = 1;
					HasProfession = "Mercenary";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$profession.Lansquenet" };

			RequiredBuildings = array
			{
				RequiredBuilding = array { "GuardPost", 3 }
			};
			
			ShowCombatText = true;
			
			ActionName = "SurveyCrimes";
			DisplayName = "$action.SurveyCrimes";
			Description = "$action.SurveyCrimesDesc";
			Instruction = "$callToAction.Neighborhood";

			ActionActor = "Character";
			TargetActor = "Coordinate";
			
			SourceScoreFormula = "Perception";
 
			BaseRewardXP = 140;

			CanFail = false;

			MoralAlignmentShift = 0.06;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.4,-0.3,0.4};
			};

			Duration = 0.25;
			
			DesiredProfiles = array
			{
				TargetProfileNeighborhood
				{
					Inhabitated = 3;
					Rich = 2;
					WellGuarded = -1;
					OnStreet = 3;
					QuarterCity = 2;
					QuarterVillage = 2;
					QuarterSurrounding = -1;
					CloseToActor = 2;
				}
			};
			
			Roaming = true;
			SourceRun = true;
			
			DetectionRadius = 300.0;
			
			GuardingDetectionRules = DetectionRules
			{
				React = ReactByRules
				{
					ActionsSource = array{"AnyValue"};
					ActionsTarget = array{"AnyValue"};
				};
				Ignore = IgnoreByRules
				{
					ActionsSource = array{"SameDynasty", "AlliedDynasty"};
				};
			};
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionGiveMoney
				{
					ApplyTo = "Self";
					Amount = 450;
					IsDiceDependent = true;
				},
				
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 3;
					Amount = -0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 5;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 6;
					Amount = 0.01;
				},
			};
		};
		
		"Intervene" = G3ActionTemplate //Stand Guard
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 45;

			ActionClassName = "GuardPatrol";
			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee in the action bar
				{
					IsCharacter = 1;
					HasProfession = "Mercenary";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$profession.Lansquenet" };

			RequiredBuildings = array
			{
				RequiredBuilding = array { "GuardPost", 2 }
			};
			
			ShowCombatText = true;
			
			ActionName = "Intervene";
			DisplayName = "$action.Intervene";
			Description = "$action.InterveneDesc";
			Instruction = "$callToAction.Neighborhood";

			ActionActor = "Character";
			TargetActor = "Coordinate";
			
			SourceScoreFormula = "Perception";
			
			Duration = 0.15;
			
			BaseRewardXP = 100;

			CanFail = false;
			
			DesiredProfiles = array
			{
				TargetProfileNeighborhood
				{
					Inhabitated = 3;
					Rich = 2;
					WellGuarded = -1;
					QuarterCity = 2;
					QuarterVillage = 2;
					QuarterSurrounding = -1;
					OnStreet = 3;
					CloseToActor = 2;
				}
			};
			
			MoralAlignmentShift = 0.04;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.3,-0.3,-0.4};
			};

			Roaming = false;
			
			DetectionRadius = 200.0;
			
			GuardingDetectionRules = DetectionRules
			{
				React = ReactByRules
				{
					ActionsSource = array{"AnyValue"};
					ActionsTarget = array{"AnyValue"};
				};
				Ignore = IgnoreByRules
				{
					ActionsSource = array{"SameDynasty", "AlliedDynasty"};
				};
			};
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionGiveMoney
				{
					ApplyTo = "Self";
					Amount = 250;
					IsDiceDependent = true;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ProductType = 3;
					Amount = -0.05;
					ShouldUseCurrentNeighbhorhood = true;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ProductType = 5;
					Amount = 0.02;
					ShouldUseCurrentNeighbhorhood = true;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ProductType = 6;
					Amount = 0.02;
					ShouldUseCurrentNeighbhorhood = true;
				},
			};
		};
		
		"GuardBuilding" = G3ActionTemplate //Guard building
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 46;

			ActionClassName = "GuardBuildingAction";
			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee in the action bar
				{
					IsCharacter = 1;
					HasProfession = "Mercenary";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$profession.Lansquenet" };

			ShowCombatText = false;
			
			ActionName = "GuardBuilding";
			DisplayName = "$action.GuardBuilding";
			Description = "$action.GuardBuildingDesc";
			Instruction = "$callToAction.ResidenceBusiness";
			
			ActionActor = "Character";
			TargetActor = "Building";
			
			CanFail = true;
			
			RestartAfterUnconsciousness = true;
			ResumeProgress = true;

			SourceScoreFormula = "Perception";

			Duration = -1;
			BaseRewardXP = 0;
			
			DesiredProfiles = array
			{                
				TargetProfileBuilding
				{
					ExcludedTypes = array{"Statue", "Stage"};
					CityBuilding = -3;
					ResourceProducer = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 2;
						GoodRelationWithMe = 1;
						Alliance = 1;
						Feud = -3;
					};
				}			
			};

			MoralAlignmentShift = 0.05;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.25,0.25,-0.1};
			};
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 12;
					ObjectiveTypename = "IncreaseSecurity";
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "5";
				}
			};
		};
			
		"CollectProtectionMoney" = G3ActionTemplate //Extort protection money
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 40;

			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee in the action bar
				{
					IsCharacter = 1;
					HasProfession = "Mercenary";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$profession.Lansquenet" };

			RequiredBuildings = array
			{
				RequiredBuilding = array { "GuardPost", 1 }
			};
			
			ActionClassName = "SimpleExecutionAction";
			
			ActionName = "CollectProtectionMoney";
			DisplayName = "$CollectProtectionMoney";
			Description = "$CollectProtectionMoneyDesc";
			Instruction = "$callToAction.BusinessNotPlayers";

			IsAggression = true;
			
			ActionActor = "Character";
			TargetActor = "Building";

			SourceScoreFormula = "Intimidation * 2.5 + Motivation";
			TargetScoreFormula = "BuildingSecurity";
			
			Duration = 0.0416;
			BaseRewardXP = 65;
			
			SourceRun = true;
			
			EnterBuilding = "ForceEnter";
			SuppressBuildingEnterBehavior = true;
			
			TargetTags = array{"ProtectionMoney", "FreemasonsGift"};
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{	
					ExcludedTypes = array{"Statue", "Stage"};
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						Alliance = -3;
						Feud = 1;
						GoodRelationWithMe = -2;
						Rich = 1;
					};
					MatchTargetTags = -3;
					Business = 3;
					CityBuilding = -3;
					ResourceProducer = -3;
					Guarded = -2;
					CloseToActor = 2;
				}				
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;
				
				Profiles = array
				{
					TargetProfileSnapPoint{ Name = "CollectProtectionMoney"; Inside = -3; IsFree = 3; },
				};
				Animations = array
				{
					TargetSnapPointAnimation{ Animation = "Execution_GuardIdle"; },
				};
			};

			MoralAlignmentShift = 0.02;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.6,-0.4,-0.7};
			};

			CriticalFactor = 0.9;
			
			CriticalSuccessResult =  array
			{
				DisplayEffect
				{
					Tags = array{"ProtectionMoney"};
					ApplyTo = "Target";
					Duration = 150;
					DisplayGroup = "protected";
					DisplayName = "$action.ProtectionMoneyPaid";
				},
				FunctionTransferMoney
				{
					Receiver = "Source";
					Giver = "Target";
					Amount = 100;
					PercentageOfWealthTaken = 0.25;
					MaxTransferred = 2000;
					IsDiceDependent = true;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"ProtectionMoney"};
					ActorValue = "BuildingSecurity";
					Mod = 5;
					Duration = 150;
					Recover = true;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.01;
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
			
			SuccessResult =  array
			{
				DisplayEffect
				{
					Tags = array{"ProtectionMoney"};
					ApplyTo = "Target";
					DisplayGroup = "protected";
					Duration = 100;
					DisplayName = "$action.ProtectionMoneyPaid";
				},
				FunctionTransferMoney
				{
					Receiver = "Source";
					Giver = "Target";
					Amount = 90;
					PercentageOfWealthTaken = 0.15;
					MaxTransferred = 150;
					IsDiceDependent = true;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"ProtectionMoney"};
					ActorValue = "BuildingSecurity";
					Mod = 3;
					Duration = 100;
					Recover = true;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-1";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 3;
					Amount = 0.01;
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
			
			FailureResult = array
			{
				DisplayEffect
				{
					Tags = array{"ProtectionMoney"};
					ApplyTo = "Target";
					DisplayGroup = "alarm";
					Duration = 120;
					DisplayName = "$action.ProtectionMoneyNotPaid";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"ProtectionMoney"};
					ActorValue = "Productivity";
					Mod = -0.05;
					Duration = 120;
					Recover = true;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-2";
					AffectCurrentNeighborhoodToSource = "-1";
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
			
			CriticalFailureResult = array
			{
				DisplayEffect
				{
					Tags = array{"ProtectionMoney"};
					ApplyTo = "Target";
					DisplayGroup = "alarm";
					Duration = 180;
					DisplayName = "$action.ProtectionMoneyNotPaid";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"ProtectionMoney"};
					ActorValue = "Productivity";
					Mod = -0.05;
					Duration = 180;
					Recover = true;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-3";
					AffectCurrentNeighborhoodToSource = "-1";
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
		};

//Trade
//----------------------------------------------------
		"TradeMission" = G3ActionTemplate //Trade Mission
		{
			GUIPresent = true;
			UICategory = "Family";
			OrderIndex = 40;
			
			GUIData = array
			{
				ActionGUIData
				{
					IsControlledByHuman = 1; // These settings apply to HUMAN controlled characters
					IsCharacter = 1;
					IsFamilyMember = 1;
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				ActionGUIData
				{
					IsControlledByHuman = 0; // These settings apply to AI controlled characters
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsLeader = 0; // Prevent the AI from sending their leader
					IsEmployee = 0;
					IsFamilyMember = 1;
					IsAdult = 1;
				}
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };
			
			ActionActor = "Character";
			TargetActor = "Building";
			
			ActionClassName = "FarTradeAction";
			ActionName = "TradeMission";
			DisplayName = "$action.TradeMission";
			Description = "$action.TradeMissionDesc";
			Instruction = "$callToAction.SelectNewTradeMarket";
						
			SourceScoreFormula = "Intelligence + BargainingBonus * 0.1 + Luck - BadLuck + Source.hasTag.eventbuffAdventurer";
			TargetScoreFormula = "1 + Source.Intimidation * 0.5"; 
			
			Duration = 0.25;
			Cooldown = 0.33;
			CooldownFamilyWide = true;
			
			PriceFormula = "SocialLevel * ((250 * hasTag.BuffEasy) + (350 * hasTag.BuffNormal) + (450 * hasTag.BuffHard) + (550 * hasTag.BuffImpossible))";
			BudgetPot = "Business";
			BaseRewardXP = 200;
			BaseRewardPrestige = 750;
			
			CanBeCancelled = false;
			
			MoralAlignmentShift = 0.6;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.35,0.25,0.7};
			};
			
			ShowSelectionPrompt = "UseTargetProfile";
			CanPickFromWorld = false;
			
			SelectionPromptCallToAction = "$selectionPrompt.SelectTradeMarket";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoTradeMarkets";
			HideSelectionPromptCancelButton = true;
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					IncludedTypes = array{"trademarket"};
					Accessible = -3;
				}
			};
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{	
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "TradeMissionSuccess";
				}
			};
			
			FailureResult = array
			{
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "TradeMissionFailure";
				},
			};
		};

		"Longshore" = G3ActionTemplate //Send someone on a long-distance journey
		{
			GUIPresent = true;
			UICategory = "Family";
			OrderIndex = 45;
			
			GUIData = array
			{
				ActionGUIData
				{
					IsControlledByHuman = 1; // These settings apply to HUMAN controlled characters
					IsCharacter = 1;
					IsFamilyMember = 1;
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				ActionGUIData
				{
					IsControlledByHuman = 0; // These settings apply to AI controlled characters
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsLeader = 0; // Prevent the AI from sending their leader
					IsHeir = 0; // Prevent the AI from sending their heir
					IsEmployee = 0;
					IsFamilyMember = 1;
					IsAdult = 1;
				}
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };
			
			ActionClassName = "FarTradeAction";
			ActionName = "Longshore";
			ActionActor = "Character";
			DisplayName = "$action.Longshore";
			Description = "$action.LongshoreDesc";
			
			SourceScoreFormula = "Intelligence + BargainingBonus * 0.1 + Luck - BadLuck + Source.hasTag.eventbuffAdventurer";
			TargetScoreFormula = "1 + Source.Intimidation * 0.5"; 
			
			PriceFormula = "SocialLevel * ((500 * hasTag.BuffEasy) + (750 * hasTag.BuffNormal) + (1000 * hasTag.BuffHard) + (1250 * hasTag.BuffImpossible)) + 5000";
			BudgetPot = "Business";
			BaseRewardXP = 300;
			BaseRewardPrestige = 850;
			
			Duration = 1.0;
			Cooldown = 0.33;
			CooldownFamilyWide = true;
			
			CanBeCancelled = false;
			CanFail = true;
			
			MoralAlignmentShift = 0.3;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.7,0.5,0.4};
			};
			
			CriticalFactor = 0.75;
			
			SuccessResult = array
			{	
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"BirthBastard", "InfectWithRandomDisease"};
				};
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 10;
					SpecificItems = array{"Amber", "Brocade", "Ivory", "Pearl", "Porcelain", "Purple"};
				};
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "LongDistanceTravelSuccess";
				},
			};
			
			CriticalSuccessResult = array
			{
				FunctionTransferPrestige
				{
					Receiver = "Source";
					Amount = 100;
				};
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 2;
					MaxAmount = 15;
					SpecificItems = array{"Amber", "Brocade", "Ivory", "Pearl", "Porcelain", "Purple"};
				};
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "LongDistanceTravelSuccess";
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
			
			FailureResult = array
			{
				FunctionTransferPrestige
				{
					Receiver = "Source";
					Amount = 100;
				},
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "LongDistanceTravelFailure";
				},
			};
			
			CriticalFailureResult = array
			{
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "LongDistanceTravelCriticalFailure";
				},
				FunctionKill
				{
					ApplyTo = "Source";
				}
			};
		};
		
		"Longshore2" = G3ActionTemplate //Send someone on a trip overseas
		{
			GUIPresent = true;
			UICategory = "Family";
			OrderIndex = 46;

			GUIData = array
			{
				ActionGUIData
				{
					IsControlledByHuman = 1; // These settings apply to HUMAN controlled characters
					IsCharacter = 1;
					IsFamilyMember = 1;
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				ActionGUIData
				{
					IsControlledByHuman = 0; // These settings apply to AI controlled characters
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsLeader = 0; // Prevent the AI from sending their leader
					IsHeir = 0; // Prevent the AI from sending their heir
					IsEmployee = 0;
					IsFamilyMember = 1;
					IsAdult = 1;
				}
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };
			
			ActionClassName = "FarTradeAction";
			ActionName = "Longshore2";
			ActionActor = "Character";
			DisplayName = "$action.Longshore2";
			Description = "$action.Longshore2Desc";
			
			SourceScoreFormula = "Intelligence * 0.25 + BargainingBonus * 0.05 + Luck - BadLuck + Source.hasTag.eventbuffAdventurer";
			TargetScoreFormula = "1 + Source.Intimidation";
			
			PriceFormula = "SocialLevel * ((550 * hasTag.BuffEasy) + (800 * hasTag.BuffNormal) + (1050 * hasTag.BuffHard) + (1300 * hasTag.BuffImpossible)) + 8000";
			BudgetPot = "Business";
			BaseRewardXP = 500;
			BaseRewardPrestige = 1100;
			
			Duration = 1.5;
			Cooldown = 0.33;
			CooldownFamilyWide = true;
			
			CanBeCancelled = false;
			CanFail = true;
			
			MoralAlignmentShift = 0.3;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.7,0.5,1};
			};
			
			CriticalFactor = 0.65;
			
			SuccessResult = array
			{	
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"BirthBastard", "InfectWithRandomDisease"};
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 7;
					SpecificItems = array{"Amber", "Brocade", "Ivory", "Pearl", "Porcelain"};
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 7;
					SpecificItems = array{"Pepper", "Salt", "Silk", "Tobacco", "Wine", "Purple"};
				},	
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "OverseaTravelSuccess";
				},
			};
			
			CriticalSuccessResult = array
			{
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 3;
					MaxAmount = 12;
					SpecificItems = array{"Amber", "Brocade", "Ivory", "Pearl", "Porcelain"};
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 3;
					MaxAmount = 12;
					SpecificItems = array{"Pepper", "Salt", "Silk", "Tobacco", "Wine", "Purple"};
				},	
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "OverseaTravelSuccess";
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
			
			FailureResult = array
			{
				FunctionTransferPrestige
				{
					Receiver = "Source";
					Amount = 150;
				},
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "OverseaTravelFailure";
				}
			};
			
			CriticalFailureResult = array
			{
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "OverseaTravelCriticalFailure";
				},
				FunctionKill
				{
					ApplyTo = "Source";
				}
			};
		};
		
		"SendCourtierToKing" = G3ActionTemplate //Send to the court of the monarch
		{
			GUIPresent = true;
			UICategory = "Family";
			OrderIndex = 50;

			ActionName = "SendCourtierToKing";
			ActionClassName = "FarTradeAction";
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsLeader = 0;
					IsHeir = 0;
					IsSpouseOfLeader = 0;
					IsEmployee = 0;
					IsFamilyMember = 1;
					MinAge = 5;
					DoesNotHaveTag = "SendToKingAttributes";
				}
			};
			UsableBy = array{ "$qs.charactertype.0" };
			
			SourceScoreFormula = "4 + Source.hasTag.eventbuffAdventurer"; //used for spread effect
			
			DisplayName = "$action.SendCourtierToKing";
			Description = "$action.SendCourtierToKingDesc";
			Instruction = "";
			
			ActionActor = "Character";
			
			PriceFormula = "SocialLevel*(((1500 * hasTag.BuffEasy) + (2000 * hasTag.BuffNormal) + (2500 * hasTag.BuffHard) + (3000 * hasTag.BuffImpossible))-(SocialLevel*25))";

			BudgetPost = "Family";
			BudgetPot = "Diplomacy";
			BaseRewardPrestige = 3000;
			BaseRewardXP = 350;
			Duration = 3;
			
			CanFail = false;

			MoralAlignmentShift = 0.3;
			MoralAlignment = MoralAlignment
			{
				Values = array{1,0.5,0.4};
			};
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				DisplayEffect
				{
					ApplyTo = "Source";
					Tags = array{"SendToKingAttributes"};
					DisplayGroup = "buffed";
					DisplayName = "$effect.VisitedCourt";
				},
				ModifierEffect
				{
					ApplyTo = "Source";
					Tags = array{"SendToKingAttributes"};
					ActorValue = "ReputationBonus";
					Mod = 0.1;
					Recover = true;
				},
				ModifierEffect
				{
					ApplyTo = "Source";
					Tags = array{"SendToKingAttributes"};
					ActorValue = "Charisma";
					Mod = 2;
					Recover = true;
				},
				DisplayEffect
				{
					ApplyTo = "Source";
					Tags = array{"SendToKingReputation"};
					DisplayGroup = "buffed";
					DisplayName = "$effect.rumorPositive";
					Duration = 720;
				},
				SpreadEffect
				{
					ApplyTo = "Target";
					UniqueTag = "RumorSpreadEffect";
					Tags = array{"RumorSpread"};
					SpreadResult = "PositiveRumor";
					Radius = 300.0;
					Duration = 720;
					SpreadChance = 0.5;
					SpreadFrequency = 5;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "NotInCombat", "IsConscious", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.PositiveRumor"};
							TargetScoreFormula = "Intelligence*0.5";
						}
					}; 
				}
			};			
		};

		"DuelInsult" = G3ActionTemplate //Insult
		{
			GUIPresent = true;
			UICategory = "Fighting";
			OrderIndex = 15;
			
			ActionClassName = "SimpleExecutionAction";
			ActionName = "DuelInsult";
			DisplayName = "$action.DuelInsult";
			Description = "$action.DuelInsultDesc";
			Instruction = "$callToAction.CharacterAdultNotPlayersNotAllies";
			
			ActionActor = "Character";
			TargetActor = "Character";
		  
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsFamilyMember = 1;
					IsAdult = 1;
				},
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };
		
			BaseRewardXP = 100;
			
			Cooldown = 0.25;
		
			IsImmediatelyKnownByTarget = true;
			
			CanFail = true;
		
			DestinationsPointOfInterestType = "Fight";
			
			MoralAlignmentShift = 0.09;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.5,-0.5,-0.6};
			};
			
			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					Adult = 3;
					Boat = -3;
					CloseToActor = 1;
					OfficeHolder = 1;
					Leader = -1;
					NPC = -2;
					NPCGuard = -3;
					InLoveWithMe = -2;
					SimilarSocialStandingToMine = 2;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						Alliance = -3;
						Feud = 2;
						GoodRelationWithMe = -2;
						SocialHigher = 1;
						Rich = 1;
						HigherRank = 1;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};
						
			Dialogue = array{ "ACTION", "d.act.DuelInsult"};
		};

		"SendToSchool" = G3ActionTemplate //Send to school
		{
			GUIPresent = true;
			UICategory = "Family";
			OrderIndex = 15;

			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/OwnFamilyKids
			};
			UsableBy = array{ "$characters.Age.Child" };

			CanFail = false;
			
			ActionName = "SendToSchool";
			ActionActor = "Character";
			TargetActor = "Building";
			DisplayName = "$SendToSchool";
			Description = "$SendToSchoolDesc";
			AskConfirmationOnCancel = true;
			Instruction = "$selectionPrompt.SelectSchool";
			
			PriceFormula = "5000";
			BudgetPot = "Business";
			Duration = 2.0f;
			BaseRewardPrestige = 250;
			BaseRewardXP = 750;
			
			MoralAlignmentShift = 0.6;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.5,0.2,0};
			};
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$selectionPrompt.SelectSchool";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoSchools";
			HideSelectionPromptCancelButton = true;
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"School"};
				}
			};
			
			EnterBuilding = "ForceEnter";
			
			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionTrackObjectiveProgress
				{
					Amount = 30;
					ObjectiveTypename = "IncreaseSecurity";
				},
				FunctionPickRandom
				{
					ResultObjectIds =  array{"SchoolStrength", "SchoolPerception", "SchoolIntelligence", "SchoolDexterity", "SchoolCharisma"};
				}
			};
		};

//NPC Actions		
//----------------------------------------------------
		"SitOnBench" = G3ActionTemplate //Sitting around
		{
			GUIPresent = false;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					IsUnlockedAction = -1;
				}
			};
			ActionClassName = "SimpleExecutionAction";
			ActionName = "SitOnBench";
			ActionActor = "Character";
			TargetActor = "Prop";
			CanFail = false;
			SourceRun = false;
			AskConfirmationOnCancel = false;
			ShowCombatText = false;
			EnterBuilding = "TryEnter";
			DisplayName = "$NPC.Sitting";
			Description = "$NPC.SittingDesc";
			DesiredProfiles = array
			{
				TargetProfileProp
				{
					IsSourceHuman = 3;
				};
				TargetProfileProp
				{
					IsSourceHuman = -3;
					CloseToActor = 2;
					MaxDistance = 7500;
				};
			};
			TargetSnapPoint = TargetSnapPoint
			{
				ShouldReserve = false; // Benches are not reserved while characters are walking to them. With reservations, players would not understand why some benches cannot be selected to sit on (because some other character may have already reserved it from far away)
				// Animations are defined by the bench prop in this case
				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "SitOnBench"; },
				};
			};
		};
		
		"ChatWithMarketVendor" = G3ActionTemplate //Chatting with a market vendor
		{
			GUIPresent = false;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					IsUnlockedAction = -1;
				}
			};
			ActionClassName = "SimpleExecutionAction";
			ActionName = "ChatWithMarketVendor";
			IconName = "GoMarket";
			
			ActionActor = "Character";
			TargetActor = "Prop";
			CanFail = false;
			SourceRun = false;
			AskConfirmationOnCancel = false;
			ShowCombatText = false;
			EnterBuilding = "TryEnter";
			DisplayName = "$NPC.Conversation";
			Description = "$NPC.ConversationDesc";
			DesiredProfiles = array
			{
				TargetProfileProp
				{
					CloseToActor = 2;
					MaxDistance = 7500;
				};
			};
			TargetSnapPoint = TargetSnapPoint
			{
				ShouldReserve = false; // Benches are not reserved while characters are walking to them. With reservations, players would not understand why some benches cannot be selected to sit on (because some other character may have already reserved it from far away)
				// Animations are defined by the bench prop in this case
				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "ChatWithMarketVendor"; },
				};
			};
			SuccessResult = array
			{
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCFindRandomSpot"};
				},
			};
		};
		
		"GoToChurchToPray" = G3ActionTemplate //go to a church to pray
		{
			GUIPresent = false;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					IsAdult = 1;
					IsUnlockedAction = -1;
					DoesNotHaveTag = "NoService"; // courted characters should not go to the church
				}
			};
			ActionClassName = "SimpleExecutionAction";
			ActionName = "GoToChurchToPray";
			IconName = "GoToChurchToPray";
			
			ActionActor = "Character";
			TargetActor = "Building";
			
			CanFail = false;
			SourceRun = false;
			AskConfirmationOnCancel = false;
			ShowCombatText = false;
			EnterBuilding = "TryEnter";
			DisplayName = "$NPC.GoToChurchToPray";
			Description = "$NPC.GoToChurchToPrayDesc";

			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					MaxDistance = 7500;
					IncludedTypes = array{"Church", "cathedrale"};
				}
			};
			TargetSnapPoint = TargetSnapPoint
			{
				ShouldReserve = false; // Benches are not reserved while characters are walking to them. With reservations, players would not understand why some benches cannot be selected to sit on (because some other character may have already reserved it from far away)
				// Animations are defined by the bench prop in this case
				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "SitOnBench"; },
				};
			};
			SuccessResult = array
			{
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"Exit"};
				},
			};
		};
	
		"MournDeceasedRelative" = G3ActionTemplate //Mourn deceased relative on a cemetery
		{
			GUIPresent = false;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					IsAdult = 1;
					IsUnlockedAction = -1;
					DoesNotHaveTag = "NoService"; // courted characters should not go to the cemetery
				}
			};
			ActionClassName = "SimpleExecutionAction";
			ActionName = "MournDeceasedRelative";
			IconName = "MournDeceasedRelative";
			
			ActionActor = "Character";
			TargetActor = "Building";
			
			CanFail = false;
			SourceRun = false;
			AskConfirmationOnCancel = false;
			ShowCombatText = false;
			EnterBuilding = "TryEnter";
			DisplayName = "$NPC.MournDeceasedRelative";
			Description = "$NPC.MournDeceasedRelativeDesc";

			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					MaxDistance = 7500;
					IncludedTypes = array{"Cemetery"};
				}
			};
			TargetSnapPoint = TargetSnapPoint
			{
				ShouldReserve = false; // Benches are not reserved while characters are walking to them. With reservations, players would not understand why some benches cannot be selected to sit on (because some other character may have already reserved it from far away)
				// Animations are defined by the bench prop in this case
				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "MournDeceasedRelative"; },
				};
			};
			SuccessResult = array
			{
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"Exit"};
				},
			};
		};
		
		"NPCGoHomeAndSleep" = G3ActionTemplate
		{
			GUIPresent = false;
			GUIData = array
			{
				ActionGUIData
				{
					IsCharacter = 1;
					IsAdult = 1;
					IsUnlockedAction = -1;
					DoesNotHaveTag = "NoService"; // courted characters should not go to bed
				}
			};

			CanFail = false;

			ActionActor = "Character";
			IconName = "Idle";
	
			ActionName = "NPCGoHomeAndSleep";
			DisplayName = "$NPC.Thinking";
			Description = "$NPC.ThinkingDesc";

			ActionClassName = "SimpleExecutionAction";

			InteractionPriority = 0;
			ShowCombatText = false;
			CanFail = false;
			EnterBuilding = "TryEnter";

			CriticalFactor = 1.0;

			SuccessResult = array
			{
				FunctionTriggerAction
				{
					Filter = "(Date % 1.0) > 0.9166 || (Date % 1.0) < 0.25";
					ApplyTo = "Source";
					ActionTarget = "FromTargetProfile";
					Actions = array{"NPCSleep"};
				}
			};
		};
		
		"NPCSleep" = G3ActionTemplate //Go to sleep
		{
			ActionClassName = "SleepAction";
			GUIPresent = false;
			CanFail = false;
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					Residence = 3;
					Burning = -3;
					Home = 3;
				};
			};
			
			ShowCombatText = false;
			AskConfirmationOnCancel = false;
			InterruptForSleep = false; // We don't want the sleep automation to interrupt manual sleep.
			
			ActionActor = "Character";
			TargetActor = "Building";

			IconName = "Sleep";
			ActionName = "NPCSleep";
			DisplayName = "$action.Sleep";
			Description = "$action.SleepDesc";
			
			Cooldown = 0.001; //~1sec
			
			Duration = 0.25;
				
			EnterBuilding = "TryEnter";
			
			TargetSnapPoint = TargetSnapPoint
			{
				Required = false;
				ShouldReserve = false;
				ShouldOccupy = false;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "GoToBed"; },
				};
			};
			
			CriticalFactor = 1.0;

			OnFinishResult = array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"WakeUpAction"};
					CheckSourceProfile = false; // The WakeUpAction checks if the target is asleep. This gets executed after the target has already awoken, so ignore that check here.
				},
			};						
			SuccessResult = array
			{
			};
		};
		
		"NPCTalk" = G3ActionTemplate //Talking
		{
			GUIPresent = false;
			ActionClassName = "NPCTalk";
			ActionName = "NPCTalk";
			Duration = 0.001f;
			SourceRun = false;
			DisplayName = "$NPC.Conversation";
			Description = "$NPC.ConversationDesc";
			
			GUIData = array
			{
				@base/AllNeutralNPCs
			};
			
			ActionActor = "Character";
			TargetActor = "Character";
		
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"talk1", 0, -1, -1};
			}; 

			CustomReceiverAnimationPool = array
			{
				CustomAnimationInfo = array {"listen1", 0, -1, -1};
			};
			
			CanFail = false;
			EnterBuilding = "TryEnter";
		
			DistanceFromTarget = 55;
			DistanceFromTargetMin = 55;
			InteractionPriority = 0;

			// if the second parameter is not specified, a random conversation will start
			Dialogue = array { "NPC_TALK", "" };
		};
		
		"NPCDoNothing" = G3ActionTemplate //Bored
		{
			GUIPresent = false;
			ActionClassName = "NPCDoNothing";
			ActionName = "NPCDoNothing";
			ActionActor = "Character";
			Duration = 0.5f;
			AskConfirmationOnCancel = false;
			SourceRun = false;
			DisplayName = "$NPC.DoNothing";
			Description = "$NPC.DoNothingDesc";
			EnterBuilding = "TryEnter";
			
			GUIData = array
			{
				@base/AllNeutralNPCs
			};
		};
		
		"NPCReprimand" = G3ActionTemplate //On the trail of a criminal
		{
			ActionClassName = "NPCGuardReprimand";
			ActionName = "NPCReprimand";
			DisplayName = "$NPCReprimand";
			Description = "$NPCReprimandDesc";
			ActionActor = "Character";
			CanFail = false;
			GUIPresent = false;
			Duration = 0.005;
			
			GUIData = array
			{
				@base/AllNeutralNPCs
			};
		};
		
		"NPCTowncrier" = G3ActionTemplate //Proclaim
		{
			GUIPresent = false;
			ActionClassName = "NPCTowncrier";
			ActionName = "NPCTowncrier";
			IconName = "TowncrierLifeActions";
			ActionActor = "Character";
			Duration = 0.2f;
			SourceRun = false;
			DisplayName = "$NPC.TownCrier";
			Description = "$NPC.TownCrierDesc";
			
			GUIData = array
			{
				@base/AllNeutralNPCs
			};
			
			CanFail = false;
		};

		"NPCCollectOutstandingOrder" = G3ActionTemplate //Cheering
		{
			ActionClassName = "NPCCollectOutstandingOrder";
			ActionName = "NPCCollectOutstandingOrder";
			ActionActor = "Character";
			CanFail = false;
			EnterBuilding = "TryEnter";

			GUIPresent = false;
			
			GUIData = array
			{
				@base/AllNeutralNPCs
			};
		};
		
		"NPCCheerPointOfInterest" = G3ActionTemplate //Spot someone
		{
			GUIPresent = false;
			ActionClassName = "NPCCheerPointOfInterest";
			ActionName = "NPCCheerPointOfInterest";
			ActionActor = "Character";
			DisplayName = "$NPC.Cheer";
			Description = "$NPC.CheerDesc";
			InteractionPriority = 0;
			
			GUIData = array
			{
				@base/AllNeutralNPCs
			};
	   };

//Rogue Actions		
//----------------------------------------------------
		"MakeEvocation" = G3ActionTemplate //Summoning
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 65;

			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/OwnFamilyAdults
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };

			ActionActor = "Character";
			TargetActor = "Building";

			SourceScoreFormula = "Intelligence + Target.FireProtection*0.5";
			TargetScoreFormula = "3/Level + 2/BuildingSecurity";

			ActionName = "MakeEvocation";
			DisplayName = "$action.MakeEvocation";
			Description = "$action.MakeEvocationDesc";
			Instruction = "$callToAction.PickACemetery";

			Duration = 0.083; //1/12
			Cooldown = 0.0415; //1/24
			BaseRewardXP = 155;
			CanFail = true;
			IsImmediatelyKnownByTarget = false;
			
			MoralAlignmentShift = 0.25;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.9,-0.5,0};
			};
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$callToAction.PickACemetery";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoCemetery";
			HideSelectionPromptCancelButton = true;
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Cemetery"};
				}
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "MakeEvocation"; },
				};
			};
	
			EnterBuilding = "ForceEnter";
			
			CriticalFactor = 0.6;
			
			CriticalSuccessResult = array
			{
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 2;
					MaxAmount = 6;
					SpecificItems = array{"Amber", "Brocade", "Ivory", "Pearl", "Pepper", "Porcelain", "Purple", "Salt", "Silk", "Tobacco", "Wine"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
			
			SuccessResult = array
			{
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 4;
					SpecificItems = array{"Amber", "Brocade", "Ivory", "Pearl", "Pepper", "Porcelain", "Purple", "Salt", "Silk", "Tobacco", "Wine"};
				},
				DisplayEffect
				{
					Tags = array{"MakeEvocationFailed"};
					ApplyTo = "Source";
					Duration = 300;
					DisplayGroup = "alarm";
					DisplayName = "$effect.MakeEvocationRumor";
				},
				FunctionUpdateRelationship
				{
					AffectCurrentNeighborhoodToSource = "-8";
				},
				SpreadEffect
				{
					ApplyTo = "Source";
					UniqueTag = "MakeEvocationFailedEffect";
					Tags = array{"MakeEvocationFailed"};
					SpreadResult = "MakeEvocationRumor";
					Radius = 300.0;
					Duration = 300;
					SpreadChance = 0.5;
					SpreadFrequency = 4;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.MakeEvocationRumor"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
			
			FailureResult = array
			{
				DisplayEffect
				{
					Tags = array{"MakeEvocationFailed"};
					ApplyTo = "Source";
					Duration = 300;
					DisplayGroup = "alarm";
					DisplayName = "$effect.MakeEvocationRumor";
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-8";
				},
				SpreadEffect
				{
					ApplyTo = "Source";
					UniqueTag = "MakeEvocationFailedEffect";
					Tags = array{"MakeEvocationFailed"};
					SpreadResult = "MakeEvocationRumor";
					Radius = 300.0;
					Duration = 300;
					SpreadChance = 0.5;
					SpreadFrequency = 4;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.MakeEvocationRumor"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				}
			};
			
			CriticalFailureResult = array
			{
				DisplayEffect
				{
					Tags = array{"MakeEvocationFailed"};
					ApplyTo = "Source";
					Duration = 300;
					DisplayGroup = "alarm";
					DisplayName = "$effect.MakeEvocationRumor";
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-8";
				},
				SpreadEffect
				{
					ApplyTo = "Source";
					UniqueTag = "MakeEvocationFailedEffect";
					Tags = array{"MakeEvocationFailed"};
					SpreadResult = "MakeEvocationRumor";
					Radius = 300.0;
					Duration = 300;
					SpreadChance = 0.5;
					SpreadFrequency = 4;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.MakeEvocationRumor"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				},
				DisplayEffect
				{
					Tags = array{"EvocationDamage"};
					ApplyTo = "Source";
					Duration = 300;
					DisplayGroup = "sick";
					DisplayName = "$effect.Corrupted";
				},
				ModifierEffect
				{
					ApplyTo = "Source";
					Tags = array{"EvocationDamage"};
					ActorValue = "Health";
					Mod = -20;
				},
				ModifierEffect
				{
					ApplyTo = "Source";
					Tags = array{"EvocationDamage"};
					ActorValue = "Strength";
					Mod = -2;
					Duration = 300;
					Recover = true;
				},
			};
		};

		"PlayDiceGameCoordinate" = G3ActionTemplate // Play a game of dice (with location)
		{
			GUIPresent = false;
			IconName = "PlayDiceGame";
			
			GUIData = array
			{
				@base/OwnFamilyAdults,
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$profession.Thief" };
			
			RequiredBuildings = array
			{
				RequiredBuilding = array { "ThiefHideout", 1 }
			};

			ActionName = "PlayDiceGameCoordinate";
			ActionClassName = "AmbushAction";
			DisplayName = "$PlayDiceGameCoordinate";
			Description = "$PlayDiceGameDesc";
			Instruction = "$callToAction.StreetArea";
			
			ActionActor = "Character";
			TargetActor = "Coordinate";

			AskConfirmationOnCancel = false;
			
			Duration = 0.12;
			ShowCombatText = false;
			CanFail = false;
			
			DesiredProfiles = array
			{
				TargetProfileNeighborhood
				{
					GoodRelationWithMe = -2;
					CloseToActor = 2;
					OnStreet = 3;
					QuarterCity = 3;
				}
			};
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"Survey", -1, -1, -1};
			}; 
			
			// Let the action know that the 'payload' action of the ambush is "PlayDiceGame". 
			// It will then make sure to find a victim that matches the target profiles of "PlayDiceGame"
			MainTemplateName = "PlayDiceGame";
			
			// In the third party profiles, we define ADDITIONAL requirements for valid victims.
			// The victims must fulfill the requirements of "PlayDiceGame" AND (one of) these third party profiles.
			ThirdPartyProfiles = array
			{				
				TargetProfileCharacter
				{
					MaxDistance = 1200;
				};
			};
			
			SuccessResult = array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"PlayDiceGame"};
				}
			};
		};

		"PlayDiceGame" = G3ActionTemplate //Play a game of dice
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 25;

			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee
				{
					IsCharacter = 1;
					HasProfession = "Thief";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$profession.Thief" };
			
			ActionName = "PlayDiceGame";
			DisplayName = "$PlayDiceGame";
			Description = "$PlayDiceGameDesc";
			Instruction = "$callToAction.CharacterConsciousAndAdult";
		
			ActionActor = "Character";
			TargetActor = "Character";
		
			ActionClassName = "SimpleExecutionAction";
			
			SourceRun = true;
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"reap_herbs1", 0, -1, -1};
			}; 

			CustomReceiverAnimationPool = array
			{
				CustomAnimationInfo = array {"reap_herbs1", 0, -1, -1};
			};
			
			SourceScoreFormula = "(25 * (1 + Source.Luck)) + Intelligence + Entertainment + Motivation";
			TargetScoreFormula = "(5 * (1 + Target.Luck)) + Intelligence + (Target.hasTag.eventbuffSenseForDanger) * 10)";
			
			Duration = 0.0125;
			Cooldown = 0.0001;
			BaseRewardXP = 60;
			CanFail = true;
			CriticalFactor = 0.9;
		
			DistanceFromTarget = 100;
			DistanceFromTargetMin = 60;
			InteractionPriority = 0;
			
			TargetTags = array{"Swindled"};
			DesiredProfiles = array
			{
				TargetProfileCharacter // human
				{
					IsSourceHuman = 3;
					Adult = 3;
					Boat = -3;
					CloseToActor = 2;
					MatchTargetTags = -2;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -2;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				},
				TargetProfileCharacter // no human
				{
					IsSourceHuman = -3;
					Adult = 3;
					Boat = -3;
					MaxDistance = 1500;
					CloseToActor = 2;
					MatchTargetTags = -2;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -2;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};
			
			MoralAlignmentShift = 0.02;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.3,-0.25,0};
			};
		
			CriticalSuccessResult =  array
			{
				FunctionTransferMoney
				{
					Amount = 50;
					PercentageOfWealthTaken = 0.05;
					MaxTransferred = 100;
					IsDiceDependent = true;
					Giver = "Target";
					Receiver = "Source";
				},
		
				TagEffect
				{
					Tags = array{"Swindled"};
					ApplyTo = "Target";
					Duration = 270.0;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-1";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 6;
					Amount = -0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 5;
					Amount = -0.01;
				},
			};
			
			SuccessResult =  array
			{
				FunctionTransferMoney
				{
					Amount = 40;
					PercentageOfWealthTaken = 0.03;
					MaxTransferred = 75;
					IsDiceDependent = true;
					Giver = "Target";
					Receiver = "Source";
				},
		
				TagEffect
				{
					Tags = array{"Swindled"};
					ApplyTo = "Target";
					Duration = 270.0;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-2";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 6;
					Amount = -0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 5;
					Amount = -0.01;
				},
			};
			
			FailureResult = array
			{
				FunctionTransferMoney
				{
					Amount = 15;
					IsDiceDependent = true;
					Giver = "Source";
					Receiver = "Target";
				},
				
				TagEffect
				{
					Tags = array{"Swindled"};
					ApplyTo = "Target";
					Duration = 540.0;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 6;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 5;
					Amount = 0.01;
				},
			};
			
			CriticalFailureResult = array
			{
				FunctionTransferMoney
				{
					Amount = 30;
					IsDiceDependent = true;
					Giver = "Source";
					Receiver = "Target";
				},
				TagEffect
				{
					Tags = array{"Swindled"};
					ApplyTo = "Target";
					Duration = 1080.0;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "2";
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 6;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 5;
					Amount = 0.01;
				},
			};
			
		};

		"PalmistryCoordinate" = G3ActionTemplate // Palmistry (with location)
		{
			GUIPresent = false;
			IconName = "Palmistry";
			
			GUIData = array
			{
				@base/OwnFamilyAdults,
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$Robber" };
			
			RequiredBuildings = array
			{
				RequiredBuilding = array { "RobberCamp", 1 }
			};

			ActionName = "PalmistryCoordinate";
			ActionClassName = "AmbushAction";
			DisplayName = "$action.PalmistryCoordinate";
			Description = "$action.Palmistry";
			Instruction = "$callToAction.StreetArea";
			
			ActionActor = "Character";
			TargetActor = "Coordinate";

			AskConfirmationOnCancel = false;
			
			Duration = 0.12;
			ShowCombatText = false;
			CanFail = false;
			
			DesiredProfiles = array
			{
				TargetProfileNeighborhood
				{
					GoodRelationWithMe = -2;
					CloseToActor = 2;
					OnStreet = 3;
				}
			};
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"Survey", -1, -1, -1};
			}; 
			
			// Let the action know that the 'payload' action of the ambush is "Palmistry". 
			// It will then make sure to find a victim that matches the target profiles of "Palmistry"
			MainTemplateName = "Palmistry";
			
			// In the third party profiles, we define ADDITIONAL requirements for valid victims.
			// The victims must fulfill the requirements of "Palmistry" AND (one of) these third party profiles.
			ThirdPartyProfiles = array
			{				
				TargetProfileCharacter
				{
					MaxDistance = 1200;
				};
			};
			
			SuccessResult = array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Palmistry"};
				}
			};
		};
		
		"Palmistry" = G3ActionTemplate //Palmistry
        {
            GUIPresent = true;
            UICategory = "Rogue";
			BudgetPost = "Rogue";
			OrderIndex = 22;

			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee
				{
					IsCharacter = 1;
					HasProfession = "Robber";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$Robber" };
					
			ActionName = "Palmistry";
			DisplayName = "$action.Palmistry";
			Description = "$action.PalmistryDesc";
			Instruction = "$callToAction.CharacterConsciousAndAdult";
		
			ActionActor = "Character";
			TargetActor = "Character";
		
			ActionClassName = "SimpleExecutionAction";
			
			SourceRun = true;
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"idle_readbook1", 0, -1, -1};
			}; 

			CustomReceiverAnimationPool = array
			{
				CustomAnimationInfo = array {"choc_react1", 0, -1, -1};
			};
			
			SourceScoreFormula = "(25 * (1 + Source.Luck)) + Intelligence + Entertainment + Motivation";
			TargetScoreFormula = "(5 * (1 + Target.Luck)) + Intelligence + Target.hasTag.eventbuffSenseForDanger * 10";

			Duration = 0.01;
			Cooldown = 0.0001;
			BaseRewardXP = 25;
			CanFail = true;
			CriticalFactor = 0.9;
		
			DistanceFromTarget = 60;
			DistanceFromTargetMin = 60;
			InteractionPriority = 0;
				
			TargetTags = array{"Swindled"};
			DesiredProfiles = array
			{
				TargetProfileCharacter // human
				{
					IsSourceHuman = 3;
					Adult = 3;
					Boat = -3;
					CloseToActor = 2;
					MatchTargetTags = -2;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -2;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				},
				TargetProfileCharacter // no human
				{
					IsSourceHuman = -3;
					Adult = 3;
					Boat = -3;
					MaxDistance = 1500;
					CloseToActor = 2;
					MatchTargetTags = -2;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -2;
					};
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
				}
			};
			
			MoralAlignmentShift = 0.04;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.25,0.25,0.2};
			};
		
			CriticalSuccessResult =  array
			{
				FunctionTransferMoney
				{
					Amount = 35;
					PercentageOfWealthTaken = 0.025;
					MaxTransferred = 60;
					IsDiceDependent = true;
					Giver = "Target";
					Receiver = "Source";
				},
		
				FunctionUpdateRelationship
				{
					AffectTarget = "2";
				},
				
			};
			
			SuccessResult =  array
			{
				FunctionTransferMoney
				{
					Amount = 15;
					PercentageOfWealthTaken = 0.02;
					MaxTransferred = 50;
					IsDiceDependent = true;
					Giver = "Target";
					Receiver = "Source";
				},

				FunctionUpdateRelationship
				{
					AffectTarget = "1";
				},
				
				TagEffect
				{
					Tags = array{"Swindled"};
					ApplyTo = "Target";
					Duration = 270.0;
				},
			};
			
			FailureResult = array
			{
				TagEffect
				{
					Tags = array{"Swindled"};
					ApplyTo = "Target";
					Duration = 540.0;
				},

				FunctionUpdateRelationship
				{
					AffectTarget = "-1";
				},
			};
			
			CriticalFailureResult = array
			{
				TagEffect
				{
					Tags = array{"Swindled"};
					ApplyTo = "Target";
					Duration = 1080.0;
				},

				FunctionUpdateRelationship
				{
					AffectTarget = "-2";
				},
			};
			
		};

		"InnDiceGame" = G3ActionTemplate //Play a game of dice at an inn
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 30;

			GUIData = array
			{
				@base/OwnFamilyAdults
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };
			
			ActionName = "InnDiceGame";
			DisplayName = "$InnDiceGame";
			Description = "$InnDiceGameDesc";
			Instruction = "$callToAction.InnDiceTable";

			ActionClassName = "SimpleExecutionAction";

			PriceFormula = "50";
			BudgetPot = "Other";

			ActionActor = "Character";
			TargetActor = "Building";
			
			MoralAlignmentShift = 0.02;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.4,-0.2,-0.1};
			};

			TargetTags = array{"DiceTable"};
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Inn"};
					Burning = -3;
					MatchTargetTags = 3;
					DoesNotHaveAnyTags = array{"ForceClosed"};
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
					};
				}
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = false;
				ShouldReserve = false;
				ShouldOccupy = false;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "InnDiceGame"; },
				};
			};
			
			ShowCombatText = true;
			EnterBuilding = "TryEnter";
			SuppressBuildingEnterBehavior = true;

			Cooldown = 0.01;
			Duration = 0.0416664; // 0.000011574 = 1 ingame sec | 0.00069444 = 1 ingame min | 0,0416664 = 1 ingame hour !(1 real sec = 0.016666667 ticks)!
			CanFail = true;
			CriticalFactor = 1.0;

			SourceScoreFormula = "1 + Source.Luck";
			TargetScoreFormula = "1 + (0.2 * Source.BadLuck)";

			SuccessResult =  array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"PayDiceTableFeeNormal"};
				},
				FunctionTransferMoney
				{
					Amount = "100 + (10 * Source.Luck) - Source.BadLuck";
					Giver = "";
					Receiver = "Source";
				},
				ModifierEffect
				{
					ApplyTo = "Source";
					Tags = array{"BadLuck"};
					ActorValue = "BadLuck";
					Mod = 1;
					Duration = 180;
					Recover = true;
				},
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "PlayerWonDiceGameNormal";
				}
			};
			FailureResult =  array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"PayDiceTableFeeNormal"};
				},
				FunctionTransferMoney
				{
					Amount = "75 - (10 * Source.Luck) + Source.BadLuck";
					Giver = "Source";
					Receiver = "";
				},
				ModifierEffect
				{
					ApplyTo = "Source";
					Tags = array{"BadLuck"};
					ActorValue = "BadLuck";
					Mod = 1.5;
					Duration = 360;
					Recover = true;
				},
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "PlayerLostDiceGameNormal";
				}
			};
		};

		"PayDiceTableFeeNormal" = G3ActionTemplate //Pays the bill
		{
			GUIPresent = false;
			CanFail = false;
			
			ActionName = "PayDiceTableFeeNormal";
			DisplayName = "$TheBillPlease";
			Description = "$TheBillPleaseDesc";
			
			BudgetPot = "Other";
			BudgetPost = "Rogue";

			ActionActor = "Character";
			ActionClassName = "SimpleExecutionAction";
			
			ShowCombatText = false;

			CanFail = false;
			CriticalFactor = 1.0;
			EnterBuilding = "TryEnter";
			
			SuccessResult =  array
			{
				FunctionTransferMoney
				{
					Amount = 50;
					Giver = "";
					Receiver = "Target";
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
		};

		"InnDiceGameRisky" = G3ActionTemplate //Play a risky game of dice at an inn
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 31;

			GUIData = array
			{
				@base/OwnFamilyAdults
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };
			
			ActionName = "InnDiceGameRisky";
			DisplayName = "$InnDiceGameRisky";
			Description = "$InnDiceGameRiskyDesc";
			Instruction = "$callToAction.InnDiceTable";

			ActionClassName = "SimpleExecutionAction";

			PriceFormula = "150";
			
			BudgetPot = "Other";

			ActionActor = "Character";
			TargetActor = "Building";
			
			MoralAlignmentShift = 0.02;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.2,-0.4,-0.2};
			};

			TargetTags = array{"DiceTable"};
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Inn"};
					Burning = -3;
					MatchTargetTags = 3;
					DoesNotHaveAnyTags = array{"ForceClosed"};
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
					};
				}
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = false;
				ShouldReserve = false;
				ShouldOccupy = false;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "InnDiceGameRisky"; },
				};
			};
			
			ShowCombatText = true;
			EnterBuilding = "TryEnter";
			SuppressBuildingEnterBehavior = true;

			Cooldown = 0.01;
			Duration = 0.0416664; // 0.000011574 = 1 ingame sec | 0.00069444 = 1 ingame min | 0,0416664 = 1 ingame hour !(1 real sec = 0.016666667 ticks)!
			CanFail = true;
			CriticalFactor = 1.0;

			SourceScoreFormula = "1 + (2 * Source.Luck)";
			TargetScoreFormula = "1 + (0.25 * Source.BadLuck)";

			SuccessResult =  array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"PayDiceTableFeeRisky"};
				},
				FunctionTransferMoney
				{
					Amount = "1000 + (100 * Source.Luck) - (10 * Source.BadLuck)";
					Giver = "";
					Receiver = "Source";
				},
				ModifierEffect
				{
					ApplyTo = "Source";
					Tags = array{"BadLuck"};
					ActorValue = "BadLuck";
					Mod = 1;
					Duration = 180;
					Recover = true;
				},
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "PlayerWonDiceGameRisky";
				}
			};
			FailureResult =  array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"PayDiceTableFeeRisky"};
				},
				FunctionTransferMoney
				{
					Amount = "750 - (100 * Source.Luck) + (50 * Source.BadLuck)";
					Giver = "Source";
					Receiver = "";
				},
				ModifierEffect
				{
					ApplyTo = "Source";
					Tags = array{"BadLuck"};
					ActorValue = "BadLuck";
					Mod = 1.5;
					Duration = 360;
					Recover = true;
				},
				FunctionSendMessage
				{
					ApplyTo = "Source";
					Description = "PlayerLostDiceGameRisky";
				}
			};
		};
		
		"PayDiceTableFeeRisky" = G3ActionTemplate //Pays the bill
		{
			GUIPresent = false;
			CanFail = false;
			
			ActionName = "PayDiceTableFeeRisky";
			DisplayName = "$TheBillPlease";
			Description = "$TheBillPleaseDesc";

			ActionActor = "Character";
			ActionClassName = "SimpleExecutionAction";
			
			ShowCombatText = false;

			CanFail = false;
			CriticalFactor = 1.0;
			EnterBuilding = "TryEnter";
			
			BudgetPot = "Other";
			BudgetPost = "Rogue";
			
			SuccessResult =  array
			{
				FunctionTransferMoney
				{
					Amount = 150;
					Giver = "";
					Receiver = "Target";
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
		};
					
		"PlunderGraves" = G3ActionTemplate //Plunder graves
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 10;

			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/OwnFamilyAdults
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };

			ActionActor = "Character";
			TargetActor = "Building";

			SourceScoreFormula = "1 + Intelligence + Target.FireProtection*0.5";
			TargetScoreFormula = "3/Level + 2/BuildingSecurity";

			ActionName = "PlunderGraves";
			DisplayName = "$action.PlunderGraves";
			Description = "$action.PlunderGravesDesc";
			Instruction = "$callToAction.PickACemetery";

			Duration = 0.0415; //1/24
			Cooldown = 0.0415; //1/24
			BaseRewardXP = 85;
			CanFail = true;
			IsImmediatelyKnownByTarget = false;
			
			MoralAlignmentShift = 0.05;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.6,-0.5,-0.3};
			};
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$callToAction.PickACemetery";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoCemetery";
			HideSelectionPromptCancelButton = true;
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Cemetery"};
				}
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "PlunderGraves"; },
				};
			};
			
			EnterBuilding = "ForceEnter";

			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"summoning", 0, -1, -1};
			};
			
			CriticalFactor = 0.9;
			
			CriticalSuccessResult = array
			{
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 1;
					SpecificItems = array{"Obligation", "Purse", "GemRing", "SilverRing", "GoldChain", "Rapier", "RubinStaff", "Pistol", "Diamond", "StoneSoldier", "Platemail"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
				FunctionTriggerAction
				{
					Filter = "IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
			
			SuccessResult = array
			{
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 1;
					SpecificItems = array{"Obligation", "Purse", "Torch", "Dagger", "BoneBracelet", "OakwoodRing", "SlateBoard", "SpinningTop", "Shield", "LeatherGloves", "WalkingStick"};
				},
				DisplayEffect
				{
					Tags = array{"MakeEvocationFailed"};
					ApplyTo = "Source";
					Duration = 300;
					DisplayGroup = "alarm";
					DisplayName = "$effect.MakeEvocationRumor";
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-8";
				},
				SpreadEffect
				{
					ApplyTo = "Source";
					UniqueTag = "MakeEvocationFailedEffect";
					Tags = array{"MakeEvocationFailed"};
					SpreadResult = "MakeEvocationRumor";
					Radius = 300.0;
					Duration = 300;
					SpreadChance = 0.5;
					SpreadFrequency = 4;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.MakeEvocationRumor"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
				FunctionTriggerAction
				{
					Filter = "IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
			
			FailureResult = array
			{
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 2;
					MaxAmount = 5;
					SpecificItems = array{"Bone"};
				},
				DisplayEffect
				{
					Tags = array{"MakeEvocationFailed"};
					ApplyTo = "Source";
					Duration = 300;
					DisplayGroup = "alarm";
					DisplayName = "$effect.MakeEvocationRumor";
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-8";
				},
				SpreadEffect
				{
					ApplyTo = "Source";
					UniqueTag = "MakeEvocationFailedEffect";
					Tags = array{"MakeEvocationFailed"};
					SpreadResult = "MakeEvocationRumor";
					Radius = 300.0;
					Duration = 300;
					SpreadChance = 0.5;
					SpreadFrequency = 4;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.MakeEvocationRumor"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
				FunctionTriggerAction
				{
					Filter = "IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
			
			CriticalFailureResult = array
			{
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 1;
					SpecificItems = array{"Remains"};
				},
				DisplayEffect
				{
					Tags = array{"MakeEvocationFailed"};
					ApplyTo = "Source";
					Duration = 300;
					DisplayGroup = "alarm";
					DisplayName = "$effect.MakeEvocationRumor";
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-8";
				},
				SpreadEffect
				{
					ApplyTo = "Source";
					UniqueTag = "MakeEvocationFailedEffect";
					Tags = array{"MakeEvocationFailed"};
					SpreadResult = "MakeEvocationRumor";
					Radius = 300.0;
					Duration = 300;
					SpreadChance = 0.5;
					SpreadFrequency = 4;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.MakeEvocationRumor"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				},
				DisplayEffect
				{
					Tags = array{"EvocationDamage"};
					ApplyTo = "Source";
					Duration = 300;
					DisplayGroup = "sick";
					DisplayName = "$effect.Corrupted";
				},
				ModifierEffect
				{
					ApplyTo = "Source";
					Tags = array{"EvocationDamage"};
					ActorValue = "Health";
					Mod = -20;
				},
				ModifierEffect
				{
					ApplyTo = "Source";
					Tags = array{"EvocationDamage"};
					ActorValue = "Strength";
					Mod = -2;
					Duration = 300;
					Recover = true;
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"NPCDeleteRemains"};
				},
				FunctionTriggerAction
				{
					Filter = "IsControlledByHuman";
					ApplyTo = "Source";
					Actions = array{"Exit"};
				}
			};
		};
		
//Smuggler Actions		
//----------------------------------------------------
		"LureIntoRumDen" = G3ActionTemplate //Lure people into your rum den
		{
			UICategory = "Rogue";
			GUIPresent = true;
			OrderIndex = 75;
			GUIData = array
			{
				ActionGUIData // Employee
				{
					IsCharacter = 1;
					IsAdult = 1;
					IsEmployee = 1;
					IsTransporter = 0;
					BelongsToOwnFamily = 1;
					Filter = "Workplace.hasTag.Smuggler";
				},
				ActionGUIData // Employee
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					HasProfession = "Smuggler";
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$profession.Smuggler" };

			RequiredBuildings = array
			{
				RequiredBuilding = array { "Smuggler", 1 }
			};
			
			ActionName = "LureIntoRumDen";
			DisplayName = "$action.LureIntoRumDen";
			Description = "$action.LureIntoRumDenDesc";
			Instruction = "$callToAction.CharacterAdultNotOwnDynasty";
			ActionClassName = "SimpleExecutionAction";
			
			ActionActor = "Character";
			TargetActor = "Character";

			Duration = 0.0; // Design decided that this action should be instant with no animation
			BaseRewardXP = 25;

			SourceScoreFormula = "20 + Charisma + Stealth * 0.3 + Motivation";
			TargetScoreFormula = "Perception + Intelligence";

			CanFail = true;	
			
			MoralAlignmentShift = 0.05;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.9,-0.5,0};
			};
 
			TargetTags = array{"Towncrier", "TargetOfLureIntoRumDen", "LuredToSmuggler"};
			DesiredProfiles = array
			{
				TargetProfileCharacter
				{
					IsSourceHuman = 3;
					Adult = 3;
					NPC = 3;
					CloseToActor = 2;
					Boat = -3;
					Producer = -3;
					Transporter = -3;
					Henchman = -3;
					MatchTargetTags = -3;
					Employee = -3;
					NPCGuard = -3;
					IsMyVIPGuard = -3;
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
					
					EvaluateWhileInProgress = false;
				},
				TargetProfileCharacter
				{
					IsSourceHuman = 3;
					Adult = 3;
					NPC = 3;
					CloseToActor = 2;
					Boat = -3;
					Producer = -3;
					Transporter = -3;
					Henchman = -3;
					Employee = -3;
					NPCGuard = -3;
					IsMyVIPGuard = -3;
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
					
					EvaluateByDefault = false;
					EvaluateWhileInProgress = true;
				},
				TargetProfileCharacter
				{
					IsSourceHuman = -3;
					Adult = 3;
					NPC = 3;
					CloseToActor = 2;
					MaxDistance = 7500;
					Boat = -3;
					Producer = -3;
					Transporter = -3;
					Henchman = -3;
					MatchTargetTags = -3;
					Employee = -3;
					NPCGuard = -3;
					IsMyVIPGuard = -3;
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
					
					EvaluateWhileInProgress = false;
				},
				TargetProfileCharacter
				{
					IsSourceHuman = -3;
					Adult = 3;
					NPC = 3;
					CloseToActor = 2;
					MaxDistance = 7500;
					Boat = -3;
					Producer = -3;
					Transporter = -3;
					Henchman = -3;
					Employee = -3;
					NPCGuard = -3;
					IsMyVIPGuard = -3;
					CurrentBuildingProfiles = array
					{
						TargetProfileBuilding // somewhere in the world
						{
							Exists = -3;
						},
					};
					
					EvaluateByDefault = false;
					EvaluateWhileInProgress = true;
				},
			};

			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"talk1", 0, -1, -1}; // SoundCategory, Sound Id, Sound sub id
			};
			CustomReceiverAnimationPool = array
			{
				CustomAnimationInfo = array {"choc_react1", 0, -1, -1};
			};
			
			AnimationProps = array
			{
				PropSpawnDesc { PropNames = array { "jug/jug" }; };
			};

			Dialogue = array {"ACTION", "d.act.LureIntoRumDen"}; // Category, id			

			OnStartResult = array
			{
				TagEffect
				{
					Tags = array{"TargetOfLureIntoRumDen"};
				},
			};
			OnEndResult = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					MatchAny = true;
					Tags = array {"TargetOfLureIntoRumDen"};
				},
			};
			
			SuccessResult = array
			{
				FunctionTransferMoney
				{
					Filter = "!Source.Workplace.hasTag.ServingCustomers";
					Giver = "Target";
					Receiver = "Source";
					Amount = "(Target.SocialCaste + 2) * 4";
				},
				FunctionTransferMoney
				{
					Filter = "Source.Workplace.hasTag.ServingCustomers";
					Giver = "Target";
					Receiver = "Source";
					Amount = "(Target.SocialCaste + 1) * 3";
				},
				TagEffect
				{
					Filter = "Source.Workplace.hasTag.ServingCustomers";
					ApplyTo = "Target";
					Tags = array{"LuredToSmuggler"};
					Duration = 0.25;
				},
				FunctionTriggerAction
				{
					Filter = "Source.Workplace.hasTag.ServingCustomers";
					ApplyTo = "Target";
					Actions = array{"GetSpeakeasyService"};
					ActionTarget = "Source.Workplace";
				}
			};
			FailureResult = array
			{

			};
		};

		"SmuggleRum" = G3ActionTemplate //Smuggle rum
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 76;

			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee in the action bar
				{
					IsCharacter = 1;
					HasProfession = "Smuggler";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$profession.Smuggler" };

			RequiredBuildings = array
			{
				RequiredBuilding = array { "Smuggler", 1 }
			};

			ActionActor = "Character";
			TargetActor = "Building";

			SourceScoreFormula = "Source.Stealth * 0.25 + Source.DoesHaveTag.SmugglerBuff1 + Source.DoesHaveTag.SmugglerBuff2 + Source.DoesHaveTag.SmugglerBuff3";
			TargetScoreFormula = "1";

			ActionName = "SmuggleRum";
			DisplayName = "$action.SmuggleRum";
			Description = "$action.SmuggleRumDesc";
			Instruction = "$callToAction.BuildingSmuggle";

			Duration = 0.04125; //1/12
			Cooldown = 0.0; //1/24
			BaseRewardXP = 25;

			CanFail = true;
			ShowCombatText = false;
			
			MoralAlignmentShift = 0.06;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.5,-0.2,0.5};
			};
			
			ReturnAndDropAllOnAutomation = true;
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$callToAction.BuildingSmuggle";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoBuildingSmuggle";
			HideSelectionPromptCancelButton = true;
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Arsenal", "Port"};
				}
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;
				
				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "Smuggle"; Inside = -3; IsFree = 3; },
				};
			};
			
			EnterBuilding = "TryEnter";
			SuppressBuildingEnterBehavior = true;

			CriticalFactor = 1.0;
			
			SuccessResult = array
			{
				FunctionTransferMoney
				{
					Amount = 15;
					Giver = "Source";
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 2;
					MaxAmount = 4;
					SpecificItems = array{"Rum"};
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 0;
					MaxAmount = 1;
					SpecificItems = array{"Juice", "Cider", "RoseWater", "Alcohol"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman && !IsEmployee";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
			
			FailureResult = array
			{
				FunctionTransferMoney
				{
					Amount = 10;
					Giver = "Source";
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 1;
					SpecificItems = array{"Rum"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman && !IsEmployee";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
		};
		
		"Smuggle" = G3ActionTemplate //Smuggle goods
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 77;

			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee in the action bar
				{
					IsCharacter = 1;
					HasProfession = "Smuggler";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$profession.Smuggler" };

			RequiredBuildings = array
			{
				RequiredBuilding = array { "Smuggler", 2 }
			};

			ActionActor = "Character";
			TargetActor = "Building";

			SourceScoreFormula = "Source.Stealth * 0.2 + Source.DoesHaveTag.SmugglerBuff1 + Source.DoesHaveTag.SmugglerBuff2 + Source.DoesHaveTag.SmugglerBuff3";
			TargetScoreFormula = "1";

			ActionName = "Smuggle";
			DisplayName = "$action.Smuggle";
			Description = "$action.SmuggleDesc";
			Instruction = "$callToAction.BuildingSmuggle";

			Duration = 0.0425; //1/24
			Cooldown = 0.0;
			BaseRewardXP = 50;

			CanFail = true;
			ShowCombatText = false;
			
			MoralAlignmentShift = 0.07;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.8,0,0};
			};
			
			ReturnAndDropAllOnAutomation = true;
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$callToAction.BuildingSmuggle";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoBuildingSmuggle";
			HideSelectionPromptCancelButton = true;
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Arsenal", "Port"};
				}
			};
			
			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;
				
				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "Smuggle"; Inside = -3; IsFree = 3; },
				};
			};
			
			EnterBuilding = "TryEnter";
			SuppressBuildingEnterBehavior = true;
			
			CriticalFactor = 0.985;
			
			CriticalSuccessResult = array
			{
				FunctionTransferMoney
				{
					Amount = 30;
					Giver = "Source";
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 1;
					SpecificItems = array{"Poem", "PestAway", "Gingerbread", "Painting", "GoldChain", "Rapier", "ShortSword"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman && !IsEmployee";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
			
			SuccessResult = array
			{
				FunctionTransferMoney
				{
					Amount = 20;
					Giver = "Source";
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 1;
					SpecificItems = array{"Cider", "WoodenShield", "RoseWater", "MuralPainting", "WalkingStick", "EndurenceDrink"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman && !IsEmployee";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
			
			FailureResult = array
			{
				FunctionTransferMoney
				{
					Amount = 10;
					Giver = "Source";
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 2;
					SpecificItems = array{"Iron", "Silver", "BoneDust", "JasmineOil", "Wheat", "Nails", "Leather", "Parchment"};
				},
			};
			
			CriticalFailureResult = array
			{
				FunctionKill
				{
					ApplyTo = "Source";
				}
			};
		};

		"Contraband" = G3ActionTemplate //Contraband trade
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 78;

			ActionClassName = "SimpleExecutionAction";
			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee in the action bar
				{
					IsCharacter = 1;
					HasProfession = "Smuggler";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$profession.Smuggler" };

			RequiredBuildings = array
			{
				RequiredBuilding = array { "Smuggler", 3 }
			};

			ActionActor = "Character";
			TargetActor = "Building";

			SourceScoreFormula = "Source.Stealth * 0.2 + Source.DoesHaveTag.SmugglerBuff1 + Source.DoesHaveTag.SmugglerBuff2 + Source.DoesHaveTag.SmugglerBuff3";
			TargetScoreFormula = "1";

			ActionName = "Contraband";
			DisplayName = "$action.Contraband";
			Description = "$action.ContrabandDesc";
			Instruction = "$callToAction.BuildingSmuggle";

			Duration = 0.12425; //1/12
			Cooldown = 0.0; //1/24
			BaseRewardXP = 66;

			CanFail = true;
			ShowCombatText = false;
			
			ReturnAndDropAllOnAutomation = true;
			
			MoralAlignmentShift = 0.06;
			MoralAlignment = MoralAlignment
			{
				Values = array{-0.4,-0.2,0};
			};
			
			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$callToAction.BuildingSmuggle";
			SelectionPromptNoTargetMessage = "$selectionPrompt.NoBuildingSmuggle";
			HideSelectionPromptCancelButton = true;
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Arsenal", "Port"};
				}
			};
			
			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;
				
				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "Smuggle"; Inside = -3; IsFree = 3; },
				};
			};
			
			EnterBuilding = "TryEnter";
			SuppressBuildingEnterBehavior = true;
			
			CriticalFactor = 0.975;
			
			CriticalSuccessResult = array
			{
				FunctionTransferMoney
				{
					Amount = 120;
					Giver = "Source";
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 1;
//					SpecificItems = array{"Amber", "Amber", "Salt", "Salt", "Wine", "Wine", "Wine", "Tobacco", "Tobacco", "Pepper", "Pepper", "Brocade", "Ivory", "Pearl", "Porcelain", "Porcelain", "Porcelain", "Purple", "Silk"};
					SpecificItems = array{"Amber", "Salt", "Wine", "Tobacco", "Pepper", "Brocade", "Ivory", "Pearl", "Porcelain", "Purple", "Silk"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman && !IsEmployee";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
			
			SuccessResult = array
			{
				FunctionTransferMoney
				{
					Amount = 70;
					Giver = "Source";
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 1;
					MaxAmount = 2;
					SpecificItems = array{"Wine", "Salt", "Amber", "Cider", "WoodenShield", "RoseWater", "MuralPainting", "WalkingStick", "EndurenceDrink"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman && !IsEmployee";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
			
			FailureResult = array
			{
				FunctionTransferMoney
				{
					Amount = 25;
					Giver = "Source";
				},
				FunctionTransferItems
				{
					Receiver = "Source";
					MinAmount = 4;
					MaxAmount = 6;
					SpecificItems = array{"Iron", "Silver", "BoneDust", "JasmineOil", "Wheat", "Nails", "Leather", "Parchment"};
				},
				FunctionTriggerAction
				{
					Filter = "!IsControlledByHuman && !IsEmployee";
					ApplyTo = "Source";
					Actions = array{"NPCSellAllAtMarketpace"};
				},
			};
			
			CriticalFailureResult = array
			{
				FunctionKill
				{
					ApplyTo = "Source";
				}
			};
		};
		
//Gleeman Actions		
//----------------------------------------------------
		"PlayMusic" = G3ActionTemplate //Play music
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 15;
			
			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee in the action bar
				{
					IsCharacter = 1;
					HasProfession = "Gleeman";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$profession.Gleeman" };

			RequiredBuildings = array
			{
				RequiredBuilding = array { "Gleeman", 1 }
			};
			
			ActionName = "PlayMusic";
			DisplayName = "$PlayMusic";
			Description = "$PlayMusicDesc";
			Instruction = "$callToAction.Neighborhood";

			ActionActor = "Character";
			TargetActor = "Coordinate";

			ActionClassName = "SimpleExecutionAction";
			DestinationsPointOfInterestType = "PlayMusic";

			SourceScoreFormula = "Entertainment * 2 + (Source.hasTag.eventbuffQuickChangeArtist) * 2";
			Duration = 0.0385; //2 weeks
			BaseRewardXP = 30;
			CanFail = false;
			CriticalFactor = 1.0;
			ShowCombatText = false;
						
			MoralAlignmentShift = 0.05;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.25,0.25,0.3};
			};

			DesiredProfiles = array
			{
				TargetProfileNeighborhood
				{
					Rich = 1;
					GoodRelationWithMe = -1;
					QuarterCity = 1;
					Inhabitated = 3;
					CloseToActor = 2;
					OnStreet = 3;
					OnMainStreet = 2;
					QuarterSurrounding = -3;
				}
			};
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"gleeman_shawm", 0, -1, -1};
				CustomAnimationInfo = array {"gleeman_fiddle", 0, -1, -1};
				CustomAnimationInfo = array {"gleeman_drum", 0, -1, -1};
				CustomAnimationInfo = array {"gleeman_bagpipe", 0, -1, -1};
				CustomAnimationInfo = array {"gleeman_fiddle2", 0, -1, -1};
				CustomAnimationInfo = array {"gleeman_drum2", 0, -1, -1};
			}; 
			
			SuccessResult =  array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"PlayMusicOver"};
				},

				SpreadEffect
				{
					ApplyTo = "Self";
					UniqueTag = "PublicEntertainment";
					Tags = array{"PublicEntertainment"};
					SpreadResult = "PublicEntertainmentResult";
					Radius = 300.0;
					Duration = 1;
					SpreadChance = 1;
					SpreadToEveryone = true;
					TickOnce = true;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard"};
							TargetScoreFormula = "Intelligence*0.5";
						}
					}; 
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 2;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 5;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 6;
					Amount = 0.01;
				}
			};
		};

		"PlayMusicOver" = G3ActionTemplate //End of the performance
		{
			GUIPresent = false;
			
			ActionName = "PlayMusicOver";
			DisplayName = "$FinaleOfShow";
			Description = "$FinaleOfShowDesc";
			
			ActionActor = "Character";
			ActionClassName = "SimpleExecutionAction";
			
			ShowCombatText = true;

			SourceScoreFormula = "Dexterity + Entertainment + Motivation";
			TargetScoreFormula = "2";

			CanFail = true;
			CriticalFactor = 0.95;
			BudgetPost = "Rogue";

			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"Curtsy", 0, -1, -1};
			};
			
			CriticalSuccessResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "45 + (Source.Entertainment * 0.75)";
					MaxTransferred = 75;
				},
				FunctionUpdateRelationship
				{
					ApplyTo = "Source";
					AffectCurrentNeighborhoodToSource = "1";
				},
				VisualEffect
				{
					ApplyTo = "Source";
					VisualName = "Compliment";
					Tags = array{"PlayMusicOver"};
					Duration = 2;
				}
			};
			SuccessResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "27 + (Source.Entertainment * 0.5)";
					MaxTransferred = 45;
				}
			};
			FailureResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "14 + (Source.Entertainment * 0.2)";
					MaxTransferred = 20;
				}
			};
			FailureResult =  array
			{
				FunctionUpdateRelationship
				{
					ApplyTo = "Source";
					AffectCurrentNeighborhoodToSource = "-1";
				},
				VisualEffect
				{
					ApplyTo = "Source";
					VisualName = "Insulted";
					Tags = array{"PlayMusicOver"};
					Duration = 2;
				}
			};
		};
		
		"PlayMusicOnStage" = G3ActionTemplate //Play music on a rostrum
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 16;
			
			GUIData = array
			{
				@base/OwnFamilyAdults,
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };
			
			ActionClassName = "SimpleExecutionAction";
			
			ActionName = "PlayMusicOnStage";
			DisplayName = "$PlayMusicOnStage";
			Description = "$PlayMusicDesc";
			Instruction = "$callToAction.OwnStage";

			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$callToAction.OwnStage";
			SelectionPromptNoTargetMessage = "$callToAction.OwnStage.PromptNoTarget";

			ActionActor = "Character";
			TargetActor = "Building";

			TargetTags = array{"Occupied"};
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Stage"};
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
					MatchTargetTags = -3;
					
					EvaluateWhileInProgress = false;
				},
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Stage"};
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};

					EvaluateByDefault = false;
					EvaluateWhileInProgress = true;
				},
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "PlayMusicOnStage"; },
				};
			};
	
			BaseRewardXP = 30;

			DestinationsPointOfInterestType = "PlayMusic";

			EnterBuilding = "ForceEnter";

			SourceScoreFormula = "Entertainment * 2";
			Duration = 0.0385; //2 weeks

			CanFail = false;
			CriticalFactor = 1.0;
			ShowCombatText = false;
						
			MoralAlignmentShift = 0.05;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.25,0.4,0.1};
			};
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"gleeman_shawm", 0, -1, -1};
				CustomAnimationInfo = array {"gleeman_fiddle", 0, -1, -1};
				CustomAnimationInfo = array {"gleeman_drum", 0, -1, -1};
				CustomAnimationInfo = array {"gleeman_bagpipe", 0, -1, -1};
				CustomAnimationInfo = array {"gleeman_fiddle2", 0, -1, -1};
				CustomAnimationInfo = array {"gleeman_drum2", 0, -1, -1};
			}; 

			OnStartResult = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{"Occupied"};
					DisplayGroup = "closed";
					Duration = 0.0;
					DisplayName = "$effect.occupied";
				},
			};
			OnEndResult = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					MatchAny = true;
					Tags = array {"Occupied"};
				},
			};
	
			SuccessResult =  array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"PlayMusicOnStageOver"};
				},
				SpreadEffect
				{
					ApplyTo = "Self";
					UniqueTag = "PublicEntertainment";
					Tags = array{"PublicEntertainment"};
					SpreadResult = "PublicEntertainmentResult";
					Radius = 600.0;
					Duration = 1;
					SpreadChance = 1;
					SpreadToEveryone = true;
					TickOnce = true;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				},
				FunctionAffectNeeds
				{
					ProductType = 2;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ProductType = 5;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ProductType = 6;
					Amount = 0.01;
				}
			};
		};
		
		"PlayMusicOnStageOver" = G3ActionTemplate //End of the performance
		{
			GUIPresent = false;
			
			ActionName = "PlayMusicOnStageOver";
			DisplayName = "$FinaleOfShow";
			Description = "$FinaleOfShowDesc";
			
			ActionActor = "Character";
			TargetActor = "Building";
			ActionClassName = "SimpleExecutionAction";

			EnterBuilding = "TryEnter";

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "PlayMusicOnStageOver"; },
				};
			};
			
			ShowCombatText = true;

			SourceScoreFormula = "Dexterity + Entertainment + Motivation";
			TargetScoreFormula = "1";

			CanFail = true;
			CriticalFactor = 0.95;
			BudgetPost = "Rogue";
			
			CriticalSuccessResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "45 + (Source.Entertainment * 0.75)";
					MaxTransferred = 75;
				},
				FunctionUpdateRelationship
				{
					ApplyTo = "Source";
					AffectCurrentNeighborhoodToSource = "1";
				},
				VisualEffect
				{
					ApplyTo = "Source";
					VisualName = "Compliment";
					Tags = array{"PlayMusicOver"};
					Duration = 2;
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				},
			};
			SuccessResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "27 + (Source.Entertainment * 0.5)";
					MaxTransferred = 45;
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				},
			};
			FailureResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "14 + (Source.Entertainment * 0.2)";
					MaxTransferred = 20;
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				},
			};
			FailureResult =  array
			{
				FunctionUpdateRelationship
				{
					ApplyTo = "Source";
					AffectCurrentNeighborhoodToSource = "-1";
				},
				VisualEffect
				{
					ApplyTo = "Source";
					VisualName = "Insulted";
					Tags = array{"PlayMusicOver"};
					Duration = 2;
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				},
			};
		};

		"PublicEntertainment" = G3ActionTemplate //Jugglery
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 20;
			
			GUIData = array
			{
				@base/OwnFamilyAdults,
				ActionGUIData // Employee
				{
					IsCharacter = 1;
					HasProfession = "Robber";
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$Robber" };

			RequiredBuildings = array
			{
				RequiredBuilding = array { "RobberCamp", 1 }
			};
			
			ActionName = "PublicEntertainment";
			DisplayName = "$PublicEntertainment";
			Description = "$PublicEntertainmentDesc";
			Instruction = "$callToAction.StreetArea";

			ActionActor = "Character";
			TargetActor = "Coordinate";

			ActionClassName = "SimpleExecutionAction";
			DestinationsPointOfInterestType = "PublicEntertainment";

			SourceScoreFormula = "Entertainment * 2";
			
			MoralAlignmentShift = 0.01;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.3,0.3,0.2};
			};

			Duration = 0.0385; //2 weeks
			BaseRewardXP = 30;
			CanFail = false;
			CriticalFactor = 1.0;
			ShowCombatText = false;

			DesiredProfiles = array
			{
				TargetProfileNeighborhood
				{
					Rich = 1;
					GoodRelationWithMe = -1;
					QuarterSurrounding = -3;
					QuarterCity = 1;
					Inhabitated = 3;
					CloseToActor = 2;
					OnStreet = 3;
					OnMainStreet = 2;
				}
			};
			
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"public_entertainment1", 0, -1, -1};
			};  
			
			SuccessResult =  array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"PublicEntertainmentOver"};
				},
				SpreadEffect
				{
					ApplyTo = "Self";
					UniqueTag = "PublicEntertainment";
					Tags = array{"PublicEntertainment"};
					SpreadResult = "PublicEntertainmentResult";
					Radius = 300.0;
					Duration = 1;
					SpreadChance = 1;
					SpreadToEveryone = true;
					TickOnce = true;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 2;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 5;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 6;
					Amount = 0.01;
				}
			};
		};

		"PublicEntertainmentOver" = G3ActionTemplate //End of the performance
		{
			GUIPresent = false;
			CanFail = false;
			
			ActionName = "PublicEntertainmentOver";
			DisplayName = "$FinaleOfShow";
			Description = "$FinaleOfShowDesc";

			ActionActor = "Character";
			ActionClassName = "SimpleExecutionAction";
			
			ShowCombatText = true;

			SourceScoreFormula = "Entertainment + Motivation";
			TargetScoreFormula = "2";

			CanFail = true;
			CriticalFactor = 0.95;
			BudgetPost = "Rogue";

			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"Curtsy", 0, -1, -1};
			};
			
			CriticalSuccessResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "20 + (Source.Entertainment * 0.75)";
				},
				FunctionUpdateRelationship
				{
					ApplyTo = "Source";
					AffectCurrentNeighborhoodToSource = "3";
				},
				VisualEffect
				{
					ApplyTo = "Source";
					VisualName = "Compliment";
					Tags = array{"PublicEntertainmentOver"};
					Duration = 2;
				}
			};
			SuccessResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "9 + (Source.Entertainment * 0.5)";
				}
			};
			FailureResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "5 + (Source.Entertainment * 0.2)";
				}
			};
			CriticalFailureResult =  array
			{
				FunctionUpdateRelationship
				{
					ApplyTo = "Source";
					AffectCurrentNeighborhoodToSource = "-2";
				},
				VisualEffect
				{
					ApplyTo = "Source";
					VisualName = "Insulted";
					Tags = array{"PublicEntertainmentOver"};
					Duration = 2;
				}
			};
		};

		"PublicEntertainmentOnStage" = G3ActionTemplate //Jugglery on a rostrum
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 21;

			GUIData = array
			{
				@base/OwnFamilyAdults,
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers" };
			
			ActionClassName = "SimpleExecutionAction";
			
			ActionName = "PublicEntertainmentOnStage";
			DisplayName = "$PublicEntertainmentOnStage";
			Description = "$PublicEntertainmentDesc";
			Instruction = "$callToAction.OwnStage";

			ShowSelectionPrompt = "UseTargetProfile";
			SelectionPromptCallToAction = "$callToAction.OwnStage";
			SelectionPromptNoTargetMessage = "$callToAction.OwnStage.PromptNoTarget";

			ActionActor = "Character";
			TargetActor = "Building";

			TargetTags = array{"Occupied"};
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Stage"};
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
					MatchTargetTags = -3;
					
					EvaluateWhileInProgress = false;
				},
				TargetProfileBuilding
				{
					CloseToActor = 2;
					IncludedTypes = array{"Stage"};
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = 3;
					};
					
					EvaluateByDefault = false;
					EvaluateWhileInProgress = true;
				}				
			};

			TargetSnapPoint = TargetSnapPoint
			{
				Required = true;
				ShouldReserve = true;
				ShouldOccupy = true;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "PublicEntertainmentOnStage"; },
				};
			};
	
			BaseRewardXP = 35;
			
			DestinationsPointOfInterestType = "PublicEntertainment";

			SourceScoreFormula = "Entertainment * 2";
						
			MoralAlignmentShift = 0.06;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.4,0.4,0};
			};

			Duration = 0.0385; //2 weeks
			CanFail = false;
			CriticalFactor = 1.0;
			ShowCombatText = false;
			
			EnterBuilding = "ForceEnter";

			OnStartResult = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{"Occupied"};
					DisplayGroup = "closed";
					Duration = 0.0;
					DisplayName = "$effect.occupied";
				},
			};
			OnEndResult = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					MatchAny = true;
					Tags = array {"Occupied"};
				},
			};
	
			SuccessResult =  array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"PublicEntertainmentOnStageOver"};
				},
				SpreadEffect
				{
					ApplyTo = "Self";
					UniqueTag = "PublicEntertainmentOnStage";
					Tags = array{"PublicEntertainmentOnStage"};
					SpreadResult = "PublicEntertainmentResult";
					Radius = 600.0;
					Duration = 1;
					SpreadChance = 1;
					SpreadToEveryone = true;
					TickOnce = true;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 2;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 5;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Self";
					ShouldUseCurrentNeighbhorhood = true;
					ProductType = 6;
					Amount = 0.01;
				}
			};
		};

		"PublicEntertainmentOnStageOver" = G3ActionTemplate //End of the performance
		{
			GUIPresent = false;
			CanFail = false;
			
			ActionName = "PublicEntertainmentOnStageOver";
			DisplayName = "$FinaleOfShow";
			Description = "$FinaleOfShowDesc";

			ActionActor = "Character";
			ActionClassName = "SimpleExecutionAction";
			
			ShowCombatText = true;

			SourceScoreFormula = "Entertainment + Motivation";
			TargetScoreFormula = "1";

			CanFail = true;
			CriticalFactor = 0.95;
			BudgetPost = "Rogue";
			
			CriticalSuccessResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "20 + (Source.Entertainment * 0.75)";
				},
				FunctionUpdateRelationship
				{
					ApplyTo = "Source";
					AffectCurrentNeighborhoodToSource = "3";
				},
				VisualEffect
				{
					ApplyTo = "Source";
					VisualName = "Compliment";
					Tags = array{"PublicEntertainmentOnStageOver"};
					Duration = 2;
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				},
			};
			SuccessResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "9 + (Source.Entertainment * 0.5)";
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				},
			};
			FailureResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "5 + (Source.Entertainment * 0.2)";
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				},
			};
			FailureResult =  array
			{
				FunctionUpdateRelationship
				{
					ApplyTo = "Source";
					AffectCurrentNeighborhoodToSource = "-2";
				},
				VisualEffect
				{
					ApplyTo = "Source";
					VisualName = "Insulted";
					Tags = array{"PublicEntertainmentOnStageOver"};
					Duration = 2;
				},
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"Exit"};
				},
			};
		};
	
		"StageConcert" = G3ActionTemplate //Present a concert
		{
			GUIPresent = true;
			UICategory = "Rogue";
			OrderIndex = 16;

			GUIData = array
			{
				ActionGUIData // Employee
				{
					IsCharacter = 1;
					IsAdult = 1;
					IsEmployee = 1;
					IsTransporter = 0;
					BelongsToOwnFamily = 1;
					Filter = "Workplace.hasTag.MinstrelTent";
				},
				ActionGUIData // Employee
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					HasProfession = "Gleeman";
					IsAdult = 1;
				},
				@base/AdultNeutralNPCs
			};
			UsableBy = array{ "$gui.item.UsableByAdultFamilyMembers", "$profession.Gleeman" };

			RequiredBuildings = array
			{
				RequiredBuilding = array { "Gleeman", 1 }
			};

			ActionName = "StageConcert";
			ActionClassName = "BuildingSoundAction";
			DisplayName = "$StageConcert";
			Description = "$StageConcertDesc";
			Instruction = "$callToAction.PickAGleemanHut";

			ActionActor = "Character";
			TargetActor = "Building";

			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
					Workplace = 3; // Make sure the minstrels only perform stage concerts in their own workplace (and not any nearby minstrel tent)
					Burning = -3;
				};
			};
			
			TargetSnapPoint = TargetSnapPoint
			{
				Required = false;
				ShouldReserve = true;
				ShouldOccupy = true;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "StageConcert"; },
				};
			};
			
			OnlyExecute = false;
			EnterBuilding = "TryEnter";
						
			DestinationsPointOfInterestType = "PlayMusic";

			SourceScoreFormula = "Entertainment * 2 + Motivation";
			Duration = 0.077; //2 weeks
			BaseRewardXP = 35;
			CanFail = false;
			CriticalFactor = 1.0;
			ShowCombatText = false;
						
			MoralAlignmentShift = 0.07;
			MoralAlignment = MoralAlignment
			{
				Values = array{0.25,0.5,0.3};
			};
			
			SuccessResult =  array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"StageConcertOver"};
				},
				SpreadEffect
				{
					ApplyTo = "Self";
					UniqueTag = "StageConcert";
					Tags = array{"StageConcert"};
					SpreadResult = "StageConcertResult";
					Radius = 800.0;
					Duration = 1;
					SpreadChance = 1;
					SpreadToEveryone = true;
					TickOnce = true;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.PaidForAmusement"};
							TargetScoreFormula = "Intelligence";
							SourceScoreFormula = "!Target.IsEmployee * ((Source.Entertainment * 2) + Motivation)";
						}
					}; 
				},
				SpreadEffect
				{
					ApplyTo = "Self";
					UniqueTag = "StageConcert";
					Tags = array{"StageConcert"};
					SpreadResult = "StageConcertEmployeesResult";
					Radius = 800.0;
					Duration = 1;
					SpreadChance = 1;
					SpreadToEveryone = true;
					TickOnce = true;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"Outside", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing", "hasNotTag.NPCGuard", "hasNotTag.PaidForAmusement"};
							TargetScoreFormula = "Intelligence";
							SourceScoreFormula = "Target.IsEmployee * (Source.Entertainment + Motivation)";
						}
					}; 
				},
				FunctionAffectNeeds
				{
					ProductType = 2;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ProductType = 5;
					Amount = 0.01;
				},
				FunctionAffectNeeds
				{
					ProductType = 6;
					Amount = 0.01;
				}
			};
		};

		"StageConcertOver" = G3ActionTemplate //End of the performance
		{
			GUIPresent = false;
			CanFail = false;
			
			ActionName = "StageConcertOver";
			DisplayName = "$FinaleOfShow";
			Description = "$FinaleOfShowDesc";
			
			ActionActor = "Character";
			TargetActor = "Building";
			ActionClassName = "SimpleExecutionAction";
			
			TargetSnapPoint = TargetSnapPoint
			{
				Required = false;
				ShouldReserve = true;
				ShouldOccupy = true;

				Profiles = array
				{
					TargetProfileSnapPoint{ Context = "StageConcertOver"; },
				};
			};
			
			EnterBuilding = "TryEnter";
			ShowCombatText = true;

			SourceScoreFormula = "Entertainment + Motivation";
			TargetScoreFormula = "2";

			CanFail = true;
			CriticalFactor = 0.95;
			
			BudgetPost = "Rogue";

			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"Curtsy", 0, -1, -1};
			};
			
			CriticalSuccessResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "75 + (Source.Entertainment * 0.75)";
					MaxTransferred = 125;
				},
				FunctionUpdateRelationship
				{
					ApplyTo = "Source";
					AffectCurrentNeighborhoodToSource = "2";
				},
				VisualEffect
				{
					ApplyTo = "Source";
					VisualName = "Compliment";
					Tags = array{"StageConcertOver"};
					Duration = 2;
				}
			};
			SuccessResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "50 + (Source.Entertainment * 0.5)";
					MaxTransferred = 90;
				},
			};
			FailureResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = "28 + (Source.Entertainment * 0.2)";
					MaxTransferred = 45;
				},
			};
			CriticalFailureResult =  array
			{
				FunctionTransferMoney
				{
					Receiver = "Source";
					Amount = 12;
				},
				FunctionUpdateRelationship
				{
					ApplyTo = "Source";
					AffectCurrentNeighborhoodToSource = "-2";
				},
				VisualEffect
				{
					ApplyTo = "Source";
					VisualName = "Insulted";
					Tags = array{"StageConcertOver"};
					Duration = 2;
				}
			};
		};


		 //----------------------------------------------------		


// START OF TEST ACTIONS --->

		"Test1" = G3ActionTemplate
		{
			UICategory = "Family";
			GUIPresent = true;
			OrderIndex = 98;
			GUIData = array
			{
				@base/OwnFamilyAdults
			};
			
			ActionName = "Test1";
			DisplayName = "$Test1";
			Description = "$Test1Desc";
			Instruction = "$callToAction.CompetitorBusiness";

			ActionActor = "Character";
			TargetActor = "Building";

			ActionClassName = "SimpleExecutionAction";
			
			SourceRun = true;
			
			SourceScoreFormula = "Intelligence * (1 + BargainingBonus)";
			TargetScoreFormula = "BuildingSecurity";
			
			//Duration = 0.025;
			//Cooldown = 1.0;
//			BaseRewardXP = 145;
			CanFail = false;
//			CriticalFactor = 0.9;
//			EnterBuilding = "ForceEnter";

			DistanceFromTarget = 55;
			DistanceFromTargetMin = 55;

			PriceFormula = "50";
			BudgetPot = "Diplomacy";
//			CurrencyType = "Prestige";
			
			DesiredProfiles = array
			{
				TargetProfileBuilding
				{
//					MaxDistance = 5000;
					Business = 3;
//					ResourceProducer = -3;
//					CityBuilding = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
//						Alliance = -2;
//						Feud = 2;
//						GoodRelationWithMe = -2;
//						PoliticalImportance = 1;
//						HigherRank = 1;
					};
				}
			};
			
//			MoralAlignmentShift = 0.07;
//			MoralAlignment = MoralAlignment
//			{
//				Values = array{-0.025, -0.025, -0.025};
//			};

			OnStartResult = array
			{
			};
			OnCancelResult = array
			{
			};
			OnDestinationReachedResult = array
			{
				FunctionSendMessage
				{
					Filter = "Source.HasPlayerCommand && (Target.hasNotTag.CountryHouse || Target.hasNotTag.PoorHouse || Target.hasNotTag.CityHouse || Target.hasNotTag.Mansion)"; // check if the action was started by a human player
					ApplyTo = "Source";
					Description = "LaughAtSomeoneSuccessTarget";
				},
				FunctionEndAction
				{
					Filter = "Target.hasNotTag.CountryHouse || Target.hasNotTag.PoorHouse || Target.hasNotTag.CityHouse || Target.hasNotTag.Mansion";
					ApplyTo = "Self";
					Type = "Cancel";
				}
			};
			SuccessResult = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					ActorValue = "MaxEmployees";
					Mod = 2.0;
					Recover = true;
				};
				ModifierEffect
				{
					ApplyTo = "Target";
					ActorValue = "StorageSlots";
					Mod = 2.0;
					Recover = true;
				};
				ModifierEffect
				{
					ApplyTo = "Target";
					ActorValue = "StorageSpace";
					Mod = 10.0;
					Recover = true;
				};
			};			
		};
		
		"Test2" = G3ActionTemplate
		{
			UICategory = "Family";
			GUIPresent = true;
			OrderIndex = 98;
			GUIData = array
			{
				@base/OwnFamilyAdults
			};
			
			ActionName = "Test2";
			DisplayName = "$TestAnimationAloneWithProp";
			Description = "";
			Instruction = "$callToAction.StreetArea";

			ActionClassName = "SimpleExecutionAction";

			ActionActor = "Character";
//			TargetActor = "Coordinate";
//
//			DesiredProfiles = array
//			{
//				TargetProfilePosition
//				{
//					OnStreet = 3;
//				}
//			};

			Cooldown = 0.0;

			SourceScoreFormula = "1";
			TargetScoreFormula = "0";

			CanFail = false;
			CriticalFactor = 1.0;
			
			ShowCombatText = true;

			Duration = 0.005; // 0.000011574 = 1 ingame sec | 0.00069444 = 1 ingame min | 0,0416664 = 1 ingame hour !(1 real sec = 0.016666667 ticks)!

			// Animation Character
			CustomAnimationPool = array
			{
				CustomAnimationInfo = array {"SitAndYawn", 0, -1, -1}; // SoundCategory, Sound Id, Sound sub id
			};
			// Animation Props
			//AnimationProps = array
			//{
			//	PropSpawnDesc { PropNames = array { "vinecup/vinecup" }; };
			//};	

			SuccessResult = array
			{
			};
		};

		"Test3" = G3ActionTemplate
		{
			UICategory = "Family";
			GUIPresent = true;
			OrderIndex = 99;
			GUIData = array
			{
				@base/OwnFamilyAdults
			};
			
			ActionName = "Test3";
			DisplayName = "$TestAnimationWithPartner";
			Description = "";
			Instruction = "$callToAction.Character";

			ActionClassName = "SimpleExecutionAction";

			ActionActor = "Character";
			TargetActor = "Character";

			DesiredProfiles = array
			{
				TargetProfileCharacter 
				{
					NPC = 3;
				}
			};

			Cooldown = 0.0;

			SourceScoreFormula = "1";
			TargetScoreFormula = "0";

			CanFail = false;
			CriticalFactor = 1.0;
			
			ShowCombatText = true;

//			Duration = 0.007;
			DistanceFromTarget = 20;
			DistanceFromTargetMin = 20;

//			CustomAnimationPool = array
//			{
//				CustomAnimationInfo = array {"choc_react1", 0, -1, -1};
//			};

//			CustomReceiverAnimationPool = array
//			{
//				CustomAnimationInfo = array {"dance_pair", 0, -1, -1};
//			};
			
			SuccessResult = array
			{
				FunctionTriggerAction
				{
					//Filter = "(Date % 1.0) > 0.9166 || (Date % 1.0) < 0.25";
					ApplyTo = "Target";
					ActionTarget = "FromTargetProfile";
					Actions = array{"NPCSleep"};
				}
			};
		};
		
		"Test4" = G3ActionTemplate
		{
			UICategory = "Family";
			GUIPresent = true;
			OrderIndex = 100;
			GUIData = array
			{
				ActionGUIData // Leader in the action bar
				{
					IsCharacter = 1;
					BelongsToOwnFamily = 1;
					IsAdult = 1;
				},
			};

			ActionName = "Test4";
			DisplayName = "$TestAnimationWithPartner";
			Description = "";
			Instruction = "$callToAction.Character";

			ActionClassName = "SimpleExecutionAction";

			ActionActor = "Character";
			TargetActor = "Character";

			DesiredProfiles = array
			{
				TargetProfileCharacter 
				{
					Adult = 3;
					NPCGuard = -3;
					FamilyProfile = TargetProfileFamily
					{
						MyFamily = -3;
						GoodRelationWithMe = -2;
					};
				}
			};

			Cooldown = 0.0; //~1 sec
			CooldownFamilyWide = false;
			
			SourceScoreFormula = "1";
			TargetScoreFormula = "0";

			BaseRewardXP = 25;
			
			CanFail = false;
			CriticalFactor = 1; // "0" chance for critical successes and critical failures

			MoralAlignmentShift = 0;
			MoralAlignment = MoralAlignment
			{
				Values = array{0, 0, 0};
			};

			DistanceFromTarget = 150;
			DistanceFromTargetMin = 150;

//			CustomAnimationPool = array
//			{
//				CustomAnimationInfo = array {"throw_knife", 5, 54, -1};
//			};
//
//			CustomReceiverAnimationPool = array
//			{
//				CustomAnimationInfo = array {"choc_react1", 0, -1, -1};
//			};
			
			SuccessResult = array
			{
//				FunctionTriggerAction
//				{
//					ApplyTo = "Source";
//					Actions = array{"ApplyPoisonGhostlyFog", "ApplyPoisonGhostlyFog", "ApplyPoisonBlackWidowPoison", "ApplyPoisonParalysisPoison"};
//				},
				ModifierEffect
				{
					Tags = array{"Drunk","Drunken"};
					ApplyTo = "Target";
					ActorValue = "MovementSpeedMult";
					Mod = -0.50;
					Duration = 120.0;
					Recover = true;
				};
			};
		};

        "DevTeleport" = G3ActionTemplate
        {
			UICategory = "Family";
			GUIPresent = true;
			OrderIndex = 97;
			GUIData = array
			{
				@base/OwnFamilyAdults
			};

            ActionClassName = "TeleportAction";

            ActionName = "DevTeleport";
            DisplayName = "$action.Teleport";
            Description = "$action.TeleportDesc";
            Instruction = "$callToAction.StreetArea";

            CanFail = false;

			ActionActor = "Character";
			TargetActor = "Coordinate";

			DesiredProfiles = array
			{
				TargetProfilePosition
				{
					OnStreet = 3;
				}
			};

        };

		"TestAddNotice" = G3ActionTemplate
		{
			UICategory = "Urgent";
			GUIPresent = true;
			OrderIndex = 99;
			GUIData = array
			{
				@base/OwnFamilyAdults
			};

			ActionName = "TestAddNotice";
			DisplayName = "Test Add Notice";
			Description = "";
			Instruction = "$callToAction.Character";

			ActionClassName = "SimpleExecutionAction";

			ActionActor = "Character";
			TargetActor = "Character";

			DesiredProfiles = array
			{
				TargetProfileCharacter 
				{
					Adult = 3;
					NPCGuard = -3;
					Employee = -3;
				}
			};

			SourceScoreFormula = "1";
			TargetScoreFormula = "0";

			CanFail = false;
			CriticalFactor = 1.0;

			SuccessResult = array
			{
				FunctionAddUiNotice
				{
					ApplyTo = "Self";
					NoticeId = "notice.calendar";
					Reason = "$notice.calendar.newEntry";
				},
				FunctionAddUiNotice
				{
					ApplyTo = "Target";
					NoticeId = "notice.calendar";
					Reason = "$notice.calendar.newEntry";
				},
			};
		};

		"TestRemoveAddNotice" = G3ActionTemplate
		{
			UICategory = "Urgent";
			GUIPresent = true;
			OrderIndex = 99;
			GUIData = array
			{
				@base/OwnFamilyAdults
			};

			ActionName = "TestRemoveAddNotice";
			DisplayName = "Test Remove Notice";
			Description = "";
			Instruction = "$callToAction.Character";

			ActionClassName = "SimpleExecutionAction";

			ActionActor = "Character";
			TargetActor = "Character";

			DesiredProfiles = array
			{
				TargetProfileCharacter 
				{
					Adult = 3;
					NPCGuard = -3;
					Employee = -3;
				}
			};

			SourceScoreFormula = "1";
			TargetScoreFormula = "0";

			CanFail = false;
			CriticalFactor = 1.0;

			SuccessResult = array
			{
				FunctionRemoveUiNotice
				{
					ApplyTo = "Self";
					NoticeId = "notice.calendar";
					Reason = "$notice.calendar.newEntry";
				},
				FunctionRemoveUiNotice
				{
					ApplyTo = "Target";
					NoticeId = "notice.calendar";
					Reason = "$notice.calendar.newEntry";
				},
			};
		};

		
// <--- END OF TEST ACTIONS

		@base/EmployeeActions
		@base/ReligionActions
		@base/ArtefactActions
		@base/ArtefactActionsIron
		@base/BaseFamilyMemberActions
		@base/RomanceActions
		@base/PoliticalOfficeActions
		@base/DialogueActions
		@base/DialogueQuestActions
		@base/Reactions
		@base/ServiceActions
		@base/GuildActions
		@base/ApplyPoison
		@base/ApplyPoisonIron
		@base/NPCFollowUpActions
		@base/PartyManagementActions
		@base/FamilyLifeActions
		@base/PriestLifeActions
		@base/PrisonActions
		@base/ArsenalEventActions
		@base/ArsenalLifeActions
		@base/TownhallLifeActions
		@base/TrialActions
		@base/IronActions
	};
};
