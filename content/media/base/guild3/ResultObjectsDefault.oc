ResultObjectsDefault extends ResultObjectContainer
{
	Objects = array
	{
		ResultObject
		{
			Id = "HeirHumiliation";
			DisplayName = "$status.heir.humiliated";
			Results = array
			{
				// Source = new heir
				// Target = old heir
				DisplayEffect
				{
				    Tags = array{"HeirHumiliation"};
				    ApplyTo = "Target";
				    DisplayGroup = "wound";
				    DisplayName = "$status.heir.humiliated";
					Duration = 1800.0; //1 year
				},
				VisualEffect
				{
				    Tags = array{"HeirHumiliation"};
					ApplyTo = "Target";
					VisualName = "Insulted";
					Duration = 10.0;
				},
				ModifierEffect
				{
				    Tags = array{"HeirHumiliation"};
					ApplyTo = "Target";
					ActorValue = "Charisma";
					Mod = -2;
					Duration = 1800.0; //1 year
					Recover = true;
				},
				ModifierEffect
				{
				    Tags = array{"HeirHumiliation"};
					ApplyTo = "Target";
					ActorValue = "Perception";
					Mod = -1;
					Duration = 1800.0; //1 year
					Recover = true;
				},
				ModifierEffect
				{
				    Tags = array{"HeirHumiliation"};
					ApplyTo = "Target";
					ActorValue = "Resistance";
					Mod = -4;
					Duration = 1800.0; //1 year
					Recover = true;
				},
				ModifierEffect
				{
				    Tags = array{"HeirHumiliation"};
					ApplyTo = "Target";
					ActorValue = "Productivity";
					Mod = -0.25;
					Duration = 1800.0; //1 year
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "SpouseGetsDeeplyDisappointed";
			DisplayName = "$effect.deeplydisappointed";
			Results = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					MatchAny = true;
					Tags = array {"KissSpouse", "DanceWithSpouse"};
				},
				DisplayEffect
				{
				    Tags = array{"deeplydisappointed"};
				    ApplyTo = "Target";
				    DisplayGroup = "wound";
				    DisplayName = "$effect.deeplydisappointed";
					Duration = 1800.0; //1 year
				},
				VisualEffect
				{
				    Tags = array{"deeplydisappointed"};
					ApplyTo = "Target";
					VisualName = "Insulted";
					Duration = 20.0;
				},
				ModifierEffect
				{
				    Tags = array{"deeplydisappointed"};
					ApplyTo = "Target";
					ActorValue = "Fertility";
					Mod = -0.75;
					Duration = 1800.0; //1 year
					Recover = true;
				},
				FunctionSendMessage
				{
					Filter = "!Target.IsMale && Source.hasTag.KissLiaison";
					ApplyTo = "Source";
					Description = "WifeGetsDeeplyDisappointed";
				},
				FunctionSendMessage
				{
					Filter = "Target.IsMale && Source.hasTag.KissLiaison";
					ApplyTo = "Source";
					Description = "HusbandGetsDeeplyDisappointed";
				},
				FunctionSendMessage
				{
					Filter = "!Target.IsMale && Source.hasTag.DanceWithLiaison";
					ApplyTo = "Source";
					Description = "WifeGetsDeeplyDisappointedDance";
				},
				FunctionSendMessage
				{
					Filter = "Target.IsMale && Source.hasTag.DanceWithLiaison";
					ApplyTo = "Source";
					Description = "HusbandGetsDeeplyDisappointedDance";
				},
			};
		},
		ResultObject
		{
			Id = "Companion";
			DisplayName = "$DogCompanion";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					ActorValue = "Perception";
					Mod = 1;
					Recover = true;
				},
			};
		},
		ResultObject
		{
			Id = "WhipTransportersCritSuccess";
			DisplayName = "$WhipTransporters";
			Filter = "IsTransporterOfBuilding";
			Results = array
			{
				//Remove negative effects if any are active
				FunctionRemoveEffect
				{
					MatchAny = true;
					Tags = array{ "WhipTransportersFailure" };
					ApplyTo = "Target";
				},
				//Add positive effects
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{"WhipTransportersSuccess"};
					DisplayGroup = "buffed";
					DisplayName = "$statusEffect.whipped";
//					Duration = 75;
					Duration = 225;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"WhipTransportersSuccess"};
					ActorValue = "Health";
					Mod = -5;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"WhipTransportersSuccess"};
					ActorValue = "MovementSpeedMult";
					Mod = 0.05;
//					Duration = 75;
					Duration = 225;
					Recover = true;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 9;
					Amount = 0.02;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 10;
					Amount = 0.01;
				},
			};
		},
		ResultObject
		{
			Id = "WhipTransportersSuccess";
			DisplayName = "$WhipTransporters";
			Filter = "IsTransporterOfBuilding";
			Results = array
			{
				//Remove negative effects if any are active
				FunctionRemoveEffect
				{
					MatchAny = true;
					Tags = array{ "WhipTransportersFailure" };
					ApplyTo = "Target";
				},
				//Add positive effects
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{"WhipTransportersSuccess"};
					DisplayGroup = "buffed";
					DisplayName = "$statusEffect.whipped";
//					Duration = 60;
					Duration = 180;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"WhipTransportersSuccess"};
					ActorValue = "Health";
					Mod = -10;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"WhipTransportersSuccess"};
					ActorValue = "MovementSpeedMult";
					Mod = 0.05;
//					Duration = 60;
					Duration = 180;
					Recover = true;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 9;
					Amount = 0.01;
				},
			};
		},
		ResultObject
		{
			Id = "WhipTransportersFailure";
			DisplayName = "$WhipTransporters";
			Filter = "IsTransporterOfBuilding";
			Results = array
			{
				//Remove positive effects if any are active
				FunctionRemoveEffect
				{
					MatchAny = true;
					Tags = array{ "WhipTransportersSuccess" };
					ApplyTo = "Target";
				},
				//Add negative effects
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{"WhipTransportersFailure"};
					DisplayGroup = "wound";
					DisplayName = "$statusEffect.overwhippedTransporter";
//					Duration = 50;
					Duration = 135;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"WhipTransportersFailure"};
					ActorValue = "Health";
					Mod = -10;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"WhipTransportersFailure"};
					ActorValue = "MovementSpeedMult";
					Mod = -0.02;
//					Duration = 50;
					Duration = 135;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "WhipTransportersCritFailure";
			DisplayName = "$WhipTransporters";
			Filter = "IsTransporterOfBuilding";
			Results = array
			{
				//Remove positive effects if any are active
				FunctionRemoveEffect
				{
					MatchAny = true;
					Tags = array{ "WhipTransportersSuccess" };
					ApplyTo = "Target";
				},
				//Add negative effects
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{"WhipTransportersFailure"};
					DisplayGroup = "wound";
					DisplayName = "$statusEffect.overwhippedTransporter";
//					Duration = 65;
					Duration = 180;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"WhipTransportersFailure"};
					ActorValue = "Health";
					Mod = -15;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"WhipTransportersFailure"};
					ActorValue = "MovementSpeedMult";
					Mod = -0.03;
//					Duration = 65;
					Duration = 180;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "OverseeWorkersCritSuccess";
			DisplayName = "$OverseeWorkers";
			Filter = "IsEmployeeOfBuilding && !IsFamilyMember";
			Results = array
			{
				//Remove negative effects if any are active
				FunctionRemoveEffect
				{
					MatchAny = true;
					Tags = array{ "OverseeWorkersFailure" };
					ApplyTo = "Target";
				},
				//Add positive effects
				DisplayEffect
				{
					Tags = array{"OverseeWorkersSuccess"};
					ApplyTo = "Target";
					Duration = 225;
					DisplayGroup = "buffed";
					DisplayName = "$action.MotivatedWorkers";
				},
				ModifierEffect
				{
					Tags = array{"OverseeWorkersSuccess"};
					ApplyTo = "Target";
					ActorValue = "Productivity";
					Mod = 0.05;
					Duration = 225;
					Recover = true;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 2;
					Amount = 0.01;
				},
			};
		},
		ResultObject
		{
			Id = "OverseeWorkersSuccess";
			DisplayName = "$OverseeWorkers";
			Filter = "IsEmployeeOfBuilding && !IsFamilyMember";
			Results = array
			{
				//Remove negative effects if any are active
				FunctionRemoveEffect
				{
					MatchAny = true;
					Tags = array{ "OverseeWorkersFailure" };
					ApplyTo = "Target";
				},
				//Add positive effects
				DisplayEffect
				{
					Tags = array{"OverseeWorkersSuccess"};
					ApplyTo = "Target";
					Duration = 180;
					DisplayGroup = "buffed";
					DisplayName = "$action.MotivatedWorkers";
				},				
				ModifierEffect
				{
					Tags = array{"OverseeWorkersSuccess"};
					ApplyTo = "Target";
					ActorValue = "Productivity";
					Mod = 0.03;
					Duration = 180;
					Recover = true;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 2;
					Amount = 0.01;
				},
			};
		},
		ResultObject
		{
			Id = "OverseeWorkersFailure";
			DisplayName = "$OverseeWorkers";
			Filter = "IsEmployeeOfBuilding && !IsFamilyMember";
			Results = array
			{
				//Remove positive effects if any are active
				FunctionRemoveEffect
				{
					MatchAny = true;
					Tags = array{ "OverseeWorkersSuccess" };
					ApplyTo = "Target";
				},
				//Add negative effects
				DisplayEffect
				{
					Tags = array{"OverseeWorkersFailure"};
					ApplyTo = "Target";
					Duration = 135;
					DisplayGroup = "debuffed";
					DisplayName = "$action.DemotivatedWorkers";
				},
				
				ModifierEffect
				{
					Tags = array{"OverseeWorkersFailure"};
					ApplyTo = "Target";
					ActorValue = "Productivity";
					Mod = -0.02;
					Duration = 135;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "OverseeWorkersCritFailure";
			DisplayName = "$OverseeWorkers";
			Filter = "IsEmployeeOfBuilding && !IsFamilyMember";
			Results = array
			{
				//Remove positive effects if any are active
				FunctionRemoveEffect
				{
					MatchAny = true;
					Tags = array{ "OverseeWorkersSuccess" };
					ApplyTo = "Target";
				},
				//Add negative effects
				DisplayEffect
				{
					Tags = array{"OverseeWorkersFailure"};
					ApplyTo = "Target";
					Duration = 180;
					DisplayGroup = "debuffed";
					DisplayName = "$action.DemotivatedWorkers";
				},
				
				ModifierEffect
				{
					Tags = array{"OverseeWorkersFailure"};
					ApplyTo = "Target";
					ActorValue = "Productivity";
					Mod = -0.04;
					Duration = 180;
					Recover = true;
				}
			};
		},

		ResultObject
		{
			Id = "MotivateWorkersSuccess";
			DisplayName = "$MotivateWorkers";
			Filter = "IsEmployeeOfBuilding && !IsFamilyMember";
			Results = array
			{
				//Remove negative effects if any are active
				FunctionRemoveEffect
				{
					MatchAny = true;
					Tags = array{ "OverseeWorkersFailure" };
					ApplyTo = "Target";
				},
				//Add positive effects
				DisplayEffect
				{
					Tags = array{"MotivateWorkersSuccess"};
					ApplyTo = "Target";
//					Duration = 260;
					Duration = 360;
					DisplayGroup = "buffed";
					DisplayName = "$action.MotivatedWorkers";
				},
				ModifierEffect
				{
					Tags = array{"MotivateWorkersSuccess"};
					ApplyTo = "Target";
					ActorValue = "Productivity";
					Mod = 0.08;
//					Duration = 260;
					Duration = 360;
					Recover = true;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 2;
					Amount = 0.01;
				},
			};
		},

		ResultObject
		{
			Id = "MotivateWorkersSuccessExemplaryMaster";
			DisplayName = "$MotivateWorkers";
			Filter = "IsEmployeeOfBuilding && !IsFamilyMember";
			Results = array
			{
				//Remove negative effects if any are active
				FunctionRemoveEffect
				{
					MatchAny = true;
					Tags = array{ "OverseeWorkersFailure" };
					ApplyTo = "Target";
				},
				//Add positive effects
				DisplayEffect
				{
					Tags = array{"MotivateWorkersSuccess"};
					ApplyTo = "Target";
					Duration = 500;
					DisplayGroup = "buffed";
					DisplayName = "$action.MotivatedWorkers";
				},
				ModifierEffect
				{
					Tags = array{"MotivateWorkersSuccess"};
					ApplyTo = "Target";
					ActorValue = "Productivity";
					Mod = 0.08;
					Duration = 500;
					Recover = true;
				},
				FunctionAffectNeeds
				{
					ApplyTo = "Target";
					ProductType = 2;
					Amount = 0.01;
				},
			};
		},
		
		ResultObject
		{
			Id = "PromoteOwnBusinessForeward";
			DisplayName = "$action.PromoteYourBusinesses";
			Filter = "IsEmployeeOfBuilding";
			Results = array
			{
				DisplayEffect
				{
					Tags = array{"PromoteOwnBusiness"};
					ApplyTo = "Target";
					Duration = 120;
					DisplayGroup = "buffed";
					DisplayName = "$effect.PromoteYourBusiness.NoFrontStore";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"PromoteOwnBusiness"};
					ActorValue = "Motivation";
					Mod = 0.5;
					Duration = 120;
					Recover = true;
				},
			};
		},
		ResultObject
		{
			Id = "GetSlapped";
			DisplayName = "";
			Results = array
			{
				FunctionTriggerAction
				{
					ApplyTo = "Source";
					Actions = array{"GetSlapped"};
				}
			};
		},
		ResultObject
		{
			Id = "NegativeRumor";
			DisplayName = "$effect.rumorNegative";
			Results = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-2"; 
				}
			};
		},
		ResultObject
		{
			Id = "PositiveRumor";
			DisplayName = "$effect.rumorPositive";
			Results = array
			{
				ModifierEffect
				{
					Tags = array{"PositiveRumor"};
					ApplyTo = "Target";
					Duration = 60;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "2"; 
				}
			};
		},
		ResultObject
		{
			Id = "BooksCookingCrit";
			DisplayName = "$effect.BooksCooked";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					Duration = 2160;
					ActorValue = "CookedBooks";
					Mod = 2;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "BooksCooking";
			DisplayName = "$effect.BooksCooked";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					Duration = 2160;
					ActorValue = "CookedBooks";
					Mod = 1;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "BooksCookingCritFail";
			DisplayName = "$effect.BooksCookedFailed";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					Duration = 720;
					ActorValue = "CookedBooks";
					Mod = -2;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "BooksCookingFail";
			DisplayName = "$effect.BooksCookedFailed";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					Duration = 720;
					ActorValue = "CookedBooks";
					Mod = -1;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "SleepRegeneration"; // This is referenced from code, don't change the name!
			DisplayName = "$action.Sleep";
			Results = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Self";
					Tags = array{"Sleeping", "DiseaseImmunity"};
					MatchAny = false;
				},
				DisplayEffect
				{
					//while sleeping they should not catch another disease, otherwise characters sleeping in the same building would keep infecting each other
				    Tags = array{"Sleeping", "DiseaseImmunity"};
				    ApplyTo = "Self";
				    DisplayGroup = "sleep";
				    DisplayName = "$action.Sleep";
				},
				ModifierEffect
				{
					Tags = array{"Sleeping"};
					ApplyTo = "Self";
					ActorValue = "HealthRegeneration";
					Mod = 10;
					Recover = true;
				},
			};
		},
		@base/WellRestedIron
		ResultObject
		{
			Id = "WakeUp"; // This is referenced from code, don't change the name!
			Results = array
			{
				FunctionRemoveEffect
				{
					Tags = array{"Sleeping"};
					ApplyTo = "Self";
					MatchAny = true;
				}
			};
		},
		ResultObject
		{
			Id = "FamilyFeastAllFamilyMembers";
			Filter = "IsFamilyMember && !IsHenchmanOfBuilding";
			Results = array
			{
				VisualEffect
				{
					Tags = array {"FamilyFeast"};
					ApplyTo = "Target";
					VisualName = "Compliment";
					Duration = 2;
				},
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					MatchAny = true;
					Tags = array {"HeirHumiliation", "deeplydisappointed", "HandHumiliation"};
				},
				FunctionGiveExperience
				{
					Tags = array {"FamilyFeast"};
					ApplyTo = "Target";
					Amount = 75;
				},
				ModifierEffect
				{
					Tags = array {"FamilyFeast"};
					ApplyTo = "Target";
					ActorValue = "Productivity";
					Mod = 0.05;
					Duration = 540;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "PublicEntertainmentResult";
			Results = array
			{
				FunctionTransferMoney
				{
					Giver = "Target";
					Receiver = "Source";
					Amount = "3 * (Target.SocialCaste + 1)";
				},
				FunctionAffectServiceNeeds
				{
					ApplyTo = "Target";
					ServiceNeeds = map
					{
						"RecreationNeed" = -0.04;
					};
				},
			};
		},
		ResultObject
		{
			Id = "StageConcertResult";
			Results = array
			{
				FunctionTransferMoney
				{
					Giver = "Target";
					Receiver = "Source";
					Amount = "3 * (Target.SocialCaste + 1) + 3";
				},
				FunctionAffectServiceNeeds
				{
					ApplyTo = "Target";
					ServiceNeeds = map
					{
						"RecreationNeed" = -0.08;
					};
				},
				ModifierEffect
				{
					Tags = array{"PaidForAmusement"};
					ApplyTo = "Target";
					Duration = 25;
				},
			};
		},
		ResultObject
		{
			Id = "StageConcertEmployeesResult";
			Results = array
			{
				FunctionTransferMoney
				{
					Giver = "Target";
					Receiver = "Source";
					Amount = "2 * (Target.SocialCaste + 1) + 2";
				},
				ModifierEffect
				{
					Tags = array{"PaidForAmusement"};
					ApplyTo = "Target";
					Duration = 25;
				},
			};
		},
		ResultObject
		{
			Id = "BeggingResult";
			Results = array
			{
				FunctionTransferMoney
				{
					Giver = "Target";
					Receiver = "Source";
					Amount = "Target.SocialCaste + 1";
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-1"; 
				},
				VisualEffect
				{
					ApplyTo = "Target";
					VisualName = "Insulted";
					Tags = array{"Begging"};
					Duration = 2;
				}
			};
		},
		ResultObject
		{
			Id = "BoastResult";
			Results = array
			{
				FunctionPickRandom
				{
					Filter = "Target.SocialCaste == 1"; // poor
					ApplyTo ="Source";
					ResultObjectIds = array{ "BoastNothing", "BoastNothing", "BoastCitizen" };
				},
				FunctionPickRandom
				{
					Filter = "Target.SocialCaste == 2"; // citizen
					ApplyTo ="Source";
					ResultObjectIds = array{ "BoastFail", "BoastNothing", "BoastCitizen", "BoastCitizen" };
				},
				FunctionPickRandom
				{
					Filter = "Target.SocialCaste == 3"; // rich
					ApplyTo ="Source";
					ResultObjectIds = array{ "BoastFail", "BoastCitizen", "BoastRich", "BoastRich" };
				},
			};
		},
		ResultObject
		{
			Id = "BoastNothing";
			Results = array
			{
			};
		},
		ResultObject
		{
			Id = "BoastFail";
			Results = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-1"; 
				},
			};
		},
		ResultObject
		{
			Id = "BoastCitizen";
			Results = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "1"; 
				},
				VisualEffect
				{
					ApplyTo = "Target";
					VisualName = "Compliment";
					Tags = array{"Boast"};
					Duration = 2;
				}
			};
		},
		ResultObject
		{
			Id = "BoastRich";
			Results = array
			{
				FunctionTransferPrestige
				{
					Receiver = "Source";
					Amount = 1;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "1"; 
				},
				VisualEffect
				{
					ApplyTo = "Target";
					VisualName = "Compliment";
					Tags = array{"Boast"};
					Duration = 2;
				}
			};
		},
		ResultObject
		{
			Id = "PublicBanquetResult";
			Results = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "2"; 
				},
				VisualEffect
				{
					ApplyTo = "Target";
					VisualName = "Compliment";
					Tags = array{"PublicBanquet"};
					Duration = 2;
				}
			};
		},
		ResultObject
		{
			Id = "TrashLetterResult";
			Results = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-1"; 
				},
				ModifierEffect
				{
					Tags = array{"TrashLetter", "Astonished"};
					ApplyTo = "Target";
					Duration = 60;
				},
				VisualEffect
				{
					ApplyTo = "Target";
					VisualName = "Insulted";
					Tags = array{"TrashLetter", "Astonished"};
					Duration = 2;
				}
			};
		},
		ResultObject
		{
			Id = "RecommandationLetter";
			Results = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "1";
				},
				ModifierEffect
				{
					Tags = array{"RecommandationLetter", "Astonished"};
					ApplyTo = "Target";
					Duration = 60;
				},
				VisualEffect
				{
					ApplyTo = "Target";
					VisualName = "Compliment";
					Tags = array{"RecommandationLetter"};
					Duration = 2;
				}
			};
		},
		ResultObject
		{
			Id = "SchoolCharisma";
			DisplayName = "$Schooling";
			Results = array
			{
				ModifierEffect
				{
					Tags = array{"School"};
					ApplyTo = "Source";
					ActorValue = "Charisma";
					Mod = 1;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "SchoolDexterity";
			DisplayName = "$Schooling";
			Results = array
			{
				ModifierEffect
				{
					Tags = array{"School"};
					ApplyTo = "Source";
					ActorValue = "Dexterity";
					Mod = 1;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "SchoolIntelligence";
			DisplayName = "$Schooling";
			Results = array
			{
				ModifierEffect
				{
					Tags = array{"School"};
					ApplyTo = "Source";
					ActorValue = "Intelligence";
					Mod = 1;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "SchoolPerception";
			DisplayName = "$Schooling";
			Results = array
			{
				ModifierEffect
				{
					Tags = array{"School"};
					ApplyTo = "Source";
					ActorValue = "Perception";
					Mod = 1;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "SchoolStrength";
			DisplayName = "$Schooling";
			Results = array
			{
				ModifierEffect
				{
					Tags = array{"School"};
					ApplyTo = "Source";
					ActorValue = "Strength";
					Mod = 1;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "DuelInsultSpread";
			Results = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-1"; 
				}
			};
		},
		ResultObject
		{
			Id = "MakeEvocationRumor";
			DisplayName = "$effect.MakeEvocationRumor";
			Results = array
			{
				ModifierEffect
				{
					Tags = array{"MakeEvocationRumor"};
					ApplyTo = "Target";
					Duration = 60;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-2"; 
				}
			};
		},
		ResultObject
		{
			Id = "PraiseSpread";
			DisplayName = "$effect.rumorPositive";
			Results = array
			{
				ModifierEffect
				{
					Tags = array{"PraiseSpread"};
					ApplyTo = "Target";
					Duration = 60;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "1"; 
				}
			};
		},
		ResultObject
		{
			Id = "DenounceSpread";
			DisplayName = "$effect.rumorNegative";
			Results = array
			{
				ModifierEffect
				{
					Tags = array{"DenounceSpread"};
					ApplyTo = "Target";
					Duration = 20;
				},
				FunctionUpdateRelationship
				{
					AffectTarget = "-1"; 
				}
			};
		},
		ResultObject
		{
			Id = "OnProposalBanish";
			Results = array
			{
				FunctionTransferPrestige
				{
					Giver = "Target";
					Amount = 100;
				},
				FunctionUpdateRelationship
				{
					AffectCurrentNeighborhoodToTarget = "-20";
					AffectSourceAllies = "-10";
				},
				VisualEffect
				{
					ApplyTo = "Target";
					VisualName = "Insulted";
					Tags = array{"OnProposalBanish"};
					Duration = 2;
				},
				ForwardEffect
				{
					ApplyTo = "Target";
					Relation = "Family";
					Tags = array{"OnProposalBanish"};
					Duration = 720.0;
					ResultObjectId = "OnProposalBanishForwardEffects";
				}
			};
		},
		ResultObject
		{
			Id = "OnProposalBanishForwardEffects";
			DisplayName = "$effect.banishProposal";
			Results = array
			{
				DisplayEffect
				{
					Tags = array{"OnProposalBanish"};
					ApplyTo =  "Target";
					DisplayGroup = "alarm";
					DisplayName = "$effect.banishProposal";
				},
				ModifierEffect
				{
					Tags = array{"OnProposalBanish"};
					ApplyTo =  "Target";
					ActorValue = "BargainingBonus";
					Mod = -15;
					Recover = true;
				},
				ModifierEffect
				{
					Tags = array{"OnProposalBanish"};
					ApplyTo =  "Target";
					ActorValue = "ReputationBonus";
					Mod = -0.15;
					Recover = true;
				},
			};
		},
		ResultObject
		{
			Id = "OnSuccessBanish";
			DisplayName = "$effect.banish";
			Results = array
			{
				DisplayEffect
				{
					Tags = array{"OnSuccessBanish"};
					ApplyTo =  "Target";
					DisplayGroup = "alarm";
					DisplayName = "$effect.banish";
				},
				SpreadEffect
				{
					ApplyTo = "Target";
					UniqueTag = "OnSuccessBanish";
					Tags = array{"OnSuccessBanish"};
					SpreadResult = "NegativeRumor";
					Radius = 300.0;
					Duration = 50;
					SpreadChance = 0.5;
					SpreadFrequency = 4;
					SpreadTargetRules = array
					{
						SpreadTargetRule
						{
							TargetType = "Character";
							TargetProperties = array{"IsInSameRoom", "NotMyFamily", "IsConscious", "NotInCombat", "NotFleeing"};
							TargetScoreFormula = "Intelligence*0.25";
						}
					}; 
				}
			};
		},
		ResultObject
		{
			Id = "ReputationDecrease";
			Results = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-2"; 
				},
				VisualEffect
				{
					ApplyTo = "Target";
					VisualName = "Insulted";
					Tags = array{"ReputationDecrease"};
					Duration = 2;
				}
			};
		},
		ResultObject
		{
			Id = "GoodNeighborhoodRelationBuffForward";
			DisplayName = "$GoodNeighborhoodRelationBuff";
			Results = array
			{
				//Remove Negative forward and display effects from building
				FunctionRemoveEffect
				{
					ApplyTo = "Self";
					MatchAny = true;
					Tags = array{ "BadNeighborhoodRelationBuffForward" };
				},
				//Add positive forward and display effects to building
				DisplayEffect
				{
					ApplyTo = "Self";
					DisplayGroup = "buffed";
					Tags = array{ "GoodNeighborhoodRelationBuffForward" };
					DisplayName = "$GoodNeighborhoodRelationBuff";
				},
				ForwardEffect
				{
					ApplyTo = "Self";
					Relation = "Self";
					Tags = array{ "GoodNeighborhoodRelationBuffForward" };
					ResultObjectId = "GoodNeighborhoodRelationBuff";
				}
			};
		},
		ResultObject
		{
			Id = "GoodNeighborhoodRelationBuff";
			DisplayName = "$GoodNeighborhoodRelationBuff";
			Filter = "IsEmployeeOfBuilding && !IsFamilyMember";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "GoodNeighborhoodRelationBuff" };
					DisplayGroup = "buffed";
					DisplayName = "$GoodNeighborhoodRelationBuff";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "GoodNeighborhoodRelationBuff" };
					ActorValue = "Productivity";
					Mod = 0.05;
					Recover = true;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "GoodNeighborhoodRelationBuff" };
					ActorValue = "MovementSpeedMult";
					Mod = 0.05;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "BadNeighborhoodRelationBuffForward";
			DisplayName = "$BadNeighborhoodRelationBuff";
			Results = array
			{
				//Remove positive forward and display effects from building
				FunctionRemoveEffect
				{
					ApplyTo = "Self";
					MatchAny = true;
					Tags = array{ "GoodNeighborhoodRelationBuffForward" };
				},
				//add negative forward and display effects to building
				DisplayEffect
				{
					ApplyTo = "Self";
					DisplayGroup = "debuffed";
					Tags = array{ "BadNeighborhoodRelationBuffForward" };
					DisplayName = "$BadNeighborhoodRelationBuff";
				},
				ForwardEffect
				{
					ApplyTo = "Self";
					Relation = "Self";
					Tags = array{ "BadNeighborhoodRelationBuffForward" };
					ResultObjectId = "BadNeighborhoodRelationBuff";
				}
			};
		},
		ResultObject
		{
			Id = "BadNeighborhoodRelationBuff";
			DisplayName = "$BadNeighborhoodRelationBuff";
			Filter = "IsEmployeeOfBuilding && !IsFamilyMember";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "BadNeighborhoodRelationBuff" };
					DisplayGroup = "debuffed";
					DisplayName = "$BadNeighborhoodRelationBuff";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "BadNeighborhoodRelationBuff" };
					ActorValue = "Productivity";
					Mod = -0.05;
					Recover = true;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "BadNeighborhoodRelationBuff" };
					ActorValue = "MovementSpeedMult";
					Mod = -0.05;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "RemoveNeighborhoodRelationBuffForward";
			Results = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Self";
					Tags = array{ "BadNeighborhoodRelationBuffForward", "GoodNeighborhoodRelationBuffForward" };
					MatchAny = true;
				}
			};
		},
		ResultObject
		{
			Id = "RemoveFleaSpread";
			Results = array
			{
				FunctionRemoveEffect
				{
					Tags = array{"SpreadingFleas"};
					MatchAny = true;
					ApplyTo = "Target";
				}
			};
		},
		ResultObject
		{
			Id = "RemoveFleas";
			Results = array
			{
				FunctionRemoveEffect
				{
					MatchAny = true;
					Tags = array{"Fleas"};
					ApplyTo = "Target";
				}
			};
		},
		ResultObject
		{
			// Result object which is triggered when a heal service is provided
			// All effects need to have the tag "ServiceTreatment" so they will get removed when the treatment stops
			Id = "StartHealService";
			Results = array
			{
			};
		},
		ResultObject
		{
			// Result object which is triggered when a disease service is provided
			// All effects need to have the tag "ServiceTreatment" so they will get removed when the treatment stops
			Id = "StartDiseaseService";
			Results = array
			{
				ModifierEffect
				{
					Filter = "hasTag.Leprosy";
					Tags = array{ "ServiceTreatment" };
					ApplyTo = "Target";
					ActorValue = "Health";
					Mod = 0.1;
					Duration = 1080.0;
					Recover = false;
				},
				ModifierEffect
				{
					Filter = "hasTag.Cold";
					Tags = array{ "ServiceTreatment" };
					ApplyTo = "Target";
					ActorValue = "Health";
					Mod = 0.075;
					Duration = 540.0;
					Recover = false;
				},
				ModifierEffect
				{
					Filter = "hasTag.ScarletFever";
					Tags = array{ "ServiceTreatment" };
					ApplyTo = "Target";
					ActorValue = "Health";
					Mod = 0.1;
					Duration = 720;
					Recover = false;
				},
				ModifierEffect
				{
					Filter = "hasTag.Plague";
					Tags = array{ "ServiceTreatment" };
					ApplyTo = "Target";
					ActorValue = "Health";
					Mod = 0.75;
					Duration = 1080;
					Recover = false;
				},
				ModifierEffect
				{
					Filter = "hasTag.Measles";
					Tags = array{ "ServiceTreatment" };
					ApplyTo = "Target";
					ActorValue = "Health";
					Mod = 0.1;
					Duration = 540;
					Recover = false;
				},
			};
		},
		ResultObject
		{
			// Result object which is triggered when a disease service is provided
			// All effects need to have the tag "ServiceTreatment" so they will get removed when the treatment stops
			Id = "StartDiseaseServiceMedicus";
			Results = array
			{
				ModifierEffect
				{
					Filter = "hasTag.Leprosy";
					Tags = array{ "ServiceTreatment" };
					ApplyTo = "Target";
					ActorValue = "Health";
					Mod = 0.1;
					Duration = 1080.0;
					Recover = false;
				},
				ModifierEffect
				{
					Filter = "hasTag.Cold";
					Tags = array{ "ServiceTreatment" };
					ApplyTo = "Target";
					ActorValue = "Health";
					Mod = 0.075;
					Duration = 540.0;
					Recover = false;
				},
				ModifierEffect
				{
					Filter = "hasTag.ScarletFever";
					Tags = array{ "ServiceTreatment" };
					ApplyTo = "Target";
					ActorValue = "Health";
					Mod = 0.1;
					Duration = 720;
					Recover = false;
				},
				ModifierEffect
				{
					Filter = "hasTag.Plague";
					Tags = array{ "ServiceTreatment" };
					ApplyTo = "Target";
					ActorValue = "Health";
					Mod = 0.75;
					Duration = 1080;
					Recover = false;
				},
				ModifierEffect
				{
					Filter = "hasTag.Measles";
					Tags = array{ "ServiceTreatment" };
					ApplyTo = "Target";
					ActorValue = "Health";
					Mod = 0.1;
					Duration = 540;
					Recover = false;
				},
			};
		},
		
		ResultObject
		{
			// Result object which is triggered when a poison service is provided
			// All effects need to have the tag "ServiceTreatment" so they will get removed when the treatment stops
			Id = "StartPoisonService";
			Results = array
			{
				ModifierEffect
				{
					Filter = "hasTag.BlackWidowPoison";
					Tags = array{ "ServiceTreatment" };
					ApplyTo = "Target";
					ActorValue = "Health";
					Mod = 0.5;
					Duration = 270.0;
					Recover = false;
				},
				ModifierEffect
				{
					Filter = "hasTag.FaustusDoT";
					Tags = array{ "ServiceTreatment" };
					ApplyTo = "Target";
					ActorValue = "Health";
					Mod = 0.66;
					Duration = 30;
					Recover = false;
				},
			};
		},
		ResultObject
		{
			Id = "StopServiceAction";
			Results = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					Tags = array{ "ServiceTreatment" };
					MatchAny = true;
				},
			};
		},		
		ResultObject
		{
			Id = "HealService";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array {"ServingCustomers"};
					DisplayGroup = "buffed"; // change to sth more specific if we have the icon for that
					DisplayName = "$effect.OpenForCustomersInjuries";
				},
			};
		},		
		ResultObject
		{
			Id = "DiseaseService";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array {"ServingCustomers"};
					DisplayGroup = "buffed"; // change to sth more specific if we have the icon for that
					DisplayName = "$effect.OpenForCustomersDisease";
				},
			};
		},		
		ResultObject
		{
			Id = "PoisonService";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array {"ServingCustomers"};
					DisplayGroup = "buffed"; // change to sth more specific if we have the icon for that
					DisplayName = "$effect.OpenForCustomersPoisons";
				},
			};
		},		
		ResultObject
		{
			Id = "GastronomyService";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array {"ServingCustomers"};
					DisplayGroup = "buffed"; // change to sth more specific if we have the icon for that
					DisplayName = "$effect.OpenForCustomersInn";
				},
			};
		},
		ResultObject
		{
			Id = "BodyCareService";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array {"ServingCustomers"};
					DisplayGroup = "buffed"; // change to sth more specific if we have the icon for that
					DisplayName = "$effect.OpenForCustomersBarber";
				},
			};
		},
		ResultObject
		{
			Id = "SpeakeasyService";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array {"ServingCustomers"};
					DisplayGroup = "buffed"; // change to sth more specific if we have the icon for that
					DisplayName = "$effect.OpenForCustomersSmuggler";
				},
			};
		},
		
		ResultObject
		{
			// Result object which is triggered when a customer starts waiting for a heal service
			// All effects need to have the tag "WaitingService" so they will get removed after the wait
			Id = "StartWaitingGetHealService";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array {"WaitingService", "DiseaseImmunity"};
					DisplayGroup = "diseaseimmunity";
					DisplayName = "$IncreasedHygiene";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					ActorValue = "Resistance";
					Mod = 5;
					Tags = array {"WaitingService"};
					Recover = true;
				},
			};
		},
		ResultObject
		{
			// Result object which is triggered when a customer starts waiting for a Poison need to be fulfilled
			// All effects need to have the tag "WaitingService" so they will get removed after the wait
			Id = "StartWaitingGetDiseaseService";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array {"WaitingService", "DiseaseImmunity"};
					DisplayGroup = "diseaseimmunity";
					DisplayName = "$IncreasedHygiene";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					ActorValue = "Resistance";
					Mod = 5;
					Tags = array {"WaitingService"};
					Recover = true;
				},
			};
		},
		ResultObject
		{
			// Result object which is triggered when a customer starts waiting for a Disease need to be fulfilled
			// All effects need to have the tag "WaitingService" so they will get removed after the wait
			Id = "StartWaitingGetPoisonService";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array {"WaitingService", "DiseaseImmunity"};
					DisplayGroup = "diseaseimmunity";
					DisplayName = "$IncreasedHygiene";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					ActorValue = "Resistance";
					Mod = 5;
					Tags = array {"WaitingService"};
					Recover = true;
				},
			};
		},
		ResultObject
		{
			// Result object which is triggered when a customer starts waiting for a Disease need to be fulfilled
			// All effects need to have the tag "WaitingService" so they will get removed after the wait
			Id = "StartWaitingGetDiseaseServiceMedicus";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array {"WaitingService", "DiseaseImmunity"};
					DisplayGroup = "diseaseimmunity";
					DisplayName = "$IncreasedHygiene";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					ActorValue = "Resistance";
					Mod = 5;
					Tags = array {"WaitingService"};
					Recover = true;
				},
			};
		},
		ResultObject
		{
			// Generic Result object which is triggered when a customer is removed from waiting customer list
			Id = "StopWaitingForService";
			Results = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					MatchAny = true;
					Tags = array {"WaitingService"};
				}
			};
		},
		
		ResultObject
		{
			// Result object which is triggered when a customer starts waiting for a body care service to be fulfilled
			// All effects need to have the tag "WaitingService" so they will get removed after the wait
			Id = "StartWaitingGetBodyCareService";
			Results = array
			{
			};
		},
		ResultObject
		{
			// Result object which is triggered when a body care service is provided
			// All effects need to have the tag "ServiceTreatment" so they will get removed when the treatment stops
			Id = "StartBodyCareService";
			Results = array
			{
			};
		},

		ResultObject
		{
			// Result object which is triggered when a customer starts waiting for a body care service to be fulfilled
			// All effects need to have the tag "WaitingService" so they will get removed after the wait
			Id = "StartWaitingGetSpeakeasyService";
			Results = array
			{
			};
		},
		ResultObject
		{
			// Result object which is triggered when a body care service is provided
			// All effects need to have the tag "ServiceTreatment" so they will get removed when the treatment stops
			Id = "StartSpeakeasyService";
			Results = array
			{
			};
		},
		
		ResultObject
		{
			// Result object which is triggered when a customer starts waiting for service at the Inn.
			// All effects need to have the tag "WaitingService" so they will get removed after the wait
			Id = "StartWaitingGetGastronomyService";
			Results = array
			{
			};
		},
		ResultObject
		{
			// Result object which is triggered when a customer starts getting serviced at the Inn.
			// All effects need to have the tag "ServiceTreatment" so they will get removed when the treatment stops
			Id = "StartGastronomyService";
			Results = array
			{
			};
		},

		ResultObject
		{
			// Result object which is triggered when a smuggler gets some infomration from a customer
			Id = "ApplySmugglerBuff1";
			Results = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Source";
					MatchAny = true;
					Tags = array {"SmugglerBuff1"};
				},
				DisplayEffect
				{
					Tags = array{"SmugglerBuff1"};
					ApplyTo = "Source";
					DisplayGroup = "buffed";
					DisplayName = "$effect.SmugglerBuff1";
					Duration = 540.0;
				}
			};
		},
		ResultObject
		{
			// Result object which is triggered when a smuggler gets some infomration from a customer
			Id = "ApplySmugglerBuff2";
			Results = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Source";
					MatchAny = true;
					Tags = array {"SmugglerBuff2"};
				},
				DisplayEffect
				{
					Tags = array{"SmugglerBuff1"};
					ApplyTo = "Source";
					DisplayGroup = "buffed";
					DisplayName = "$effect.SmugglerBuff2";
					Duration = 540.0;
				}
			};
		},
		ResultObject
		{
			// Result object which is triggered when a smuggler gets some infomration from a customer
			Id = "ApplySmugglerBuff3";
			Results = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Source";
					MatchAny = true;
					Tags = array {"SmugglerBuff3"};
				},
				DisplayEffect
				{
					Tags = array{"SmugglerBuff3"};
					ApplyTo = "Source";
					DisplayGroup = "buffed";
					DisplayName = "$effect.SmugglerBuff1";
					Duration = 540.0;
				}
			};
		},
		
		ResultObject
		{
			Id = "DiseaseImmunity";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					DisplayGroup = "diseaseimmunity";
					DisplayName = "$DiseaseImmunity";
					Tags = array{ "DiseaseImmunity" };
				},
			};
		},
		ResultObject
		{
			Id = "DiseaseImmunityWorker";
			Filter = "IsEmployeeOfBuilding";
			DisplayName = "$DiseaseImmunity.Worker";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					DisplayGroup = "diseaseimmunity";
					DisplayName = "$DiseaseImmunity.Worker";
					Tags = array{ "DiseaseImmunity" };
				},
			};
		},
		ResultObject
		{
			Id = "StopServingCustomers";
			Results = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					MatchAny = true;
					Tags = array {"ServingCustomers"};
				}
			};
		},
		ResultObject
		{
			Id = "PayHealthcare";
			Results = array
			{
				FunctionTransferMoney
				{
					Giver = "Target";
					Receiver = "Source";
					Amount = 0; //Amount will be set by the Service Action depending on damage/number of poisons/diseases healed
				}
			};
		},
		ResultObject
		{
			Id = "FleeingBuff";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Self";
					Tags = array{"Fleeing"};
					DisplayGroup = "alarm";
					DisplayName="$action.CombatFlee";
				},
				ModifierEffect
				{
					Tags = array{"Fleeing"};
					ApplyTo = "Self";
					ActorValue = "MovementSpeedMult";
					Mod = 1.0;
					Recover = true;
				}
			};
		};
		ResultObject
		{
			Id = "RemoveFleeingBuff";
			Results = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Self";
					MatchAny = true;
					Tags = array {"Fleeing"};
				},
			};
		};
		ResultObject
		{
			Id = "CharacterKidnapped";
			DisplayName = "$gui.Kidnapped";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "Kidnapped" };
					DisplayGroup = "prison";
					DisplayName = "$gui.Kidnapped";
				}
			};
		},
		ResultObject
		{
			Id = "KidnapVictimChildLost";
			Results = array
			{
				// Source is the mother, target is the kidnapper.
				FunctionUpdateRelationship
				{
					AffectSource = "-8";
					AffectSourceAllies = "-3";
					AffectSourceEnemies = "3";
					AffectSourceSocietyMembers = "-3";
					AffectSourceAlliedSocietyMembers = "-1";
					AffectSourceEnemySocietyMembers = "1";
				}
			};
		},
		ResultObject
		{
			Id = "CharacterJailed";
			DisplayName = "$gui.JailPrisoner";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "Jail" };
					DisplayGroup = "prison";
					DisplayName = "$gui.JailPrisoner";
				}
			};
		},
		ResultObject
		{
			Id = "RemoveJailEffect";
			Results = array
			{
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					MatchAny = true;
					Tags = array{"Jail", "Kidnapped"};
				},
				FunctionTriggerAction
				{
					ApplyTo = "Target";
					Actions = array{ "GoHome" };
				},
			};
		},
		ResultObject // mainly used for working with the ApplyResultObject cheat
		{
			Id = "BecomeSovereignResult";
			Results = array
			{
				UnlockEffect
				{
					Names = array { "RunForOffice", "BecomeSovereign" };
				};
			};
		},
		
		ResultObject // mainly used for working with the ApplyResultObject cheat
		{
			Id = "NegativeFrontstoreTrade";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{"NegativeFrontstoreTrade"};
					DisplayGroup = "debuffed";
					Duration = 30;
					DisplayName = "$effect.UnhappyCustomer";
				},
				FunctionUpdateRelationship
				{
					AffectSource = "0"; //will be set in code
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"NegativeFrontstoreTrade"};
					ActorValue = "Attractiveness";
					Mod = 0.0f; //will be set in code
					Duration = 30;
					Recover = true;
				}
			};
		},
		ResultObject // mainly used for working with the ApplyResultObject cheat
		{
			Id = "PositiveFrontstoreTrade";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{"PositiveFrontstoreTrade"};
					DisplayGroup = "buffed";
					Duration = 30;
					DisplayName = "$effect.HappyCustomer";
				},
				FunctionUpdateRelationship
				{
					AffectSource = "0"; //will be set in code
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"PositiveFrontstoreTrade"};
					ActorValue = "Attractiveness";
					Mod = 0.0f; //will be set in code
					Duration = 30;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "d.q.riddOnion.closingLine1";
			DisplayName = "$effect.correctQuestAnswer";
			Results = array
			{
				FunctionGiveExperience
				{
					ApplyTo = "Target";
					Amount = 30;
				};
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					Duration = 120;
					DisplayGroup = "buffed";
					DisplayName = "$effect.correctQuestAnswer";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "Strength";
					Mod = 1;
					Duration = 120.0;
					Recover = true;
				};
			};
		},
		ResultObject
		{
			Id = "d.q.riddOnion.closingLine2";
			DisplayName = "$effect.correctQuestAnswer";
			Results = array
			{
				FunctionGiveExperience
				{
					ApplyTo = "Target";
					Amount = 30;
				};
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					Duration = 120;
					DisplayGroup = "buffed";
					DisplayName = "$effect.correctQuestAnswer";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "Charisma";
					Mod = 1;
					Duration = 120.0;
					Recover = true;
				};
			};
		},
		ResultObject
		{
			Id = "d.q.riddOnion.closingLine3";
			DisplayName = "$effect.correctQuestAnswer";
			Results = array
			{
				FunctionGiveExperience
				{
					ApplyTo = "Target";
					Amount = 50;
				};
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					Duration = 120;
					DisplayGroup = "buffed";
					DisplayName = "$effect.correctQuestAnswer";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "Intelligence";
					Mod = 1;
					Duration = 120.0;
					Recover = true;
				};
			};
		},
		ResultObject
		{
			Id = "d.q.youRich.closingLine1";
			DisplayName = "$effect.correctQuestAnswer";
			Results = array
			{
				FunctionGiveExperience
				{
					ApplyTo = "Target";
					Amount = 30;
				};
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					Duration = 120;
					DisplayGroup = "buffed";
					DisplayName = "$effect.correctQuestAnswer";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "Productivity";
					Mod = 0.1;
					Duration = 120.0;
					Recover = true;
				};
			};
		},
		ResultObject
		{
			Id = "d.q.youRich.closingLine3";
			DisplayName = "$effect.correctQuestAnswer";
			Results = array
			{
				FunctionGiveExperience
				{
					ApplyTo = "Target";
					Amount = 50;
				};
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					Duration = 120;
					DisplayGroup = "buffed";
					DisplayName = "$effect.correctQuestAnswer";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "Stealth";
					Mod = 1;
					Duration = 120.0;
					Recover = true;
				};
			};
		},
		ResultObject
		{
			Id = "d.q.helio.closingLine1";
			DisplayName = "$effect.correctQuestAnswer";
			Results = array
			{
				FunctionGiveExperience
				{
					ApplyTo = "Target";
					Amount = 30;
				};
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					Duration = 120;
					DisplayGroup = "buffed";
					DisplayName = "$effect.correctQuestAnswer";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "Intelligence";
					Mod = 1;
					Duration = 120.0;
					Recover = true;
				};
			};
		},
		ResultObject
		{
			Id = "d.q.helio.closingLine2";
			DisplayName = "$effect.correctQuestAnswer";
			Results = array
			{
				FunctionGiveExperience
				{
					ApplyTo = "Target";
					Amount = 30;
				};
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					Duration = 120;
					DisplayGroup = "buffed";
					DisplayName = "$effect.correctQuestAnswer";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "Intelligence";
					Mod = -1;
					Duration = 120.0;
					Recover = true;
				};
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "Charisma";
					Mod = 2;
					Duration = 120.0;
					Recover = true;
				};
			};
		},
		ResultObject
		{
			Id = "d.q.helio.closingLine3";
			DisplayName = "$effect.correctQuestAnswer";
			Results = array
			{
				FunctionGiveExperience
				{
					ApplyTo = "Target";
					Amount = 30;
				};
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					Duration = 120;
					DisplayGroup = "buffed";
					DisplayName = "$effect.correctQuestAnswer";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "ExperienceGainMult";
					Mod = 0.2;
					Duration = 120.0;
					Recover = true;
				};
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "Charisma";
					Mod = -1;
					Duration = 120.0;
					Recover = true;
				};
			};
		},
		ResultObject
		{
			Id = "d.q.greatDyn.closingLine1";
			DisplayName = "$effect.correctQuestAnswer";
			Results = array
			{
				FunctionGiveExperience
				{
					ApplyTo = "Target";
					Amount = 30;
				};
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					Duration = 120;
					DisplayGroup = "buffed";
					DisplayName = "$effect.correctQuestAnswer";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "BargainingBonus";
					Mod = 0.1;
					Duration = 120.0;
					Recover = true;
				};
			};
		},
		ResultObject
		{
			Id = "d.q.greatDyn.closingLine2";
			DisplayName = "$effect.correctQuestAnswer";
			Results = array
			{
				FunctionGiveExperience
				{
					ApplyTo = "Target";
					Amount = 30;
				};
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					Duration = 120;
					DisplayGroup = "buffed";
					DisplayName = "$effect.correctQuestAnswer";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "ReputationBonus";
					Mod = 0.1;
					Duration = 120.0;
					Recover = true;
				};
			};
		},
		ResultObject
		{
			Id = "d.q.greatDyn.closingLine3";
			DisplayName = "$effect.correctQuestAnswer";
			Results = array
			{
				FunctionGiveExperience
				{
					ApplyTo = "Target";
					Amount = 30;
				};
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					Duration = 120;
					DisplayGroup = "buffed";
					DisplayName = "$effect.correctQuestAnswer";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{ "questAnswer" };
					ActorValue = "PrestigeGainMult";
					Mod = 0.1;
					Duration = 120.0;
					Recover = true;
				};
			};
		},
		ResultObject
		{
			Id = "StrongDoorLatch";
			DisplayName = "$StrongDoorLatchBuff";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"StrongDoorLatch"};
					ActorValue = "BuildingSecurity";
					Mod = 1.0;
					Duration = 1800;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "WarBanner";
			DisplayName = "$WarBanner";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"WarBanner"};
					ActorValue = "BuildingSecurity";
					Mod = 10.0;
					Duration = 0.0;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "ConstructionPlan";
			DisplayName = "$ConstructionPlan";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"ConstructionPlan"};
					ActorValue = "StorageSlots";
					Mod = 2;
					Duration = 0.0;
					Recover = true;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"ConstructionPlan"};
					ActorValue = "StorageSpace";
					Mod = 10.0;
					Duration = 0.0;
					Recover = true;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"ConstructionPlan"};
					ActorValue = "Health";
					Mod = 500.0;
					Duration = 0.0;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "SignetGuildofCraftsmen";
			DisplayName = "$SignetGuildofCraftsmen";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"SignetGuildofCraftsmen"};
					ActorValue = "Productivity";
					Mod = 0.2;
					Duration = 0.0;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "SignetGuildofMerchants";
			DisplayName = "$SignetGuildofMerchants";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"SignetGuildofMerchants"};
					ActorValue = "Attractiveness";
					Mod = 25;
					Duration = 0.0;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "BetrayedCaptainForeward";
			DisplayName = "$BetrayedCaptain";
			Filter = "IsEmployeeOfBuilding";
			Results = array
			{
				DisplayEffect
				{
					Tags = array{"BetrayedCaptain"};
					ApplyTo = "Target";
					Duration = 0.0;
					DisplayGroup = "buffed";
					DisplayName = "$effect.buff.BetrayedCaptain.Worker";
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"BetrayedCaptain"};
					ActorValue = "Motivation";
					Mod = 1.5;
					Duration = 0.0;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "PoisonTrap";
			DisplayName = "$PoisonTrap";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"PoisonTrap"};		
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "MuralPainting";
			DisplayName = "$MuralPaintingBuff";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"MuralPainting"};
					ActorValue = "Attractiveness";
					Mod = 10.0;
					Duration = 1800;
					Recover = true;
				}
			};
		},
		ResultObject
		{
			Id = "SlateTile";
			DisplayName = "$SlateTileBuff";
			Results = array
			{
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"SlateTile"};
					ActorValue = "Health";
					Mod = 200.0;
					Duration = 1800;
					Recover = true;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					Tags = array{"SlateTile"};
					ActorValue = "FireProtection";
					Mod = 2.0;
					Duration = 1800;
					Recover = true;
				}
			};
		},
		
		ResultObject
		{
			Id = "StatueAstonishResult";
			DisplayName = "$statusEffect.Astounded";
			Results = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "1";
				},
				VisualEffect
				{
					ApplyTo = "Target";
					VisualName = "Compliment";
					Tags = array{"StatueAstonish", "Astonished"};
					Duration = 5.0;
				},
				DisplayEffect // pedestrian
				{
					ApplyTo = "Target";
					Tags = array{"StatueAstonish", "Astonished"};
					Duration = 150.0;
					DisplayGroup = "astonished";
					DisplayName = "$statusEffect.Astounded";
				}
			};
		},

		ResultObject
		{
			Id = "DistractEveryoneInReach";
			DisplayName = "$statusEffect.Distracted";
			Results = array
			{
				VisualEffect
				{
					ApplyTo = "Target";
					VisualName = "Inebriate";
					Duration = 25.0;
				},
				DisplayEffect
				{
					ApplyTo = "Target";
					Tags = array{"Distracted"};
					Duration = 260.0;
					DisplayGroup = "unconscious";
					DisplayName = "$statusEffect.Distracted";
				},
				FunctionRemoveEffect
				{
					ApplyTo = "Target";
					MatchAny = true;
					Tags = array{ "Alerted" };
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					ActorValue = "Perception";
					Mod = -2.0;
					Duration = 260.0;
					Recover = true;
				},
				ModifierEffect
				{
					ApplyTo = "Target";
					ActorValue = "Intelligence";
					Mod = -2.0;
					Duration = 260.0;
					Recover = true;
				}
			};
		},
		
		// 'ManualProductionBuff' gets applied to all workers that are in manual production mode
		// (working on a manually defined orders list or direct order assignment).
		// All effects must have the tag "ManualProduction", so they can get removed correctly later.
		ResultObject
		{
			Id = "ManualProductionBuff";
			DisplayName = "$effect.ManualProduction";
			Results = array
			{
				DisplayEffect
				{
					ApplyTo = "Source";
					Tags = array{"ManualProduction"};
					DisplayGroup = "buffed";
					DisplayName = "$effect.ManualProduction";
					ForceHotStorage = true; // Optimization: flag the effect as 'hot' to indicate that it will be added/removed frequently, even though it has no fixed duration. (This affects network traffic in Multiplayer)
				},
				ModifierEffect
				{
					ApplyTo = "Source";
					ActorValue = "Productivity";
					Mod = 0.05;
					Recover = true;
					Tags = array{"ManualProduction"};
					ForceHotStorage = true; // Optimization: flag the effect as 'hot' to indicate that it will be added/removed frequently, even though it has no fixed duration. (This affects network traffic in Multiplayer)
				},
				ModifierEffect
				{
					ApplyTo = "Source";
					ActorValue = "Motivation";
					Mod = 1.0;
					Recover = true;
					Tags = array{"ManualProduction"};
					ForceHotStorage = true; // Optimization: flag the effect as 'hot' to indicate that it will be added/removed frequently, even though it has no fixed duration. (This affects network traffic in Multiplayer)
				},
			};
		},
		
		ResultObject
		{
			Id = "ConquerBuildingRelationshipChanges";
			Results = array
			{
				FunctionUpdateRelationship
				{
					AffectTarget = "-25";
					AffectTargetAllies = "-10";
					AffectTargetEnemies = "12";
				}
			};
		},

		ResultObject
		{
			Id = "AffectJailor"; // prisoner complains and jailor will react on that
			Results = array
			{
				TagEffect
				{
					ApplyTo = "Target";
					Tags = array{"JailorGoingToThreaten"};
					Duration = 10.0;
				},
			};
		},
		
		@base/SkillsResultObjects,
		@base/DifficultyResultObjects,
		@base/PregnancyResultObjects,
		@base/BirthTraitResultObjects,
		@base/DiseaseResultObjects,
		@base/UnconsciousResultObjects,
		@base/BurningBuildingResultObjects,
		@base/PoliticalPowersResultObjects,
		@base/ProfessionResultObjects,
		@base/ReligionResultObjects,
		@base/TutorialResultObjects,
		@base/RomancePreferenceResultObjects,
		@base/AggressionRadiusResultObjects,
		@base/PartyResultObjects,
		@base/MarriageResultObjects,
		@base/ArsenalEventResultObjects,
	};
};
